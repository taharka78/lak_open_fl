// This is autogenerated file. Do not edit!

package com.lak.models.autogenerated;

class WeaponTypeManager
{
	var db : orm.Db;
	var orm : com.lak.models.Orm;
	public var query(get, never) : orm.SqlQuery<com.lak.models.WeaponType>;

	function get_query() : orm.SqlQuery<com.lak.models.WeaponType>
	{
		return new orm.SqlQuery<com.lak.models.WeaponType>("weapon_type", db, this);
	}

	public function new(db:orm.Db, orm:com.lak.models.Orm) : Void
	{
		this.db = db;
		this.orm = orm;
	}

	function newModelFromParams(id:Int, name:String, id_category:String) : com.lak.models.WeaponType
	{
		var _obj = new com.lak.models.WeaponType(db, orm);
		_obj.id = id;
		_obj.name = name;
		_obj.id_category = id_category;
		return _obj;
	}

	function newModelFromRow(d:Dynamic) : com.lak.models.WeaponType
	{
		var _obj = new com.lak.models.WeaponType(db, orm);
		_obj.id = Reflect.field(d, 'id');
		_obj.name = Reflect.field(d, 'name');
		_obj.id_category = Reflect.field(d, 'id_category');
		return _obj;
	}

	public function where(field:String, op:String, value:Dynamic) : orm.SqlQuery<com.lak.models.WeaponType>
	{
		return query.where(field, op, value);
	}

	public function get(id:Int) : com.lak.models.WeaponType
	{
		return getBySqlOne('SELECT * FROM `weapon_type` WHERE `id` = ' + db.quote(id));
	}

	public function create(name:String, id_category:String) : com.lak.models.WeaponType
	{
		db.query('INSERT INTO `weapon_type`(`name`, `id_category`) VALUES (' + db.quote(name) + ', ' + db.quote(id_category) + ')');
		return newModelFromParams(db.lastInsertId(), name, id_category);
	}

	public function createNamed(data:{ name:String, id_category:String }) : com.lak.models.WeaponType
	{
		db.query('INSERT INTO `weapon_type`(`name`, `id_category`) VALUES (' + db.quote(data.name) + ', ' + db.quote(data.id_category) + ')');
		return newModelFromParams(db.lastInsertId(), data.name, data.id_category);
	}

	public function createOptional(data:{ ?name:String, ?id_category:String }) : com.lak.models.WeaponType
	{
		createOptionalNoReturn(data);
		return get(db.lastInsertId());
	}

	public function createOptionalNoReturn(data:{ ?name:String, ?id_category:String }) : Void
	{
		var fields = [];
		var values = [];
		if (Reflect.hasField(data, 'name')) { fields.push('`name`'); values.push(db.quote(data.name)); }
		if (Reflect.hasField(data, 'id_category')) { fields.push('`id_category`'); values.push(db.quote(data.id_category)); }
		db.query('INSERT INTO `weapon_type`(' + fields.join(", ") + ') VALUES (' + values.join(", ") + ')');
	}

	public function delete(id:Int) : Void
	{
		db.query('DELETE FROM `weapon_type` WHERE `id` = ' + db.quote(id) + ' LIMIT 1');
	}

	public function getAll(_order:String=null) : Array<com.lak.models.WeaponType>
	{
		return getBySqlMany('SELECT * FROM `weapon_type`' + (_order != null ? ' ORDER BY ' + _order : ''));
	}

	public function getBySqlOne(sql:String) : com.lak.models.WeaponType
	{
		var rows = db.query(sql + ' LIMIT 1');
		if (rows.length == 0) return null;
		return newModelFromRow(rows.next());
	}

	public function getBySqlMany(sql:String) : Array<com.lak.models.WeaponType>
	{
		var rows = db.query(sql);
		var list : Array<com.lak.models.WeaponType> = [];
		for (row in rows)
		{
			list.push(newModelFromRow(row));
		}
		return list;
	}
}