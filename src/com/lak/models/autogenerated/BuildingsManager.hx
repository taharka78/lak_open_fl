// This is autogenerated file. Do not edit!

package com.lak.models.autogenerated;

class BuildingsManager
{
	var db : orm.Db;
	var orm : com.lak.models.Orm;
	public var query(get, never) : orm.SqlQuery<com.lak.models.Buildings>;

	function get_query() : orm.SqlQuery<com.lak.models.Buildings>
	{
		return new orm.SqlQuery<com.lak.models.Buildings>("buildings", db, this);
	}

	public function new(db:orm.Db, orm:com.lak.models.Orm) : Void
	{
		this.db = db;
		this.orm = orm;
	}

	function newModelFromParams(id:Int, name:String, shortname:String, id_building_category:Int, id_cost_category:Int, shape:String, offset:String, isProduction:Int, canAttack:Int, id_civ:Int) : com.lak.models.Buildings
	{
		var _obj = new com.lak.models.Buildings(db, orm);
		_obj.id = id;
		_obj.name = name;
		_obj.shortname = shortname;
		_obj.id_building_category = id_building_category;
		_obj.id_cost_category = id_cost_category;
		_obj.shape = shape;
		_obj.offset = offset;
		_obj.isProduction = isProduction;
		_obj.canAttack = canAttack;
		_obj.id_civ = id_civ;
		return _obj;
	}

	function newModelFromRow(d:Dynamic) : com.lak.models.Buildings
	{
		var _obj = new com.lak.models.Buildings(db, orm);
		_obj.id = Reflect.field(d, 'id');
		_obj.name = Reflect.field(d, 'name');
		_obj.shortname = Reflect.field(d, 'shortname');
		_obj.id_building_category = Reflect.field(d, 'id_building_category');
		_obj.id_cost_category = Reflect.field(d, 'id_cost_category');
		_obj.shape = Reflect.field(d, 'shape');
		_obj.offset = Reflect.field(d, 'offset');
		_obj.isProduction = Reflect.field(d, 'isProduction');
		_obj.canAttack = Reflect.field(d, 'canAttack');
		_obj.id_civ = Reflect.field(d, 'id_civ');
		return _obj;
	}

	public function where(field:String, op:String, value:Dynamic) : orm.SqlQuery<com.lak.models.Buildings>
	{
		return query.where(field, op, value);
	}

	public function get(id:Int) : com.lak.models.Buildings
	{
		return getBySqlOne('SELECT * FROM `buildings` WHERE `id` = ' + db.quote(id));
	}

	public function create(name:String, shortname:String, id_building_category:Int, id_cost_category:Int, shape:String, offset:String, isProduction:Int, canAttack:Int, id_civ:Int) : com.lak.models.Buildings
	{
		db.query('INSERT INTO `buildings`(`name`, `shortname`, `id_building_category`, `id_cost_category`, `shape`, `offset`, `isProduction`, `canAttack`, `id_civ`) VALUES (' + db.quote(name) + ', ' + db.quote(shortname) + ', ' + db.quote(id_building_category) + ', ' + db.quote(id_cost_category) + ', ' + db.quote(shape) + ', ' + db.quote(offset) + ', ' + db.quote(isProduction) + ', ' + db.quote(canAttack) + ', ' + db.quote(id_civ) + ')');
		return newModelFromParams(db.lastInsertId(), name, shortname, id_building_category, id_cost_category, shape, offset, isProduction, canAttack, id_civ);
	}

	public function createNamed(data:{ name:String, shortname:String, id_building_category:Int, id_cost_category:Int, shape:String, offset:String, isProduction:Int, canAttack:Int, id_civ:Int }) : com.lak.models.Buildings
	{
		db.query('INSERT INTO `buildings`(`name`, `shortname`, `id_building_category`, `id_cost_category`, `shape`, `offset`, `isProduction`, `canAttack`, `id_civ`) VALUES (' + db.quote(data.name) + ', ' + db.quote(data.shortname) + ', ' + db.quote(data.id_building_category) + ', ' + db.quote(data.id_cost_category) + ', ' + db.quote(data.shape) + ', ' + db.quote(data.offset) + ', ' + db.quote(data.isProduction) + ', ' + db.quote(data.canAttack) + ', ' + db.quote(data.id_civ) + ')');
		return newModelFromParams(db.lastInsertId(), data.name, data.shortname, data.id_building_category, data.id_cost_category, data.shape, data.offset, data.isProduction, data.canAttack, data.id_civ);
	}

	public function createOptional(data:{ ?name:String, ?shortname:String, ?id_building_category:Int, ?id_cost_category:Int, ?shape:String, ?offset:String, ?isProduction:Int, ?canAttack:Int, ?id_civ:Int }) : com.lak.models.Buildings
	{
		createOptionalNoReturn(data);
		return get(db.lastInsertId());
	}

	public function createOptionalNoReturn(data:{ ?name:String, ?shortname:String, ?id_building_category:Int, ?id_cost_category:Int, ?shape:String, ?offset:String, ?isProduction:Int, ?canAttack:Int, ?id_civ:Int }) : Void
	{
		var fields = [];
		var values = [];
		if (Reflect.hasField(data, 'name')) { fields.push('`name`'); values.push(db.quote(data.name)); }
		if (Reflect.hasField(data, 'shortname')) { fields.push('`shortname`'); values.push(db.quote(data.shortname)); }
		if (Reflect.hasField(data, 'id_building_category')) { fields.push('`id_building_category`'); values.push(db.quote(data.id_building_category)); }
		if (Reflect.hasField(data, 'id_cost_category')) { fields.push('`id_cost_category`'); values.push(db.quote(data.id_cost_category)); }
		if (Reflect.hasField(data, 'shape')) { fields.push('`shape`'); values.push(db.quote(data.shape)); }
		if (Reflect.hasField(data, 'offset')) { fields.push('`offset`'); values.push(db.quote(data.offset)); }
		if (Reflect.hasField(data, 'isProduction')) { fields.push('`isProduction`'); values.push(db.quote(data.isProduction)); }
		if (Reflect.hasField(data, 'canAttack')) { fields.push('`canAttack`'); values.push(db.quote(data.canAttack)); }
		if (Reflect.hasField(data, 'id_civ')) { fields.push('`id_civ`'); values.push(db.quote(data.id_civ)); }
		db.query('INSERT INTO `buildings`(' + fields.join(", ") + ') VALUES (' + values.join(", ") + ')');
	}

	public function delete(id:Int) : Void
	{
		db.query('DELETE FROM `buildings` WHERE `id` = ' + db.quote(id) + ' LIMIT 1');
	}

	public function getAll(_order:String=null) : Array<com.lak.models.Buildings>
	{
		return getBySqlMany('SELECT * FROM `buildings`' + (_order != null ? ' ORDER BY ' + _order : ''));
	}

	public function getBySqlOne(sql:String) : com.lak.models.Buildings
	{
		var rows = db.query(sql + ' LIMIT 1');
		if (rows.length == 0) return null;
		return newModelFromRow(rows.next());
	}

	public function getBySqlMany(sql:String) : Array<com.lak.models.Buildings>
	{
		var rows = db.query(sql);
		var list : Array<com.lak.models.Buildings> = [];
		for (row in rows)
		{
			list.push(newModelFromRow(row));
		}
		return list;
	}

	public function getById_building_category(id_building_category:Int, _order:String=null) : Array<com.lak.models.Buildings>
	{
		return getBySqlMany('SELECT * FROM `buildings` WHERE `id_building_category` = ' + db.quote(id_building_category) + (_order != null ? ' ORDER BY ' + _order : ''));
	}

	public function getById_civ(id_civ:Int, _order:String=null) : Array<com.lak.models.Buildings>
	{
		return getBySqlMany('SELECT * FROM `buildings` WHERE `id_civ` = ' + db.quote(id_civ) + (_order != null ? ' ORDER BY ' + _order : ''));
	}
}