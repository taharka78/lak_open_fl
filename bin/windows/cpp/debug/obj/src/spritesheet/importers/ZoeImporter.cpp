// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_data_BehaviorData
#include <spritesheet/data/BehaviorData.h>
#endif
#ifndef INCLUDED_spritesheet_data_SpritesheetFrame
#include <spritesheet/data/SpritesheetFrame.h>
#endif
#ifndef INCLUDED_spritesheet_importers_ZoeImporter
#include <spritesheet/importers/ZoeImporter.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9c7fb9d385757fe9_27_parse,"spritesheet.importers.ZoeImporter","parse",0x06c0ed66,"spritesheet.importers.ZoeImporter.parse","spritesheet/importers/ZoeImporter.hx",27,0x1a27eabf)
namespace spritesheet{
namespace importers{

void ZoeImporter_obj::__construct() { }

Dynamic ZoeImporter_obj::__CreateEmpty() { return new ZoeImporter_obj; }

void *ZoeImporter_obj::_hx_vtable = 0;

Dynamic ZoeImporter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZoeImporter_obj > _hx_result = new ZoeImporter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZoeImporter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1c3841f7;
}

 ::spritesheet::Spritesheet ZoeImporter_obj::parse(::String data,::String __o_assetDirectory,::String __o_spritesheetName){
::String assetDirectory = __o_assetDirectory.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String spritesheetName = __o_spritesheetName.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_9c7fb9d385757fe9_27_parse)
HXLINE(  29)		 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->parseRec();
HXLINE(  30)		::Array< ::Dynamic> images = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		{
HXLINE(  32)			int _g = (int)0;
HXDLIN(  32)			::cpp::VirtualArray _g1 = hx::TCast< ::cpp::VirtualArray >::cast(( (::Array< ::Dynamic>)(json->__Field(HX_("images",b8,50,92,fe),hx::paccDynamic)) ));
HXDLIN(  32)			while((_g < _g1->get_length())){
HXLINE(  32)				 ::Dynamic image = _g1->__get(_g);
HXDLIN(  32)				_g = (_g + (int)1);
HXLINE(  34)				images->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(((assetDirectory + HX_("/",2f,00,00,00)) + ::Std_obj::string(image)),null()),null(),null()));
            			}
            		}
HXLINE(  38)		::Array< ::Dynamic> frames = ::Array_obj< ::Dynamic>::__new();
HXLINE(  40)		if (::Std_obj::is( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)),hx::ArrayBase::__mClass)) {
HXLINE(  42)			int _g2 = (int)0;
HXDLIN(  42)			::cpp::VirtualArray _g11 = hx::TCast< ::cpp::VirtualArray >::cast(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic));
HXDLIN(  42)			while((_g2 < _g11->get_length())){
HXLINE(  42)				 ::Dynamic frame = _g11->__get(_g2);
HXDLIN(  42)				_g2 = (_g2 + (int)1);
HXLINE(  46)				int frame1 = ( (int)(frame->__GetItem((int)0)) );
HXDLIN(  46)				int frame2 = ( (int)(frame->__GetItem((int)1)) );
HXDLIN(  46)				int frame3 = ( (int)(frame->__GetItem((int)2)) );
HXDLIN(  46)				int frame4 = ( (int)(frame->__GetItem((int)3)) );
HXDLIN(  46)				int _hx_tmp = ::Std_obj::_hx_int(-(( (Float)(frame->__GetItem((int)5)) )));
HXDLIN(  46)				frames->push( ::spritesheet::data::SpritesheetFrame_obj::__alloc( HX_CTX ,frame1,frame2,frame3,frame4,_hx_tmp,::Std_obj::_hx_int(-(( (Float)(frame->__GetItem((int)6)) )))));
            			}
            		}
            		else {
HXLINE(  52)			Float columns = images->__get((int)0).StaticCast<  ::openfl::display::Bitmap >()->get_width();
HXDLIN(  52)			int columns1 = ::Math_obj::floor(((Float)columns / (Float)( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) )));
HXLINE(  53)			Float rows = images->__get((int)0).StaticCast<  ::openfl::display::Bitmap >()->get_height();
HXDLIN(  53)			int rows1 = ::Math_obj::floor(((Float)rows / (Float)( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) )));
HXLINE(  55)			{
HXLINE(  55)				int _g12 = (int)0;
HXDLIN(  55)				int _g3 = rows1;
HXDLIN(  55)				while((_g12 < _g3)){
HXLINE(  55)					_g12 = (_g12 + (int)1);
HXDLIN(  55)					int k = (_g12 - (int)1);
HXLINE(  57)					{
HXLINE(  57)						int _g31 = (int)0;
HXDLIN(  57)						int _g21 = columns1;
HXDLIN(  57)						while((_g31 < _g21)){
HXLINE(  57)							_g31 = (_g31 + (int)1);
HXDLIN(  57)							int i = (_g31 - (int)1);
HXLINE(  59)							int _hx_tmp1 = ::Std_obj::_hx_int((i * ( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) )));
HXDLIN(  59)							int _hx_tmp2 = ::Std_obj::_hx_int((k * ( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) )));
HXDLIN(  59)							frames->push( ::spritesheet::data::SpritesheetFrame_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2, ::Dynamic( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic))->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),(int)0,(int)0));
            						}
            					}
            				}
            			}
            		}
HXLINE(  69)		 ::haxe::ds::StringMap behaviors =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  71)		{
HXLINE(  71)			int _g4 = (int)0;
HXDLIN(  71)			::Array< ::String > _g13 = ::Reflect_obj::fields( ::Dynamic(json->__Field(HX_("animations",ef,34,1c,83),hx::paccDynamic)));
HXDLIN(  71)			while((_g4 < _g13->length)){
HXLINE(  71)				::String key = _g13->__get(_g4);
HXDLIN(  71)				_g4 = (_g4 + (int)1);
HXLINE(  73)				 ::Dynamic state = ::Reflect_obj::field( ::Dynamic(json->__Field(HX_("animations",ef,34,1c,83),hx::paccDynamic)),key);
HXLINE(  74)				::Array< int > behaviorFrames = ::Array_obj< int >::__new();
HXLINE(  75)				 ::Dynamic frames1 = ::Reflect_obj::field(state,HX_("frames",a6,af,85,ac));
HXLINE(  77)				if (hx::IsNull( frames1 )) {
HXLINE(  81)					::Array< int > list_frames = ( (::Array< int >)(::Reflect_obj::field( ::Dynamic(json->__Field(HX_("animations",ef,34,1c,83),hx::paccDynamic)),key)) );
HXLINE(  83)					{
HXLINE(  83)						int _g32 = list_frames->__get((int)0);
HXDLIN(  83)						int _g22 = list_frames->__get((int)1);
HXDLIN(  83)						while((_g32 < _g22)){
HXLINE(  83)							_g32 = (_g32 + (int)1);
HXDLIN(  83)							int i1 = (_g32 - (int)1);
HXLINE(  85)							behaviorFrames->push(i1);
            						}
            					}
            				}
            				else {
HXLINE(  91)					behaviorFrames = ( (::Array< int >)(::Reflect_obj::field(state,HX_("frames",a6,af,85,ac))) );
            				}
HXLINE(  97)				 ::spritesheet::data::BehaviorData behavior =  ::spritesheet::data::BehaviorData_obj::__alloc( HX_CTX ,key,behaviorFrames,true,(int)30,(int)0,(int)0);
HXLINE(  98)				behaviors->set(behavior->name,behavior);
            			}
            		}
HXLINE( 104)		if ((spritesheetName == HX_("",00,00,00,00))) {
HXLINE( 106)			::String spritesheetName1 = ( (::String)( ::Dynamic(json->__Field(HX_("images",b8,50,92,fe),hx::paccDynamic))->__GetItem((int)0)->__Field(HX_("split",da,ea,6e,81),hx::paccDynamic)(HX_(".",2e,00,00,00))->__GetItem((int)0)) );
HXLINE( 108)			if ((spritesheetName1 == HX_("",00,00,00,00))) {
HXLINE( 110)				spritesheetName1 = HX_("undefined",90,3e,0a,9d);
            			}
            		}
HXLINE( 115)		 ::spritesheet::Spritesheet spritesheet1 =  ::spritesheet::Spritesheet_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(((assetDirectory + HX_("/",2f,00,00,00)) + ::Std_obj::string( ::Dynamic(json->__Field(HX_("images",b8,50,92,fe),hx::paccDynamic))->__GetItem((int)0))),null()),frames,behaviors,null());
HXLINE( 116)		spritesheet1->name = spritesheetName;
HXLINE( 118)		return spritesheet1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZoeImporter_obj,parse,return )


ZoeImporter_obj::ZoeImporter_obj()
{
}

bool ZoeImporter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZoeImporter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZoeImporter_obj_sStaticStorageInfo = 0;
#endif

static void ZoeImporter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZoeImporter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZoeImporter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZoeImporter_obj::__mClass,"__mClass");
};

#endif

hx::Class ZoeImporter_obj::__mClass;

static ::String ZoeImporter_obj_sStaticFields[] = {
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null())
};

void ZoeImporter_obj::__register()
{
	hx::Object *dummy = new ZoeImporter_obj;
	ZoeImporter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("spritesheet.importers.ZoeImporter","\x61","\x05","\x4d","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZoeImporter_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZoeImporter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZoeImporter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZoeImporter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZoeImporter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZoeImporter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZoeImporter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace spritesheet
} // end namespace importers
