// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_data_BehaviorData
#include <spritesheet/data/BehaviorData.h>
#endif
#ifndef INCLUDED_spritesheet_data_SpritesheetFrame
#include <spritesheet/data/SpritesheetFrame.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81f914331de1529d_23_new,"spritesheet.Spritesheet","new",0x02508e58,"spritesheet.Spritesheet.new","spritesheet/Spritesheet.hx",23,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_55_addBehavior,"spritesheet.Spritesheet","addBehavior",0x2e4e3dcb,"spritesheet.Spritesheet.addBehavior","spritesheet/Spritesheet.hx",55,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_60_addFrame,"spritesheet.Spritesheet","addFrame",0x68183d54,"spritesheet.Spritesheet.addFrame","spritesheet/Spritesheet.hx",60,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_70_generateBitmaps,"spritesheet.Spritesheet","generateBitmaps",0x9059fce7,"spritesheet.Spritesheet.generateBitmaps","spritesheet/Spritesheet.hx",70,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_79_generateBitmap,"spritesheet.Spritesheet","generateBitmap",0x84aa4e0c,"spritesheet.Spritesheet.generateBitmap","spritesheet/Spritesheet.hx",79,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_100_getFrame,"spritesheet.Spritesheet","getFrame",0x4e9226bf,"spritesheet.Spritesheet.getFrame","spritesheet/Spritesheet.hx",100,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_115_getFrameIDs,"spritesheet.Spritesheet","getFrameIDs",0x3540fad9,"spritesheet.Spritesheet.getFrameIDs","spritesheet/Spritesheet.hx",115,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_132_getFrames,"spritesheet.Spritesheet","getFrames",0x714fc0d4,"spritesheet.Spritesheet.getFrames","spritesheet/Spritesheet.hx",132,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_137_merge,"spritesheet.Spritesheet","merge",0x0ee8ceb0,"spritesheet.Spritesheet.merge","spritesheet/Spritesheet.hx",137,0x514323d9)
HX_LOCAL_STACK_FRAME(_hx_pos_81f914331de1529d_185_updateImage,"spritesheet.Spritesheet","updateImage",0x9560fe8a,"spritesheet.Spritesheet.updateImage","spritesheet/Spritesheet.hx",185,0x514323d9)
namespace spritesheet{

void Spritesheet_obj::__construct( ::openfl::display::BitmapData image,::Array< ::Dynamic> frames, ::haxe::ds::StringMap behaviors, ::openfl::display::BitmapData imageAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_81f914331de1529d_23_new)
HXLINE(  25)		this->sourceImage = image;
HXLINE(  26)		this->sourceImageAlpha = imageAlpha;
HXLINE(  28)		if (hx::IsNull( frames )) {
HXLINE(  30)			this->frames = ::Array_obj< ::Dynamic>::__new();
HXLINE(  31)			this->totalFrames = (int)0;
            		}
            		else {
HXLINE(  35)			this->frames = frames;
HXLINE(  36)			this->totalFrames = frames->length;
            		}
HXLINE(  40)		if (hx::IsNull( behaviors )) {
HXLINE(  42)			this->behaviors =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(  46)			this->behaviors = behaviors;
            		}
            	}

Dynamic Spritesheet_obj::__CreateEmpty() { return new Spritesheet_obj; }

void *Spritesheet_obj::_hx_vtable = 0;

Dynamic Spritesheet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Spritesheet_obj > _hx_result = new Spritesheet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Spritesheet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x640318e0;
}

void Spritesheet_obj::addBehavior( ::spritesheet::data::BehaviorData behavior){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_55_addBehavior)
HXLINE(  55)		this->behaviors->set(behavior->name,behavior);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spritesheet_obj,addBehavior,(void))

void Spritesheet_obj::addFrame( ::spritesheet::data::SpritesheetFrame frame){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_60_addFrame)
HXLINE(  62)		this->frames->push(frame);
HXLINE(  63)		this->totalFrames++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spritesheet_obj,addFrame,(void))

void Spritesheet_obj::generateBitmaps(){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_70_generateBitmaps)
HXLINE(  70)		int _g1 = (int)0;
HXDLIN(  70)		int _g = this->totalFrames;
HXDLIN(  70)		while((_g1 < _g)){
HXLINE(  70)			_g1 = (_g1 + (int)1);
HXDLIN(  70)			int i = (_g1 - (int)1);
HXLINE(  72)			this->generateBitmap(i);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Spritesheet_obj,generateBitmaps,(void))

void Spritesheet_obj::generateBitmap(int index){
            	HX_GC_STACKFRAME(&_hx_pos_81f914331de1529d_79_generateBitmap)
HXLINE(  81)		 ::spritesheet::data::SpritesheetFrame frame = this->frames->__get(index).StaticCast<  ::spritesheet::data::SpritesheetFrame >();
HXLINE(  83)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,frame->width,frame->height,true,null());
HXLINE(  84)		 ::openfl::geom::Rectangle sourceRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,frame->x,frame->y,frame->width,frame->height);
HXLINE(  85)		 ::openfl::geom::Point targetPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  87)		bitmapData->copyPixels(this->sourceImage,sourceRectangle,targetPoint,null(),null(),null());
HXLINE(  89)		if (hx::IsNotNull( this->sourceImageAlpha )) {
HXLINE(  91)			bitmapData->copyChannel(this->sourceImageAlpha,sourceRectangle,targetPoint,(int)2,(int)8);
            		}
HXLINE(  95)		frame->bitmapData = bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spritesheet_obj,generateBitmap,(void))

 ::spritesheet::data::SpritesheetFrame Spritesheet_obj::getFrame(int index,hx::Null< bool >  __o_autoGenerate){
bool autoGenerate = __o_autoGenerate.Default(true);
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_100_getFrame)
HXLINE( 102)		 ::spritesheet::data::SpritesheetFrame frame = this->frames->__get(index).StaticCast<  ::spritesheet::data::SpritesheetFrame >();
HXLINE( 104)		bool _hx_tmp;
HXDLIN( 104)		bool _hx_tmp1;
HXDLIN( 104)		if (hx::IsNotNull( frame )) {
HXLINE( 104)			_hx_tmp1 = hx::IsNull( frame->bitmapData );
            		}
            		else {
HXLINE( 104)			_hx_tmp1 = false;
            		}
HXDLIN( 104)		if (_hx_tmp1) {
HXLINE( 104)			_hx_tmp = autoGenerate;
            		}
            		else {
HXLINE( 104)			_hx_tmp = false;
            		}
HXDLIN( 104)		if (_hx_tmp) {
HXLINE( 106)			this->generateBitmap(index);
            		}
HXLINE( 110)		return frame;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Spritesheet_obj,getFrame,return )

::Array< int > Spritesheet_obj::getFrameIDs(){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_115_getFrameIDs)
HXLINE( 117)		::Array< int > ids = ::Array_obj< int >::__new(0);
HXLINE( 119)		{
HXLINE( 119)			int _g1 = (int)0;
HXDLIN( 119)			int _g = this->totalFrames;
HXDLIN( 119)			while((_g1 < _g)){
HXLINE( 119)				_g1 = (_g1 + (int)1);
HXDLIN( 119)				int i = (_g1 - (int)1);
HXLINE( 121)				ids->push(i);
            			}
            		}
HXLINE( 125)		return ids;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Spritesheet_obj,getFrameIDs,return )

::Array< ::Dynamic> Spritesheet_obj::getFrames(){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_132_getFrames)
HXLINE( 132)		return this->frames->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Spritesheet_obj,getFrames,return )

::Array< int > Spritesheet_obj::merge( ::spritesheet::Spritesheet spritesheet1){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_137_merge)
HXLINE( 139)		int cacheTotalFrames = this->totalFrames;
HXLINE( 141)		{
HXLINE( 141)			int _g1 = (int)0;
HXDLIN( 141)			int _g = spritesheet1->frames->length;
HXDLIN( 141)			while((_g1 < _g)){
HXLINE( 141)				_g1 = (_g1 + (int)1);
HXDLIN( 141)				int i = (_g1 - (int)1);
HXLINE( 143)				bool _hx_tmp;
HXDLIN( 143)				if (hx::IsNull( spritesheet1->frames->__get(i).StaticCast<  ::spritesheet::data::SpritesheetFrame >()->bitmapData )) {
HXLINE( 143)					if (hx::IsEq( spritesheet1->sourceImage,this->sourceImage )) {
HXLINE( 143)						_hx_tmp = hx::IsNotEq( spritesheet1->sourceImageAlpha,this->sourceImageAlpha );
            					}
            					else {
HXLINE( 143)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 143)					_hx_tmp = false;
            				}
HXDLIN( 143)				if (_hx_tmp) {
HXLINE( 145)					spritesheet1->generateBitmap(i);
            				}
HXLINE( 149)				this->addFrame(spritesheet1->frames->__get(i).StaticCast<  ::spritesheet::data::SpritesheetFrame >());
            			}
            		}
HXLINE( 153)		{
HXLINE( 153)			 ::Dynamic behavior = spritesheet1->behaviors->iterator();
HXDLIN( 153)			while(( (bool)(behavior->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 153)				 ::spritesheet::data::BehaviorData behavior1 = ( ( ::spritesheet::data::BehaviorData)(behavior->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 155)				if (!(this->behaviors->exists(behavior1->name))) {
HXLINE( 157)					 ::spritesheet::data::BehaviorData clone = behavior1->clone();
HXLINE( 158)					clone->name = behavior1->name;
HXLINE( 160)					{
HXLINE( 160)						int _g11 = (int)0;
HXDLIN( 160)						int _g2 = behavior1->frames->length;
HXDLIN( 160)						while((_g11 < _g2)){
HXLINE( 160)							_g11 = (_g11 + (int)1);
HXDLIN( 160)							int i1 = (_g11 - (int)1);
HXLINE( 162)							::Array< int > behavior2 = behavior1->frames;
HXDLIN( 162)							int i2 = i1;
HXDLIN( 162)							behavior2[i2] = (behavior2->__get(i2) + cacheTotalFrames);
            						}
            					}
HXLINE( 166)					this->addBehavior(behavior1);
            				}
            			}
            		}
HXLINE( 172)		::Array< int > ids = ::Array_obj< int >::__new(0);
HXLINE( 174)		{
HXLINE( 174)			int _g12 = cacheTotalFrames;
HXDLIN( 174)			int _g3 = this->totalFrames;
HXDLIN( 174)			while((_g12 < _g3)){
HXLINE( 174)				_g12 = (_g12 + (int)1);
HXDLIN( 174)				int i3 = (_g12 - (int)1);
HXLINE( 176)				ids->push(i3);
            			}
            		}
HXLINE( 180)		return ids;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spritesheet_obj,merge,return )

void Spritesheet_obj::updateImage( ::openfl::display::BitmapData image, ::openfl::display::BitmapData imageAlpha){
            	HX_STACKFRAME(&_hx_pos_81f914331de1529d_185_updateImage)
HXLINE( 187)		this->sourceImage = image;
HXLINE( 188)		this->sourceImageAlpha = imageAlpha;
HXLINE( 190)		{
HXLINE( 190)			int _g = (int)0;
HXDLIN( 190)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 190)			while((_g < _g1->length)){
HXLINE( 190)				 ::spritesheet::data::SpritesheetFrame frame = _g1->__get(_g).StaticCast<  ::spritesheet::data::SpritesheetFrame >();
HXDLIN( 190)				_g = (_g + (int)1);
HXLINE( 192)				if (hx::IsNotNull( frame->bitmapData )) {
HXLINE( 194)					frame->bitmapData = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Spritesheet_obj,updateImage,(void))


hx::ObjectPtr< Spritesheet_obj > Spritesheet_obj::__new( ::openfl::display::BitmapData image,::Array< ::Dynamic> frames, ::haxe::ds::StringMap behaviors, ::openfl::display::BitmapData imageAlpha) {
	hx::ObjectPtr< Spritesheet_obj > __this = new Spritesheet_obj();
	__this->__construct(image,frames,behaviors,imageAlpha);
	return __this;
}

hx::ObjectPtr< Spritesheet_obj > Spritesheet_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData image,::Array< ::Dynamic> frames, ::haxe::ds::StringMap behaviors, ::openfl::display::BitmapData imageAlpha) {
	Spritesheet_obj *__this = (Spritesheet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Spritesheet_obj), true, "spritesheet.Spritesheet"));
	*(void **)__this = Spritesheet_obj::_hx_vtable;
	__this->__construct(image,frames,behaviors,imageAlpha);
	return __this;
}

Spritesheet_obj::Spritesheet_obj()
{
}

void Spritesheet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Spritesheet);
	HX_MARK_MEMBER_NAME(behaviors,"behaviors");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(totalFrames,"totalFrames");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(sourceImage,"sourceImage");
	HX_MARK_MEMBER_NAME(sourceImageAlpha,"sourceImageAlpha");
	HX_MARK_END_CLASS();
}

void Spritesheet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(behaviors,"behaviors");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(totalFrames,"totalFrames");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(sourceImage,"sourceImage");
	HX_VISIT_MEMBER_NAME(sourceImageAlpha,"sourceImageAlpha");
}

hx::Val Spritesheet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addFrame") ) { return hx::Val( addFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"getFrame") ) { return hx::Val( getFrame_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"behaviors") ) { return hx::Val( behaviors); }
		if (HX_FIELD_EQ(inName,"getFrames") ) { return hx::Val( getFrames_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames); }
		if (HX_FIELD_EQ(inName,"sourceImage") ) { return hx::Val( sourceImage); }
		if (HX_FIELD_EQ(inName,"addBehavior") ) { return hx::Val( addBehavior_dyn()); }
		if (HX_FIELD_EQ(inName,"getFrameIDs") ) { return hx::Val( getFrameIDs_dyn()); }
		if (HX_FIELD_EQ(inName,"updateImage") ) { return hx::Val( updateImage_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generateBitmap") ) { return hx::Val( generateBitmap_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"generateBitmaps") ) { return hx::Val( generateBitmaps_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sourceImageAlpha") ) { return hx::Val( sourceImageAlpha); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Spritesheet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"behaviors") ) { behaviors=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { totalFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sourceImage") ) { sourceImage=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sourceImageAlpha") ) { sourceImageAlpha=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Spritesheet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("sourceImage","\x80","\xe4","\x6e","\xec"));
	outFields->push(HX_HCSTRING("sourceImageAlpha","\xbe","\xe2","\x88","\x85"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Spritesheet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Spritesheet_obj,behaviors),HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35")},
	{hx::fsString,(int)offsetof(Spritesheet_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Spritesheet_obj,totalFrames),HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Spritesheet_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Spritesheet_obj,sourceImage),HX_HCSTRING("sourceImage","\x80","\xe4","\x6e","\xec")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Spritesheet_obj,sourceImageAlpha),HX_HCSTRING("sourceImageAlpha","\xbe","\xe2","\x88","\x85")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Spritesheet_obj_sStaticStorageInfo = 0;
#endif

static ::String Spritesheet_obj_sMemberFields[] = {
	HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("sourceImage","\x80","\xe4","\x6e","\xec"),
	HX_HCSTRING("sourceImageAlpha","\xbe","\xe2","\x88","\x85"),
	HX_HCSTRING("addBehavior","\xd3","\xc7","\xee","\x3b"),
	HX_HCSTRING("addFrame","\x4c","\x9e","\xe0","\x7f"),
	HX_HCSTRING("generateBitmaps","\xef","\x2a","\x3c","\xd5"),
	HX_HCSTRING("generateBitmap","\x04","\xb9","\xc5","\xf7"),
	HX_HCSTRING("getFrame","\xb7","\x87","\x5a","\x66"),
	HX_HCSTRING("getFrameIDs","\xe1","\x84","\xe1","\x42"),
	HX_HCSTRING("getFrames","\xdc","\x38","\xdc","\x28"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("updateImage","\x92","\x88","\x01","\xa3"),
	::String(null()) };

static void Spritesheet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Spritesheet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Spritesheet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Spritesheet_obj::__mClass,"__mClass");
};

#endif

hx::Class Spritesheet_obj::__mClass;

void Spritesheet_obj::__register()
{
	hx::Object *dummy = new Spritesheet_obj;
	Spritesheet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("spritesheet.Spritesheet","\x66","\xc2","\x2c","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Spritesheet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Spritesheet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Spritesheet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Spritesheet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Spritesheet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Spritesheet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace spritesheet
