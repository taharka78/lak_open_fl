// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_spritesheet_data_BehaviorData
#include <spritesheet/data/BehaviorData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb6b7fa1522877cd_21_new,"spritesheet.data.BehaviorData","new",0xa87d92be,"spritesheet.data.BehaviorData.new","spritesheet/data/BehaviorData.hx",21,0x1f7f1e12)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6b7fa1522877cd_55_clone,"spritesheet.data.BehaviorData","clone",0xa048a93b,"spritesheet.data.BehaviorData.clone","spritesheet/data/BehaviorData.hx",55,0x1f7f1e12)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6b7fa1522877cd_18_boot,"spritesheet.data.BehaviorData","boot",0xbd7bd414,"spritesheet.data.BehaviorData.boot","spritesheet/data/BehaviorData.hx",18,0x1f7f1e12)
namespace spritesheet{
namespace data{

void BehaviorData_obj::__construct(::String __o_name,::Array< int > frames,hx::Null< bool >  __o_loop,hx::Null< int >  __o_frameRate,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY){
::String name = __o_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool loop = __o_loop.Default(false);
int frameRate = __o_frameRate.Default(30);
Float originX = __o_originX.Default(0);
Float originY = __o_originY.Default(0);
            	HX_STACKFRAME(&_hx_pos_fb6b7fa1522877cd_21_new)
HXLINE(  23)		if ((name == HX_("",00,00,00,00))) {
HXLINE(  25)			name = (HX_("behavior",92,90,92,0a) + ::spritesheet::data::BehaviorData_obj::uniqueID++);
            		}
HXLINE(  29)		if (hx::IsNull( frames )) {
HXLINE(  31)			frames = ::Array_obj< int >::__new(0);
            		}
HXLINE(  35)		this->name = name;
HXLINE(  36)		this->frames = frames;
HXLINE(  37)		this->loop = loop;
HXLINE(  38)		this->frameRate = frameRate;
HXLINE(  39)		this->originX = originX;
HXLINE(  40)		this->originY = originY;
HXLINE(  42)		this->frameData = ::cpp::VirtualArray_obj::__new();
HXLINE(  44)		{
HXLINE(  44)			int _g1 = (int)0;
HXDLIN(  44)			int _g = this->frames->length;
HXDLIN(  44)			while((_g1 < _g)){
HXLINE(  44)				_g1 = (_g1 + (int)1);
HXDLIN(  44)				int i = (_g1 - (int)1);
HXLINE(  46)				this->frameData->push(null());
            			}
            		}
            	}

Dynamic BehaviorData_obj::__CreateEmpty() { return new BehaviorData_obj; }

void *BehaviorData_obj::_hx_vtable = 0;

Dynamic BehaviorData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BehaviorData_obj > _hx_result = new BehaviorData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool BehaviorData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x698b7ea0;
}

 ::spritesheet::data::BehaviorData BehaviorData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_fb6b7fa1522877cd_55_clone)
HXLINE(  55)		::String _hx_tmp = (HX_("behavior",92,90,92,0a) + ::spritesheet::data::BehaviorData_obj::uniqueID++);
HXDLIN(  55)		::Array< int > _hx_tmp1 = this->frames->copy();
HXDLIN(  55)		return  ::spritesheet::data::BehaviorData_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->loop,this->frameRate,this->originX,this->originY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BehaviorData_obj,clone,return )

int BehaviorData_obj::uniqueID;


BehaviorData_obj::BehaviorData_obj()
{
}

void BehaviorData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BehaviorData);
	HX_MARK_MEMBER_NAME(frameData,"frameData");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(originX,"originX");
	HX_MARK_MEMBER_NAME(originY,"originY");
	HX_MARK_END_CLASS();
}

void BehaviorData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frameData,"frameData");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(originX,"originX");
	HX_VISIT_MEMBER_NAME(originY,"originY");
}

hx::Val BehaviorData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"originX") ) { return hx::Val( originX); }
		if (HX_FIELD_EQ(inName,"originY") ) { return hx::Val( originY); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameData") ) { return hx::Val( frameData); }
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate); }
	}
	return super::__Field(inName,inCallProp);
}

bool BehaviorData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"uniqueID") ) { outValue = uniqueID; return true; }
	}
	return false;
}

hx::Val BehaviorData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"originX") ) { originX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originY") ) { originY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameData") ) { frameData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BehaviorData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"uniqueID") ) { uniqueID=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BehaviorData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frameData","\xf7","\x14","\xe4","\x2f"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("originX","\xb2","\x8f","\xf5","\x55"));
	outFields->push(HX_HCSTRING("originY","\xb3","\x8f","\xf5","\x55"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BehaviorData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(BehaviorData_obj,frameData),HX_HCSTRING("frameData","\xf7","\x14","\xe4","\x2f")},
	{hx::fsInt,(int)offsetof(BehaviorData_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(BehaviorData_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsBool,(int)offsetof(BehaviorData_obj,loop),HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47")},
	{hx::fsString,(int)offsetof(BehaviorData_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsFloat,(int)offsetof(BehaviorData_obj,originX),HX_HCSTRING("originX","\xb2","\x8f","\xf5","\x55")},
	{hx::fsFloat,(int)offsetof(BehaviorData_obj,originY),HX_HCSTRING("originY","\xb3","\x8f","\xf5","\x55")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BehaviorData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BehaviorData_obj::uniqueID,HX_HCSTRING("uniqueID","\x2c","\x79","\xaa","\x5b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BehaviorData_obj_sMemberFields[] = {
	HX_HCSTRING("frameData","\xf7","\x14","\xe4","\x2f"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("originX","\xb2","\x8f","\xf5","\x55"),
	HX_HCSTRING("originY","\xb3","\x8f","\xf5","\x55"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void BehaviorData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BehaviorData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BehaviorData_obj::uniqueID,"uniqueID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BehaviorData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BehaviorData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BehaviorData_obj::uniqueID,"uniqueID");
};

#endif

hx::Class BehaviorData_obj::__mClass;

static ::String BehaviorData_obj_sStaticFields[] = {
	HX_HCSTRING("uniqueID","\x2c","\x79","\xaa","\x5b"),
	::String(null())
};

void BehaviorData_obj::__register()
{
	hx::Object *dummy = new BehaviorData_obj;
	BehaviorData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("spritesheet.data.BehaviorData","\xcc","\x1b","\x5a","\x8d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BehaviorData_obj::__GetStatic;
	__mClass->mSetStaticField = &BehaviorData_obj::__SetStatic;
	__mClass->mMarkFunc = BehaviorData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BehaviorData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BehaviorData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BehaviorData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BehaviorData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BehaviorData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BehaviorData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BehaviorData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fb6b7fa1522877cd_18_boot)
HXLINE(  18)		uniqueID = (int)0;
            	}
}

} // end namespace spritesheet
} // end namespace data
