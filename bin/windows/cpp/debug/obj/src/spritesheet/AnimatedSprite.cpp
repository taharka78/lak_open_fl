// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_spritesheet_AnimatedSprite
#include <spritesheet/AnimatedSprite.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_data_BehaviorData
#include <spritesheet/data/BehaviorData.h>
#endif
#ifndef INCLUDED_spritesheet_data_SpritesheetFrame
#include <spritesheet/data/SpritesheetFrame.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_33fefbb539a49f5b_28_new,"spritesheet.AnimatedSprite","new",0x54560b8e,"spritesheet.AnimatedSprite.new","spritesheet/AnimatedSprite.hx",28,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_44_getFrameData,"spritesheet.AnimatedSprite","getFrameData",0x11faa093,"spritesheet.AnimatedSprite.getFrameData","spritesheet/AnimatedSprite.hx",44,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_57_queueBehavior,"spritesheet.AnimatedSprite","queueBehavior",0x42f193f1,"spritesheet.AnimatedSprite.queueBehavior","spritesheet/AnimatedSprite.hx",57,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_74_resolveBehavior,"spritesheet.AnimatedSprite","resolveBehavior",0x501873cc,"spritesheet.AnimatedSprite.resolveBehavior","spritesheet/AnimatedSprite.hx",74,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_95_showBehavior,"spritesheet.AnimatedSprite","showBehavior",0x08dfd5c1,"spritesheet.AnimatedSprite.showBehavior","spritesheet/AnimatedSprite.hx",95,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_104_showBehaviors,"spritesheet.AnimatedSprite","showBehaviors",0xbafb3392,"spritesheet.AnimatedSprite.showBehaviors","spritesheet/AnimatedSprite.hx",104,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_125_update,"spritesheet.AnimatedSprite","update",0x3e41fb9b,"spritesheet.AnimatedSprite.update","spritesheet/AnimatedSprite.hx",125,0xb6ee0e81)
HX_LOCAL_STACK_FRAME(_hx_pos_33fefbb539a49f5b_175_updateBehavior,"spritesheet.AnimatedSprite","updateBehavior",0x35a3db4d,"spritesheet.AnimatedSprite.updateBehavior","spritesheet/AnimatedSprite.hx",175,0xb6ee0e81)
namespace spritesheet{

void AnimatedSprite_obj::__construct( ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_33fefbb539a49f5b_28_new)
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->smoothing = smoothing;
HXLINE(  33)		this->spritesheet = sheet;
HXLINE(  35)		this->behaviorQueue = ::Array_obj< ::Dynamic>::__new();
HXLINE(  36)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  37)		this->addChild(this->bitmap);
            	}

Dynamic AnimatedSprite_obj::__CreateEmpty() { return new AnimatedSprite_obj; }

void *AnimatedSprite_obj::_hx_vtable = 0;

Dynamic AnimatedSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AnimatedSprite_obj > _hx_result = new AnimatedSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AnimatedSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x1a995e62 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

 ::Dynamic AnimatedSprite_obj::getFrameData(int index){
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_44_getFrameData)
HXLINE(  44)		bool _hx_tmp;
HXDLIN(  44)		if (hx::IsNotNull( this->currentBehavior )) {
HXLINE(  44)			_hx_tmp = (this->currentBehavior->frameData->get_length() > index);
            		}
            		else {
HXLINE(  44)			_hx_tmp = false;
            		}
HXDLIN(  44)		if (_hx_tmp) {
HXLINE(  46)			return this->currentBehavior->frameData->__get(index);
            		}
            		else {
HXLINE(  50)			return null();
            		}
HXLINE(  44)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimatedSprite_obj,getFrameData,return )

void AnimatedSprite_obj::queueBehavior( ::Dynamic behavior){
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_57_queueBehavior)
HXLINE(  59)		 ::spritesheet::data::BehaviorData behaviorData = this->resolveBehavior(behavior);
HXLINE(  61)		if (hx::IsNull( this->currentBehavior )) {
HXLINE(  63)			this->updateBehavior(behaviorData,null());
            		}
            		else {
HXLINE(  67)			this->behaviorQueue->push(behaviorData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimatedSprite_obj,queueBehavior,(void))

 ::spritesheet::data::BehaviorData AnimatedSprite_obj::resolveBehavior( ::Dynamic behavior){
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_74_resolveBehavior)
HXLINE(  76)		if (::Std_obj::is(behavior,hx::ClassOf< ::spritesheet::data::BehaviorData >())) {
HXLINE(  78)			return ( ( ::spritesheet::data::BehaviorData)(behavior) );
            		}
            		else {
HXLINE(  80)			if (::Std_obj::is(behavior,hx::ClassOf< ::String >())) {
HXLINE(  82)				if (hx::IsNotNull( this->spritesheet )) {
HXLINE(  84)					return this->spritesheet->behaviors->get(( (::String)(behavior) )).StaticCast<  ::spritesheet::data::BehaviorData >();
            				}
            			}
            		}
HXLINE(  90)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimatedSprite_obj,resolveBehavior,return )

void AnimatedSprite_obj::showBehavior( ::Dynamic behavior,hx::Null< bool >  __o_restart){
bool restart = __o_restart.Default(true);
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_95_showBehavior)
HXLINE(  97)		this->behaviorQueue = ::Array_obj< ::Dynamic>::__new();
HXLINE(  99)		this->updateBehavior(this->resolveBehavior(behavior),restart);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimatedSprite_obj,showBehavior,(void))

void AnimatedSprite_obj::showBehaviors(::cpp::VirtualArray behaviors){
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_104_showBehaviors)
HXLINE( 106)		this->behaviorQueue = ::Array_obj< ::Dynamic>::__new();
HXLINE( 108)		{
HXLINE( 108)			int _g = (int)0;
HXDLIN( 108)			while((_g < behaviors->get_length())){
HXLINE( 108)				 ::Dynamic behavior = behaviors->__get(_g);
HXDLIN( 108)				_g = (_g + (int)1);
HXLINE( 110)				::Array< ::Dynamic> _hx_tmp = this->behaviorQueue;
HXDLIN( 110)				_hx_tmp->push(this->resolveBehavior(behavior));
            			}
            		}
HXLINE( 114)		if ((this->behaviorQueue->length > (int)0)) {
HXLINE( 116)			this->updateBehavior(this->behaviorQueue->shift().StaticCast<  ::spritesheet::data::BehaviorData >(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimatedSprite_obj,showBehaviors,(void))

void AnimatedSprite_obj::update(int deltaTime){
            	HX_GC_STACKFRAME(&_hx_pos_33fefbb539a49f5b_125_update)
HXLINE( 125)		if (!(this->behaviorComplete)) {
HXLINE( 127)			 ::spritesheet::AnimatedSprite _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 127)			_hx_tmp->timeElapsed = (_hx_tmp->timeElapsed + deltaTime);
HXLINE( 129)			Float ratio = ((Float)this->timeElapsed / (Float)this->loopTime);
HXLINE( 131)			if ((ratio >= (int)1)) {
HXLINE( 133)				if (this->currentBehavior->loop) {
HXLINE( 135)					ratio = (ratio - ::Math_obj::floor(ratio));
            				}
            				else {
HXLINE( 139)					this->behaviorComplete = true;
HXLINE( 140)					ratio = (int)1;
            				}
            			}
HXLINE( 146)			this->currentFrameIndex = ::Math_obj::round((ratio * (this->currentBehavior->frames->length - (int)1)));
HXLINE( 147)			 ::spritesheet::Spritesheet frame = this->spritesheet;
HXDLIN( 147)			 ::spritesheet::data::SpritesheetFrame frame1 = frame->getFrame(this->currentBehavior->frames->__get(this->currentFrameIndex),null());
HXLINE( 149)			this->bitmap->set_bitmapData(frame1->bitmapData);
HXLINE( 150)			this->bitmap->smoothing = this->smoothing;
HXLINE( 151)			 ::openfl::display::Bitmap _hx_tmp1 = this->bitmap;
HXDLIN( 151)			_hx_tmp1->set_x((frame1->offsetX - this->currentBehavior->originX));
HXLINE( 152)			 ::openfl::display::Bitmap _hx_tmp2 = this->bitmap;
HXDLIN( 152)			_hx_tmp2->set_y((frame1->offsetY - this->currentBehavior->originY));
HXLINE( 154)			if (this->behaviorComplete) {
HXLINE( 156)				if ((this->behaviorQueue->length > (int)0)) {
HXLINE( 158)					this->updateBehavior(this->behaviorQueue->shift().StaticCast<  ::spritesheet::data::BehaviorData >(),null());
            				}
            				else {
HXLINE( 160)					if (this->hasEventListener(HX_("complete",b9,00,c8,7f))) {
HXLINE( 162)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimatedSprite_obj,update,(void))

void AnimatedSprite_obj::updateBehavior( ::spritesheet::data::BehaviorData behavior,hx::Null< bool >  __o_restart){
bool restart = __o_restart.Default(true);
            	HX_STACKFRAME(&_hx_pos_33fefbb539a49f5b_175_updateBehavior)
HXLINE( 175)		if (hx::IsNotNull( behavior )) {
HXLINE( 177)			bool _hx_tmp;
HXDLIN( 177)			if (!(restart)) {
HXLINE( 177)				_hx_tmp = hx::IsNotEq( behavior,this->currentBehavior );
            			}
            			else {
HXLINE( 177)				_hx_tmp = true;
            			}
HXDLIN( 177)			if (_hx_tmp) {
HXLINE( 179)				this->currentBehavior = behavior;
HXLINE( 180)				this->timeElapsed = (int)0;
HXLINE( 181)				this->behaviorComplete = false;
HXLINE( 183)				this->loopTime = ::Std_obj::_hx_int((((Float)behavior->frames->length / (Float)behavior->frameRate) * (int)1000));
HXLINE( 185)				if (hx::IsNull( this->bitmap->bitmapData )) {
HXLINE( 187)					this->update((int)0);
            				}
            			}
            		}
            		else {
HXLINE( 195)			this->bitmap->set_bitmapData(null());
HXLINE( 196)			this->currentBehavior = null();
HXLINE( 197)			this->currentFrameIndex = (int)-1;
HXLINE( 198)			this->behaviorComplete = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimatedSprite_obj,updateBehavior,(void))


hx::ObjectPtr< AnimatedSprite_obj > AnimatedSprite_obj::__new( ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing) {
	hx::ObjectPtr< AnimatedSprite_obj > __this = new AnimatedSprite_obj();
	__this->__construct(sheet,__o_smoothing);
	return __this;
}

hx::ObjectPtr< AnimatedSprite_obj > AnimatedSprite_obj::__alloc(hx::Ctx *_hx_ctx, ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing) {
	AnimatedSprite_obj *__this = (AnimatedSprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AnimatedSprite_obj), true, "spritesheet.AnimatedSprite"));
	*(void **)__this = AnimatedSprite_obj::_hx_vtable;
	__this->__construct(sheet,__o_smoothing);
	return __this;
}

AnimatedSprite_obj::AnimatedSprite_obj()
{
}

void AnimatedSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimatedSprite);
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(currentBehavior,"currentBehavior");
	HX_MARK_MEMBER_NAME(currentFrameIndex,"currentFrameIndex");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(spritesheet,"spritesheet");
	HX_MARK_MEMBER_NAME(behaviorComplete,"behaviorComplete");
	HX_MARK_MEMBER_NAME(behaviorQueue,"behaviorQueue");
	HX_MARK_MEMBER_NAME(behavior,"behavior");
	HX_MARK_MEMBER_NAME(loopTime,"loopTime");
	HX_MARK_MEMBER_NAME(timeElapsed,"timeElapsed");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AnimatedSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(currentBehavior,"currentBehavior");
	HX_VISIT_MEMBER_NAME(currentFrameIndex,"currentFrameIndex");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(spritesheet,"spritesheet");
	HX_VISIT_MEMBER_NAME(behaviorComplete,"behaviorComplete");
	HX_VISIT_MEMBER_NAME(behaviorQueue,"behaviorQueue");
	HX_VISIT_MEMBER_NAME(behavior,"behavior");
	HX_VISIT_MEMBER_NAME(loopTime,"loopTime");
	HX_VISIT_MEMBER_NAME(timeElapsed,"timeElapsed");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AnimatedSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { return hx::Val( behavior); }
		if (HX_FIELD_EQ(inName,"loopTime") ) { return hx::Val( loopTime); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spritesheet") ) { return hx::Val( spritesheet); }
		if (HX_FIELD_EQ(inName,"timeElapsed") ) { return hx::Val( timeElapsed); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFrameData") ) { return hx::Val( getFrameData_dyn()); }
		if (HX_FIELD_EQ(inName,"showBehavior") ) { return hx::Val( showBehavior_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"behaviorQueue") ) { return hx::Val( behaviorQueue); }
		if (HX_FIELD_EQ(inName,"queueBehavior") ) { return hx::Val( queueBehavior_dyn()); }
		if (HX_FIELD_EQ(inName,"showBehaviors") ) { return hx::Val( showBehaviors_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateBehavior") ) { return hx::Val( updateBehavior_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentBehavior") ) { return hx::Val( currentBehavior); }
		if (HX_FIELD_EQ(inName,"resolveBehavior") ) { return hx::Val( resolveBehavior_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"behaviorComplete") ) { return hx::Val( behaviorComplete); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameIndex") ) { return hx::Val( currentFrameIndex); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AnimatedSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { behavior=inValue.Cast<  ::spritesheet::data::BehaviorData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loopTime") ) { loopTime=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spritesheet") ) { spritesheet=inValue.Cast<  ::spritesheet::Spritesheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeElapsed") ) { timeElapsed=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"behaviorQueue") ) { behaviorQueue=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentBehavior") ) { currentBehavior=inValue.Cast<  ::spritesheet::data::BehaviorData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"behaviorComplete") ) { behaviorComplete=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameIndex") ) { currentFrameIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimatedSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("currentBehavior","\xeb","\x49","\xe4","\xde"));
	outFields->push(HX_HCSTRING("currentFrameIndex","\x3e","\x51","\x70","\x78"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("spritesheet","\x7a","\x54","\x95","\x1f"));
	outFields->push(HX_HCSTRING("behaviorComplete","\x6b","\x2f","\xca","\x5e"));
	outFields->push(HX_HCSTRING("behaviorQueue","\x9f","\x1b","\x56","\x19"));
	outFields->push(HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a"));
	outFields->push(HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f"));
	outFields->push(HX_HCSTRING("timeElapsed","\xaf","\x3f","\x16","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AnimatedSprite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(AnimatedSprite_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::spritesheet::data::BehaviorData*/ ,(int)offsetof(AnimatedSprite_obj,currentBehavior),HX_HCSTRING("currentBehavior","\xeb","\x49","\xe4","\xde")},
	{hx::fsInt,(int)offsetof(AnimatedSprite_obj,currentFrameIndex),HX_HCSTRING("currentFrameIndex","\x3e","\x51","\x70","\x78")},
	{hx::fsBool,(int)offsetof(AnimatedSprite_obj,smoothing),HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95")},
	{hx::fsObject /*::spritesheet::Spritesheet*/ ,(int)offsetof(AnimatedSprite_obj,spritesheet),HX_HCSTRING("spritesheet","\x7a","\x54","\x95","\x1f")},
	{hx::fsBool,(int)offsetof(AnimatedSprite_obj,behaviorComplete),HX_HCSTRING("behaviorComplete","\x6b","\x2f","\xca","\x5e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AnimatedSprite_obj,behaviorQueue),HX_HCSTRING("behaviorQueue","\x9f","\x1b","\x56","\x19")},
	{hx::fsObject /*::spritesheet::data::BehaviorData*/ ,(int)offsetof(AnimatedSprite_obj,behavior),HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a")},
	{hx::fsInt,(int)offsetof(AnimatedSprite_obj,loopTime),HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f")},
	{hx::fsInt,(int)offsetof(AnimatedSprite_obj,timeElapsed),HX_HCSTRING("timeElapsed","\xaf","\x3f","\x16","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AnimatedSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimatedSprite_obj_sMemberFields[] = {
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("currentBehavior","\xeb","\x49","\xe4","\xde"),
	HX_HCSTRING("currentFrameIndex","\x3e","\x51","\x70","\x78"),
	HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"),
	HX_HCSTRING("spritesheet","\x7a","\x54","\x95","\x1f"),
	HX_HCSTRING("behaviorComplete","\x6b","\x2f","\xca","\x5e"),
	HX_HCSTRING("behaviorQueue","\x9f","\x1b","\x56","\x19"),
	HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a"),
	HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f"),
	HX_HCSTRING("timeElapsed","\xaf","\x3f","\x16","\x2d"),
	HX_HCSTRING("getFrameData","\x81","\xb1","\x3a","\x3f"),
	HX_HCSTRING("queueBehavior","\x43","\x53","\xc0","\xad"),
	HX_HCSTRING("resolveBehavior","\x9e","\x2b","\x93","\x1b"),
	HX_HCSTRING("showBehavior","\xaf","\xe6","\x1f","\x36"),
	HX_HCSTRING("showBehaviors","\xe4","\xf2","\xc9","\x25"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateBehavior","\xbb","\x83","\xbc","\x3f"),
	::String(null()) };

static void AnimatedSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnimatedSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnimatedSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnimatedSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class AnimatedSprite_obj::__mClass;

void AnimatedSprite_obj::__register()
{
	hx::Object *dummy = new AnimatedSprite_obj;
	AnimatedSprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("spritesheet.AnimatedSprite","\x9c","\xec","\xb1","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AnimatedSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AnimatedSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AnimatedSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnimatedSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimatedSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimatedSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace spritesheet
