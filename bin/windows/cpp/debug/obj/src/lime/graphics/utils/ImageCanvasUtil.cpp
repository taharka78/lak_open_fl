// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageCanvasUtil
#include <lime/graphics/utils/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_25_colorTransform,"lime.graphics.utils.ImageCanvasUtil","colorTransform",0x478efac9,"lime.graphics.utils.ImageCanvasUtil.colorTransform","lime/graphics/utils/ImageCanvasUtil.hx",25,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_34_convertToCanvas,"lime.graphics.utils.ImageCanvasUtil","convertToCanvas",0x7fd81686,"lime.graphics.utils.ImageCanvasUtil.convertToCanvas","lime/graphics/utils/ImageCanvasUtil.hx",34,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_90_convertToData,"lime.graphics.utils.ImageCanvasUtil","convertToData",0x2b8bb058,"lime.graphics.utils.ImageCanvasUtil.convertToData","lime/graphics/utils/ImageCanvasUtil.hx",90,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_136_copyChannel,"lime.graphics.utils.ImageCanvasUtil","copyChannel",0xbd2cd24e,"lime.graphics.utils.ImageCanvasUtil.copyChannel","lime/graphics/utils/ImageCanvasUtil.hx",136,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_146_copyPixels,"lime.graphics.utils.ImageCanvasUtil","copyPixels",0xbf1ad802,"lime.graphics.utils.ImageCanvasUtil.copyPixels","lime/graphics/utils/ImageCanvasUtil.hx",146,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_192_createCanvas,"lime.graphics.utils.ImageCanvasUtil","createCanvas",0x3ddb6834,"lime.graphics.utils.ImageCanvasUtil.createCanvas","lime/graphics/utils/ImageCanvasUtil.hx",192,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_225_createImageData,"lime.graphics.utils.ImageCanvasUtil","createImageData",0x307c5949,"lime.graphics.utils.ImageCanvasUtil.createImageData","lime/graphics/utils/ImageCanvasUtil.hx",225,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_253_fillRect,"lime.graphics.utils.ImageCanvasUtil","fillRect",0x8e427887,"lime.graphics.utils.ImageCanvasUtil.fillRect","lime/graphics/utils/ImageCanvasUtil.hx",253,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_305_floodFill,"lime.graphics.utils.ImageCanvasUtil","floodFill",0x900e2821,"lime.graphics.utils.ImageCanvasUtil.floodFill","lime/graphics/utils/ImageCanvasUtil.hx",305,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_314_getPixel,"lime.graphics.utils.ImageCanvasUtil","getPixel",0x44040950,"lime.graphics.utils.ImageCanvasUtil.getPixel","lime/graphics/utils/ImageCanvasUtil.hx",314,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_323_getPixel32,"lime.graphics.utils.ImageCanvasUtil","getPixel32",0x541529ef,"lime.graphics.utils.ImageCanvasUtil.getPixel32","lime/graphics/utils/ImageCanvasUtil.hx",323,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_332_getPixels,"lime.graphics.utils.ImageCanvasUtil","getPixels",0x3f841d23,"lime.graphics.utils.ImageCanvasUtil.getPixels","lime/graphics/utils/ImageCanvasUtil.hx",332,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_341_merge,"lime.graphics.utils.ImageCanvasUtil","merge",0x36e8e778,"lime.graphics.utils.ImageCanvasUtil.merge","lime/graphics/utils/ImageCanvasUtil.hx",341,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_351_resize,"lime.graphics.utils.ImageCanvasUtil","resize",0xd5553d34,"lime.graphics.utils.ImageCanvasUtil.resize","lime/graphics/utils/ImageCanvasUtil.hx",351,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_379_scroll,"lime.graphics.utils.ImageCanvasUtil","scroll",0x143ebb4d,"lime.graphics.utils.ImageCanvasUtil.scroll","lime/graphics/utils/ImageCanvasUtil.hx",379,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_396_setPixel,"lime.graphics.utils.ImageCanvasUtil","setPixel",0xf26162c4,"lime.graphics.utils.ImageCanvasUtil.setPixel","lime/graphics/utils/ImageCanvasUtil.hx",396,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_405_setPixel32,"lime.graphics.utils.ImageCanvasUtil","setPixel32",0x5792c863,"lime.graphics.utils.ImageCanvasUtil.setPixel32","lime/graphics/utils/ImageCanvasUtil.hx",405,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_414_setPixels,"lime.graphics.utils.ImageCanvasUtil","setPixels",0x22d5092f,"lime.graphics.utils.ImageCanvasUtil.setPixels","lime/graphics/utils/ImageCanvasUtil.hx",414,0x78efca71)
HX_LOCAL_STACK_FRAME(_hx_pos_b4a5736184612a6f_425_sync,"lime.graphics.utils.ImageCanvasUtil","sync",0x85fe4d9b,"lime.graphics.utils.ImageCanvasUtil.sync","lime/graphics/utils/ImageCanvasUtil.hx",425,0x78efca71)
namespace lime{
namespace graphics{
namespace utils{

void ImageCanvasUtil_obj::__construct() { }

Dynamic ImageCanvasUtil_obj::__CreateEmpty() { return new ImageCanvasUtil_obj; }

void *ImageCanvasUtil_obj::_hx_vtable = 0;

Dynamic ImageCanvasUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageCanvasUtil_obj > _hx_result = new ImageCanvasUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageCanvasUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54aa3c6c;
}

void ImageCanvasUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_25_colorTransform)
HXLINE(  27)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE(  29)		::lime::graphics::utils::ImageDataUtil_obj::colorTransform(image,rect,colorMatrix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,colorTransform,(void))

void ImageCanvasUtil_obj::convertToCanvas( ::lime::graphics::Image image,hx::Null< bool >  __o_clear){
bool clear = __o_clear.Default(false);
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_34_convertToCanvas)
HXLINE(  36)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(  85)		image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageCanvasUtil_obj,convertToCanvas,(void))

void ImageCanvasUtil_obj::convertToData( ::lime::graphics::Image image,hx::Null< bool >  __o_clear){
bool clear = __o_clear.Default(false);
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_90_convertToData)
HXLINE(  92)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 131)		image->type = ::lime::graphics::ImageType_obj::DATA_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageCanvasUtil_obj,convertToData,(void))

void ImageCanvasUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_136_copyChannel)
HXLINE( 138)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(sourceImage,null());
HXLINE( 139)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 141)		::lime::graphics::utils::ImageDataUtil_obj::copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageCanvasUtil_obj,copyChannel,(void))

void ImageCanvasUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_b4a5736184612a6f_146_copyPixels)
HXLINE( 148)		bool _hx_tmp;
HXDLIN( 148)		bool _hx_tmp1;
HXDLIN( 148)		bool _hx_tmp2;
HXDLIN( 148)		bool _hx_tmp3;
HXDLIN( 148)		bool _hx_tmp4;
HXDLIN( 148)		if (hx::IsNotNull( destPoint )) {
HXLINE( 148)			_hx_tmp4 = (destPoint->x >= image->width);
            		}
            		else {
HXLINE( 148)			_hx_tmp4 = true;
            		}
HXDLIN( 148)		if (!(_hx_tmp4)) {
HXLINE( 148)			_hx_tmp3 = (destPoint->y >= image->height);
            		}
            		else {
HXLINE( 148)			_hx_tmp3 = true;
            		}
HXDLIN( 148)		if (!(_hx_tmp3)) {
HXLINE( 148)			_hx_tmp2 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 148)			_hx_tmp2 = true;
            		}
HXDLIN( 148)		if (!(_hx_tmp2)) {
HXLINE( 148)			_hx_tmp1 = (sourceRect->width < (int)1);
            		}
            		else {
HXLINE( 148)			_hx_tmp1 = true;
            		}
HXDLIN( 148)		if (!(_hx_tmp1)) {
HXLINE( 148)			_hx_tmp = (sourceRect->height < (int)1);
            		}
            		else {
HXLINE( 148)			_hx_tmp = true;
            		}
HXDLIN( 148)		if (_hx_tmp) {
HXLINE( 150)			return;
            		}
HXLINE( 154)		bool _hx_tmp5;
HXDLIN( 154)		if (hx::IsNotNull( alphaImage )) {
HXLINE( 154)			_hx_tmp5 = alphaImage->get_transparent();
            		}
            		else {
HXLINE( 154)			_hx_tmp5 = false;
            		}
HXDLIN( 154)		if (_hx_tmp5) {
HXLINE( 156)			if (hx::IsNull( alphaPoint )) {
HXLINE( 156)				alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            			}
HXLINE( 160)			 ::lime::graphics::Image tempData = image->clone();
HXLINE( 161)			 ::lime::math::Rectangle _hx_tmp6 =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,sourceRect->width,sourceRect->height);
HXDLIN( 161)			tempData->copyChannel(alphaImage,_hx_tmp6, ::lime::math::Vector2_obj::__alloc( HX_CTX ,sourceRect->x,sourceRect->y),::lime::graphics::ImageChannel_obj::ALPHA_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE( 162)			sourceImage = tempData;
            		}
HXLINE( 166)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image,true);
HXLINE( 168)		if (!(mergeAlpha)) {
HXLINE( 170)			bool _hx_tmp7;
HXDLIN( 170)			if (image->get_transparent()) {
HXLINE( 170)				_hx_tmp7 = sourceImage->get_transparent();
            			}
            			else {
HXLINE( 170)				_hx_tmp7 = false;
            			}
HXDLIN( 170)			if (_hx_tmp7) {
HXLINE( 172)				 ::Dynamic image1 =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic));
HXDLIN( 172)				Float _hx_tmp8 = (destPoint->x + image->offsetX);
HXDLIN( 172)				Float _hx_tmp9 = (destPoint->y + image->offsetY);
HXDLIN( 172)				Float _hx_tmp10 = (sourceRect->width + image->offsetX);
HXDLIN( 172)				image1(_hx_tmp8,_hx_tmp9,_hx_tmp10,(sourceRect->height + image->offsetY));
            			}
            		}
HXLINE( 178)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(sourceImage,null());
HXLINE( 180)		if (hx::IsNotNull( sourceImage->buffer->get_src() )) {
HXLINE( 182)			 ::Dynamic image2 =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic));
HXDLIN( 182)			 ::Dynamic _hx_tmp11 = sourceImage->buffer->get_src();
HXDLIN( 182)			int _hx_tmp12 = ::Std_obj::_hx_int((sourceRect->x + sourceImage->offsetX));
HXDLIN( 182)			int _hx_tmp13 = ::Std_obj::_hx_int((sourceRect->y + sourceImage->offsetY));
HXDLIN( 182)			int _hx_tmp14 = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN( 182)			int _hx_tmp15 = ::Std_obj::_hx_int(sourceRect->height);
HXDLIN( 182)			int _hx_tmp16 = ::Std_obj::_hx_int((destPoint->x + image->offsetX));
HXDLIN( 182)			int _hx_tmp17 = ::Std_obj::_hx_int((destPoint->y + image->offsetY));
HXDLIN( 182)			int _hx_tmp18 = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN( 182)			image2(_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18,::Std_obj::_hx_int(sourceRect->height));
            		}
HXLINE( 186)		image->dirty = true;
HXLINE( 187)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageCanvasUtil_obj,copyPixels,(void))

void ImageCanvasUtil_obj::createCanvas( ::lime::graphics::Image image,int width,int height){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_192_createCanvas)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,createCanvas,(void))

void ImageCanvasUtil_obj::createImageData( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_225_createImageData)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCanvasUtil_obj,createImageData,(void))

void ImageCanvasUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_253_fillRect)
HXLINE( 255)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image,null());
HXLINE( 257)		int r;
HXDLIN( 257)		int g;
HXDLIN( 257)		int b;
HXDLIN( 257)		int a;
HXLINE( 259)		if ((format == (int)1)) {
HXLINE( 261)			r = ((int)((int)color >> (int)(int)16) & (int)(int)255);
HXLINE( 262)			g = ((int)((int)color >> (int)(int)8) & (int)(int)255);
HXLINE( 263)			b = ((int)color & (int)(int)255);
HXLINE( 264)			if (image->get_transparent()) {
HXLINE( 264)				a = ((int)((int)color >> (int)(int)24) & (int)(int)255);
            			}
            			else {
HXLINE( 264)				a = (int)255;
            			}
            		}
            		else {
HXLINE( 268)			r = ((int)((int)color >> (int)(int)24) & (int)(int)255);
HXLINE( 269)			g = ((int)((int)color >> (int)(int)16) & (int)(int)255);
HXLINE( 270)			b = ((int)((int)color >> (int)(int)8) & (int)(int)255);
HXLINE( 271)			if (image->get_transparent()) {
HXLINE( 271)				a = ((int)color & (int)(int)255);
            			}
            			else {
HXLINE( 271)				a = (int)255;
            			}
            		}
HXLINE( 275)		bool _hx_tmp;
HXDLIN( 275)		bool _hx_tmp1;
HXDLIN( 275)		bool _hx_tmp2;
HXDLIN( 275)		if ((rect->x == (int)0)) {
HXLINE( 275)			_hx_tmp2 = (rect->y == (int)0);
            		}
            		else {
HXLINE( 275)			_hx_tmp2 = false;
            		}
HXDLIN( 275)		if (_hx_tmp2) {
HXLINE( 275)			_hx_tmp1 = (rect->width == image->width);
            		}
            		else {
HXLINE( 275)			_hx_tmp1 = false;
            		}
HXDLIN( 275)		if (_hx_tmp1) {
HXLINE( 275)			_hx_tmp = (rect->height == image->height);
            		}
            		else {
HXLINE( 275)			_hx_tmp = false;
            		}
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 277)			bool _hx_tmp3;
HXDLIN( 277)			if (image->get_transparent()) {
HXLINE( 277)				_hx_tmp3 = (a == (int)0);
            			}
            			else {
HXLINE( 277)				_hx_tmp3 = false;
            			}
HXDLIN( 277)			if (_hx_tmp3) {
HXLINE( 279)				image->buffer->_hx___srcCanvas->__SetField(HX_("width",06,b6,62,ca),image->buffer->width,hx::paccDynamic);
HXLINE( 280)				return;
            			}
            		}
HXLINE( 286)		if ((a < (int)255)) {
HXLINE( 288)			 ::Dynamic image1 =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic));
HXDLIN( 288)			Float _hx_tmp4 = (rect->x + image->offsetX);
HXDLIN( 288)			Float _hx_tmp5 = (rect->y + image->offsetY);
HXDLIN( 288)			Float _hx_tmp6 = (rect->width + image->offsetX);
HXDLIN( 288)			image1(_hx_tmp4,_hx_tmp5,_hx_tmp6,(rect->height + image->offsetY));
            		}
HXLINE( 292)		if ((a > (int)0)) {
HXLINE( 294)			image->buffer->_hx___srcContext->__SetField(HX_("fillStyle",ae,cb,c4,52),((((((((HX_("rgba(",f4,cc,0d,e8) + r) + HX_(", ",74,26,00,00)) + g) + HX_(", ",74,26,00,00)) + b) + HX_(", ",74,26,00,00)) + ((Float)a / (Float)(int)255)) + HX_(")",29,00,00,00)),hx::paccDynamic);
HXLINE( 295)			 ::Dynamic image2 =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic));
HXDLIN( 295)			Float _hx_tmp7 = (rect->x + image->offsetX);
HXDLIN( 295)			Float _hx_tmp8 = (rect->y + image->offsetY);
HXDLIN( 295)			Float _hx_tmp9 = (rect->width + image->offsetX);
HXDLIN( 295)			image2(_hx_tmp7,_hx_tmp8,_hx_tmp9,(rect->height + image->offsetY));
            		}
HXLINE( 299)		image->dirty = true;
HXLINE( 300)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,fillRect,(void))

void ImageCanvasUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_305_floodFill)
HXLINE( 307)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 309)		::lime::graphics::utils::ImageDataUtil_obj::floodFill(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,floodFill,(void))

int ImageCanvasUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_314_getPixel)
HXLINE( 316)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 318)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixel(image,x,y,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,getPixel,return )

int ImageCanvasUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_323_getPixel32)
HXLINE( 325)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 327)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixel32(image,x,y,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageCanvasUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_332_getPixels)
HXLINE( 334)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 336)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixels(image,rect,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,getPixels,return )

void ImageCanvasUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_341_merge)
HXLINE( 343)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(sourceImage,null());
HXLINE( 344)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 346)		::lime::graphics::utils::ImageDataUtil_obj::merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageCanvasUtil_obj,merge,(void))

void ImageCanvasUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_351_resize)
HXLINE( 353)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 355)		if (hx::IsNull( buffer->_hx___srcCanvas )) {
HXLINE( 357)			::lime::graphics::utils::ImageCanvasUtil_obj::createCanvas(image,newWidth,newHeight);
HXLINE( 358)			 ::Dynamic buffer1 =  ::Dynamic(buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic));
HXDLIN( 358)			buffer1(buffer->get_src(),(int)0,(int)0,newWidth,newHeight);
            		}
            		else {
HXLINE( 362)			::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image,true);
HXLINE( 363)			 ::Dynamic sourceCanvas = buffer->_hx___srcCanvas;
HXLINE( 364)			buffer->_hx___srcCanvas = null();
HXLINE( 365)			::lime::graphics::utils::ImageCanvasUtil_obj::createCanvas(image,newWidth,newHeight);
HXLINE( 366)			buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic)(sourceCanvas,(int)0,(int)0,newWidth,newHeight);
            		}
HXLINE( 370)		buffer->_hx___srcImageData = null();
HXLINE( 371)		buffer->data = null();
HXLINE( 373)		image->dirty = true;
HXLINE( 374)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,resize,(void))

void ImageCanvasUtil_obj::scroll( ::lime::graphics::Image image,int x,int y){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_379_scroll)
HXLINE( 381)		bool _hx_tmp;
HXDLIN( 381)		if ((hx::Mod(x,image->width) == (int)0)) {
HXLINE( 381)			_hx_tmp = (hx::Mod(y,image->height) == (int)0);
            		}
            		else {
HXLINE( 381)			_hx_tmp = false;
            		}
HXDLIN( 381)		if (_hx_tmp) {
HXLINE( 381)			return;
            		}
HXLINE( 383)		 ::lime::graphics::Image copy = image->clone();
HXLINE( 385)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image,true);
HXLINE( 387)		image->buffer->_hx___srcContext->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic)(x,y,image->width,image->height);
HXLINE( 388)		 ::Dynamic image1 =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic));
HXDLIN( 388)		image1(copy->get_src(),x,y);
HXLINE( 390)		image->dirty = true;
HXLINE( 391)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,scroll,(void))

void ImageCanvasUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_396_setPixel)
HXLINE( 398)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 400)		::lime::graphics::utils::ImageDataUtil_obj::setPixel(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,setPixel,(void))

void ImageCanvasUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_405_setPixel32)
HXLINE( 407)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 409)		::lime::graphics::utils::ImageDataUtil_obj::setPixel32(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,setPixel32,(void))

void ImageCanvasUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_414_setPixels)
HXLINE( 416)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(image,null());
HXLINE( 418)		::lime::graphics::utils::ImageDataUtil_obj::setPixels(image,rect,bytePointer,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,setPixels,(void))

void ImageCanvasUtil_obj::sync( ::lime::graphics::Image image,bool clear){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_425_sync)
HXLINE( 425)		if (hx::IsNull( image )) {
HXLINE( 425)			return;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageCanvasUtil_obj,sync,(void))


ImageCanvasUtil_obj::ImageCanvasUtil_obj()
{
}

bool ImageCanvasUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { outValue = sync_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scroll") ) { outValue = scroll_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createCanvas") ) { outValue = createCanvas_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToData") ) { outValue = convertToData_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convertToCanvas") ) { outValue = convertToCanvas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createImageData") ) { outValue = createImageData_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageCanvasUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageCanvasUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageCanvasUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageCanvasUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageCanvasUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageCanvasUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageCanvasUtil_obj::__mClass;

static ::String ImageCanvasUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("convertToCanvas","\xc6","\x61","\xe8","\x14"),
	HX_HCSTRING("convertToData","\x98","\xab","\x76","\xb3"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("createCanvas","\xf4","\x94","\x97","\xda"),
	HX_HCSTRING("createImageData","\x89","\xa4","\x8c","\xc5"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("sync","\x5b","\xba","\x5f","\x4c"),
	::String(null())
};

void ImageCanvasUtil_obj::__register()
{
	hx::Object *dummy = new ImageCanvasUtil_obj;
	ImageCanvasUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageCanvasUtil","\x2e","\x95","\x3e","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageCanvasUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageCanvasUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageCanvasUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageCanvasUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageCanvasUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageCanvasUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageCanvasUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
