// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9de1e3bb9bd9260d_114___init__,"::lime::utils::Log_obj","__init__",0xc6d9689e,"::lime::utils::Log_obj.__init__","lime/utils/Log.hx",114,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_21_debug,"lime.utils.Log","debug",0x08fb4af3,"lime.utils.Log.debug","lime/utils/Log.hx",21,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_32_error,"lime.utils.Log","error",0xa505c468,"lime.utils.Log.error","lime/utils/Log.hx",32,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_53_info,"lime.utils.Log","info",0xefdb33ce,"lime.utils.Log.info","lime/utils/Log.hx",53,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_65_print,"lime.utils.Log","print",0xfa6750cd,"lime.utils.Log.print","lime/utils/Log.hx",65,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_80_println,"lime.utils.Log","println",0xdf773c8f,"lime.utils.Log.println","lime/utils/Log.hx",80,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_94_verbose,"lime.utils.Log","verbose",0xccfd3822,"lime.utils.Log.verbose","lime/utils/Log.hx",94,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_105_warn,"lime.utils.Log","warn",0xf9125da6,"lime.utils.Log.warn","lime/utils/Log.hx",105,0x300eb2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_16_boot,"lime.utils.Log","boot",0xeb3b7f92,"lime.utils.Log.boot","lime/utils/Log.hx",16,0x300eb2b2)
namespace lime{
namespace utils{

void Log_obj::__construct() { }

Dynamic Log_obj::__CreateEmpty() { return new Log_obj; }

void *Log_obj::_hx_vtable = 0;

Dynamic Log_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Log_obj > _hx_result = new Log_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Log_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18c4f454;
}

void Log_obj::__init__(){
            	HX_STACKFRAME(&_hx_pos_9de1e3bb9bd9260d_114___init__)
HXLINE( 122)		::Array< ::String > args = ::Sys_obj::args();
HXLINE( 123)		bool _hx_tmp;
HXDLIN( 123)		if (!((args->indexOf(HX_("-v",a9,27,00,00),null()) > (int)-1))) {
HXLINE( 123)			_hx_tmp = (args->indexOf(HX_("-verbose",f5,e6,97,7f),null()) > (int)-1);
            		}
            		else {
HXLINE( 123)			_hx_tmp = true;
            		}
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 124)			::lime::utils::Log_obj::level = (int)5;
            		}
            		else {
HXLINE( 129)			::lime::utils::Log_obj::level = (int)4;
            		}
HXLINE( 146)		::lime::utils::Log_obj::throwErrors = true;
            	}


int Log_obj::level;

bool Log_obj::throwErrors;

void Log_obj::debug(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_21_debug)
HXLINE(  21)		if ((::lime::utils::Log_obj::level >= (int)4)) {
HXLINE(  23)			::Sys_obj::println((((HX_("[",5b,00,00,00) + ( (::String)(info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("] ",23,51,00,00)) + message));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,debug,(void))

void Log_obj::error(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_32_error)
HXLINE(  32)		if ((::lime::utils::Log_obj::level >= (int)1)) {
HXLINE(  34)			::String message1 = (((HX_("[",5b,00,00,00) + ( (::String)(info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("] ERROR: ",8b,d9,df,31)) + message);
HXLINE(  36)			if (::lime::utils::Log_obj::throwErrors) {
HXLINE(  38)				HX_STACK_DO_THROW(message1);
            			}
            			else {
HXLINE(  42)				::Sys_obj::println(message1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,error,(void))

void Log_obj::info(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_53_info)
HXLINE(  53)		if ((::lime::utils::Log_obj::level >= (int)3)) {
HXLINE(  55)			::Sys_obj::println((((HX_("[",5b,00,00,00) + ( (::String)(info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("] ",23,51,00,00)) + message));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,info,(void))

void Log_obj::print(::String message){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_65_print)
HXLINE(  65)		::Sys_obj::print(message);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Log_obj,print,(void))

void Log_obj::println(::String message){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_80_println)
HXLINE(  80)		::Sys_obj::println(message);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Log_obj,println,(void))

void Log_obj::verbose(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_94_verbose)
HXLINE(  94)		if ((::lime::utils::Log_obj::level >= (int)5)) {
HXLINE(  96)			::Sys_obj::println((((HX_("[",5b,00,00,00) + ( (::String)(info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("] ",23,51,00,00)) + message));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,verbose,(void))

void Log_obj::warn(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_105_warn)
HXLINE( 105)		if ((::lime::utils::Log_obj::level >= (int)2)) {
HXLINE( 107)			::Sys_obj::println((((HX_("[",5b,00,00,00) + ( (::String)(info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("] WARNING: ",5f,da,b0,cd)) + message));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,warn,(void))


Log_obj::Log_obj()
{
}

bool Log_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { outValue = info_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warn") ) { outValue = warn_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { outValue = level; return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { outValue = debug_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"error") ) { outValue = error_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"println") ) { outValue = println_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"verbose") ) { outValue = verbose_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"throwErrors") ) { outValue = throwErrors; return true; }
	}
	return false;
}

bool Log_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { level=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"throwErrors") ) { throwErrors=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Log_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Log_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Log_obj::level,HX_HCSTRING("level","\x84","\x15","\x63","\x72")},
	{hx::fsBool,(void *) &Log_obj::throwErrors,HX_HCSTRING("throwErrors","\x71","\xb5","\xe0","\x19")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Log_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Log_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Log_obj::level,"level");
	HX_MARK_MEMBER_NAME(Log_obj::throwErrors,"throwErrors");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Log_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Log_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Log_obj::level,"level");
	HX_VISIT_MEMBER_NAME(Log_obj::throwErrors,"throwErrors");
};

#endif

hx::Class Log_obj::__mClass;

static ::String Log_obj_sStaticFields[] = {
	HX_HCSTRING("level","\x84","\x15","\x63","\x72"),
	HX_HCSTRING("throwErrors","\x71","\xb5","\xe0","\x19"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("println","\xef","\xdb","\x33","\x84"),
	HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	::String(null())
};

void Log_obj::__register()
{
	hx::Object *dummy = new Log_obj;
	Log_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.Log","\x0e","\x21","\x76","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Log_obj::__GetStatic;
	__mClass->mSetStaticField = &Log_obj::__SetStatic;
	__mClass->mMarkFunc = Log_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Log_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Log_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Log_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Log_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Log_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Log_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_16_boot)
HXLINE(  16)		throwErrors = true;
            	}
}

} // end namespace lime
} // end namespace utils
