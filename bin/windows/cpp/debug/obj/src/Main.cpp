// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_controllers_UnitController
#include <com/lak/controllers/UnitController.h>
#endif
#ifndef INCLUDED_com_lak_display_FPS_Mem
#include <com/lak/display/FPS_Mem.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Simulator
#include <com/lak/simulator/Simulator.h>
#endif
#ifndef INCLUDED_com_lak_simulator_gamestate_IGameState
#include <com/lak/simulator/gamestate/IGameState.h>
#endif
#ifndef INCLUDED_com_lak_simulator_gamestate_InitialState
#include <com/lak/simulator/gamestate/InitialState.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_EntitiesManager
#include <com/lak/simulator/manager/EntitiesManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_SpritesheetManager
#include <com/lak/simulator/manager/SpritesheetManager.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_32_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",32,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_53_onMainAdded,"Main","onMainAdded",0x57313913,"Main.onMainAdded","Main.hx",53,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_76_keyDownListener,"Main","keyDownListener",0xcbb1f920,"Main.keyDownListener","Main.hx",76,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_79_keyUpListener,"Main","keyUpListener",0x0dccc999,"Main.keyUpListener","Main.hx",79,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_83_onStageMouseDown,"Main","onStageMouseDown",0x8a35cfbd,"Main.onStageMouseDown","Main.hx",83,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_86_onStageMouseUp,"Main","onStageMouseUp",0x807020f6,"Main.onStageMouseUp","Main.hx",86,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_89_onStageMouseMove,"Main","onStageMouseMove",0x9028ba6c,"Main.onStageMouseMove","Main.hx",89,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_92_onStageClick,"Main","onStageClick",0x9acd17de,"Main.onStageClick","Main.hx",92,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_94_onstageResized,"Main","onstageResized",0x5b5e3ce6,"Main.onstageResized","Main.hx",94,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_98_update,"Main","update",0xb7afa57e,"Main.update","Main.hx",98,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_32_new)
HXLINE(  43)		this->initState =  ::com::lak::simulator::gamestate::InitialState_obj::__alloc( HX_CTX );
HXLINE(  36)		this->sprSheetManager =  ::com::lak::simulator::manager::SpritesheetManager_obj::__alloc( HX_CTX );
HXLINE(  34)		this->lastTime = (int)0;
HXLINE(  46)		super::__construct();
HXLINE(  47)		this->addChild( ::com::lak::display::FPS_Mem_obj::__alloc( HX_CTX ,null(),null(),null()));
HXLINE(  48)		this->state = this->initState;
HXLINE(  49)		::Main_obj::instance = hx::ObjectPtr<OBJ_>(this);
HXLINE(  50)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onMainAdded_dyn(),null(),null(),null());
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x332f6459) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x332f6459;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Main_obj::onMainAdded( ::openfl::events::Event e){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_53_onMainAdded)
HXLINE(  54)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onMainAdded_dyn(),null());
HXLINE(  56)		this->realWidth = this->stage->stageWidth;
HXLINE(  57)		this->realHeight = this->stage->stageHeight;
HXLINE(  59)		this->world =  ::com::lak::IsoWorld_obj::__alloc( HX_CTX );
HXLINE(  60)		this->addChild(this->world);
HXLINE(  62)		this->simulateur =  ::com::lak::simulator::Simulator_obj::__alloc( HX_CTX );
HXLINE(  63)		::com::lak::controllers::UnitController_obj::create(HX_("general",28,6b,5b,b6),(int)96,(int)96);
HXLINE(  64)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->update_dyn(),null(),null(),null());
HXLINE(  66)		this->stage->scaleMode = (int)2;
HXLINE(  67)		this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->onstageResized_dyn(),null(),null(),null());
HXLINE(  68)		this->stage->addEventListener(HX_("click",48,7c,5e,48),this->onStageClick_dyn(),null(),null(),null());
HXLINE(  69)		this->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onStageMouseDown_dyn(),null(),null(),null());
HXLINE(  70)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onStageMouseUp_dyn(),null(),null(),null());
HXLINE(  71)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onStageMouseMove_dyn(),null(),null(),null());
HXLINE(  72)		this->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->keyDownListener_dyn(),null(),null(),null());
HXLINE(  73)		this->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->keyUpListener_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onMainAdded,(void))

void Main_obj::keyDownListener( ::openfl::events::KeyboardEvent kevt){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_76_keyDownListener)
HXLINE(  76)		this->simulateur->aKeyPress[kevt->keyCode] = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,keyDownListener,(void))

void Main_obj::keyUpListener( ::openfl::events::KeyboardEvent kevt){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_79_keyUpListener)
HXLINE(  79)		this->simulateur->aKeyPress[kevt->keyCode] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,keyUpListener,(void))

void Main_obj::onStageMouseDown( ::openfl::events::MouseEvent me){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_83_onStageMouseDown)
HXLINE(  83)		::com::lak::simulator::gamestate::IGameState_obj::mousedown(this->state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onStageMouseDown,(void))

void Main_obj::onStageMouseUp( ::openfl::events::MouseEvent me){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_86_onStageMouseUp)
HXLINE(  86)		::com::lak::simulator::gamestate::IGameState_obj::mouseup(this->state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onStageMouseUp,(void))

void Main_obj::onStageMouseMove( ::openfl::events::MouseEvent me){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_89_onStageMouseMove)
HXLINE(  89)		::com::lak::simulator::gamestate::IGameState_obj::mousemove(this->state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onStageMouseMove,(void))

void Main_obj::onStageClick( ::openfl::events::MouseEvent me){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_92_onStageClick)
HXLINE(  92)		::com::lak::simulator::gamestate::IGameState_obj::mouseclick(this->state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onStageClick,(void))

void Main_obj::onstageResized( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_94_onstageResized)
HXLINE(  95)		this->world->worldSize(null());
HXLINE(  96)		this->simulateur->entitiesManager->updateViewBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onstageResized,(void))

void Main_obj::update( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_98_update)
HXLINE(  99)		int time = ::openfl::Lib_obj::getTimer();
HXLINE( 100)		int delta = (time - this->lastTime);
HXLINE( 101)		this->simulateur->run(delta);
HXLINE( 102)		this->lastTime = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,update,(void))

 ::Main Main_obj::instance;


hx::ObjectPtr< Main_obj > Main_obj::__new() {
	hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Main_obj > Main_obj::__alloc(hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(unit,"unit");
	HX_MARK_MEMBER_NAME(sprSheetManager,"sprSheetManager");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(realWidth,"realWidth");
	HX_MARK_MEMBER_NAME(realHeight,"realHeight");
	HX_MARK_MEMBER_NAME(simulateur,"simulateur");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(initState,"initState");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(unit,"unit");
	HX_VISIT_MEMBER_NAME(sprSheetManager,"sprSheetManager");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(realWidth,"realWidth");
	HX_VISIT_MEMBER_NAME(realHeight,"realHeight");
	HX_VISIT_MEMBER_NAME(simulateur,"simulateur");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(initState,"initState");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { return hx::Val( unit); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { return hx::Val( lastTime); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"realWidth") ) { return hx::Val( realWidth); }
		if (HX_FIELD_EQ(inName,"initState") ) { return hx::Val( initState); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"realHeight") ) { return hx::Val( realHeight); }
		if (HX_FIELD_EQ(inName,"simulateur") ) { return hx::Val( simulateur); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMainAdded") ) { return hx::Val( onMainAdded_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onStageClick") ) { return hx::Val( onStageClick_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"keyUpListener") ) { return hx::Val( keyUpListener_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onStageMouseUp") ) { return hx::Val( onStageMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"onstageResized") ) { return hx::Val( onstageResized_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sprSheetManager") ) { return hx::Val( sprSheetManager); }
		if (HX_FIELD_EQ(inName,"keyDownListener") ) { return hx::Val( keyDownListener_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onStageMouseDown") ) { return hx::Val( onStageMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onStageMouseMove") ) { return hx::Val( onStageMouseMove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val Main_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { unit=inValue.Cast<  ::com::lak::entities::IsoUnit >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::com::lak::IsoWorld >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"realWidth") ) { realWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initState") ) { initState=inValue.Cast<  ::com::lak::simulator::gamestate::InitialState >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"realHeight") ) { realHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"simulateur") ) { simulateur=inValue.Cast<  ::com::lak::simulator::Simulator >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sprSheetManager") ) { sprSheetManager=inValue.Cast<  ::com::lak::simulator::manager::SpritesheetManager >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::Main >(); return true; }
	}
	return false;
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"));
	outFields->push(HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"));
	outFields->push(HX_HCSTRING("sprSheetManager","\x63","\x66","\x8f","\xb6"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce"));
	outFields->push(HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48"));
	outFields->push(HX_HCSTRING("simulateur","\x01","\xcf","\xa4","\x97"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("initState","\xe1","\x90","\x9d","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Main_obj,lastTime),HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0")},
	{hx::fsObject /*::com::lak::entities::IsoUnit*/ ,(int)offsetof(Main_obj,unit),HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d")},
	{hx::fsObject /*::com::lak::simulator::manager::SpritesheetManager*/ ,(int)offsetof(Main_obj,sprSheetManager),HX_HCSTRING("sprSheetManager","\x63","\x66","\x8f","\xb6")},
	{hx::fsObject /*::com::lak::IsoWorld*/ ,(int)offsetof(Main_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsInt,(int)offsetof(Main_obj,realWidth),HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce")},
	{hx::fsInt,(int)offsetof(Main_obj,realHeight),HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48")},
	{hx::fsObject /*::com::lak::simulator::Simulator*/ ,(int)offsetof(Main_obj,simulateur),HX_HCSTRING("simulateur","\x01","\xcf","\xa4","\x97")},
	{hx::fsObject /*::com::lak::simulator::gamestate::IGameState*/ ,(int)offsetof(Main_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsObject /*::com::lak::simulator::gamestate::InitialState*/ ,(int)offsetof(Main_obj,initState),HX_HCSTRING("initState","\xe1","\x90","\x9d","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::Main*/ ,(void *) &Main_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"),
	HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"),
	HX_HCSTRING("sprSheetManager","\x63","\x66","\x8f","\xb6"),
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce"),
	HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48"),
	HX_HCSTRING("simulateur","\x01","\xcf","\xa4","\x97"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("initState","\xe1","\x90","\x9d","\x9f"),
	HX_HCSTRING("onMainAdded","\xa8","\x80","\x2a","\x58"),
	HX_HCSTRING("keyDownListener","\x35","\x2f","\x0f","\x7b"),
	HX_HCSTRING("keyUpListener","\x6e","\xe0","\x56","\x35"),
	HX_HCSTRING("onStageMouseDown","\x08","\xec","\x67","\x4c"),
	HX_HCSTRING("onStageMouseUp","\x81","\x04","\xba","\xf1"),
	HX_HCSTRING("onStageMouseMove","\xb7","\xd6","\x5a","\x52"),
	HX_HCSTRING("onStageClick","\xa9","\x72","\xf2","\x73"),
	HX_HCSTRING("onstageResized","\x71","\x20","\xa8","\xcc"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::instance,"instance");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

