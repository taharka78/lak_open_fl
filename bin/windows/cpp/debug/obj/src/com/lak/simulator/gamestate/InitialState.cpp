// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_controllers_GameStateController
#include <com/lak/controllers/GameStateController.h>
#endif
#ifndef INCLUDED_com_lak_display_SelectionSprite
#include <com/lak/display/SelectionSprite.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_renderers_Renderer
#include <com/lak/renderers/Renderer.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Simulator
#include <com/lak/simulator/Simulator.h>
#endif
#ifndef INCLUDED_com_lak_simulator_gamestate_IGameState
#include <com/lak/simulator/gamestate/IGameState.h>
#endif
#ifndef INCLUDED_com_lak_simulator_gamestate_InitialState
#include <com/lak/simulator/gamestate/InitialState.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_ArmyManager
#include <com/lak/simulator/manager/ArmyManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_LevelManager
#include <com/lak/simulator/manager/LevelManager.h>
#endif
#ifndef INCLUDED_com_lak_utils_IsoUtils
#include <com/lak/utils/IsoUtils.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_17_new,"com.lak.simulator.gamestate.InitialState","new",0xb2724afd,"com.lak.simulator.gamestate.InitialState.new","com/lak/simulator/gamestate/InitialState.hx",17,0xedb4d2cf)
HX_LOCAL_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_18_mouseover,"com.lak.simulator.gamestate.InitialState","mouseover",0xe313ec56,"com.lak.simulator.gamestate.InitialState.mouseover","com/lak/simulator/gamestate/InitialState.hx",18,0xedb4d2cf)
HX_LOCAL_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_21_mousemove,"com.lak.simulator.gamestate.InitialState","mousemove",0xe1bc3e13,"com.lak.simulator.gamestate.InitialState.mousemove","com/lak/simulator/gamestate/InitialState.hx",21,0xedb4d2cf)
HX_LOCAL_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_24_mousedown,"com.lak.simulator.gamestate.InitialState","mousedown",0xdbc95364,"com.lak.simulator.gamestate.InitialState.mousedown","com/lak/simulator/gamestate/InitialState.hx",24,0xedb4d2cf)
HX_LOCAL_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_31_mouseup,"com.lak.simulator.gamestate.InitialState","mouseup",0x223f9cdd,"com.lak.simulator.gamestate.InitialState.mouseup","com/lak/simulator/gamestate/InitialState.hx",31,0xedb4d2cf)
HX_LOCAL_STACK_FRAME(_hx_pos_4f58ae3a0bda3862_34_mouseclick,"com.lak.simulator.gamestate.InitialState","mouseclick",0xdef2c306,"com.lak.simulator.gamestate.InitialState.mouseclick","com/lak/simulator/gamestate/InitialState.hx",34,0xedb4d2cf)
namespace com{
namespace lak{
namespace simulator{
namespace gamestate{

void InitialState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_17_new)
            	}

Dynamic InitialState_obj::__CreateEmpty() { return new InitialState_obj; }

void *InitialState_obj::_hx_vtable = 0;

Dynamic InitialState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InitialState_obj > _hx_result = new InitialState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InitialState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5aa87c01;
}

static ::com::lak::simulator::gamestate::IGameState_obj _hx_com_lak_simulator_gamestate_InitialState__hx_com_lak_simulator_gamestate_IGameState= {
	( void (hx::Object::*)())&::com::lak::simulator::gamestate::InitialState_obj::mouseover,
	( void (hx::Object::*)())&::com::lak::simulator::gamestate::InitialState_obj::mousemove,
	( void (hx::Object::*)())&::com::lak::simulator::gamestate::InitialState_obj::mousedown,
	( void (hx::Object::*)())&::com::lak::simulator::gamestate::InitialState_obj::mouseup,
	( void (hx::Object::*)())&::com::lak::simulator::gamestate::InitialState_obj::mouseclick,
};

void *InitialState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xb6ba51c6: return &_hx_com_lak_simulator_gamestate_InitialState__hx_com_lak_simulator_gamestate_IGameState;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void InitialState_obj::mouseover(){
            	HX_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_18_mouseover)
            	}


HX_DEFINE_DYNAMIC_FUNC0(InitialState_obj,mouseover,(void))

void InitialState_obj::mousemove(){
            	HX_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_21_mousemove)
            	}


HX_DEFINE_DYNAMIC_FUNC0(InitialState_obj,mousemove,(void))

void InitialState_obj::mousedown(){
            	HX_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_24_mousedown)
HXLINE(  25)		::com::lak::controllers::GameStateController_obj::enableSelection();
HXLINE(  26)		 ::com::lak::IsoWorld _hx_tmp = ::com::lak::IsoWorld_obj::instance;
HXDLIN(  26)		 ::com::lak::display::SelectionSprite _hx_tmp1 = ::com::lak::renderers::Renderer_obj::instance->selectionSprt;
HXDLIN(  26)		_hx_tmp->setChildIndex(_hx_tmp1,(::com::lak::IsoWorld_obj::instance->get_numChildren() - (int)1));
HXLINE(  27)		::com::lak::renderers::Renderer_obj::instance->selectionSprt->selectionRect->x = ::com::lak::IsoWorld_obj::instance->get_mouseX();
HXLINE(  28)		::com::lak::renderers::Renderer_obj::instance->selectionSprt->selectionRect->y = ::com::lak::IsoWorld_obj::instance->get_mouseY();
            	}


HX_DEFINE_DYNAMIC_FUNC0(InitialState_obj,mousedown,(void))

void InitialState_obj::mouseup(){
            	HX_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_31_mouseup)
HXLINE(  31)		::com::lak::controllers::GameStateController_obj::disabledSelection();
            	}


HX_DEFINE_DYNAMIC_FUNC0(InitialState_obj,mouseup,(void))

void InitialState_obj::mouseclick(){
            	HX_GC_STACKFRAME(&_hx_pos_4f58ae3a0bda3862_34_mouseclick)
HXLINE(  34)		if ((::com::lak::simulator::Simulator_obj::instance->armyManager->selectedUnits->length > (int)0)) {
HXLINE(  35)			int _g = (int)0;
HXDLIN(  35)			::Array< ::Dynamic> _g1 = ::com::lak::simulator::Simulator_obj::instance->armyManager->selectedUnits;
HXDLIN(  35)			while((_g < _g1->length)){
HXLINE(  35)				 ::com::lak::entities::IsoUnit unit = _g1->__get(_g).StaticCast<  ::com::lak::entities::IsoUnit >();
HXDLIN(  35)				_g = (_g + (int)1);
HXLINE(  36)				Float _hx_tmp = ::com::lak::IsoWorld_obj::instance->get_mouseX();
HXDLIN(  36)				this->pt = ::com::lak::utils::IsoUtils_obj::getTileAt( ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,::com::lak::IsoWorld_obj::instance->get_mouseY()),null());
HXLINE(  37)				::haxe::Log_obj::trace(this->pt,hx::SourceInfo(HX_("InitialState.hx",d1,25,49,77),37,HX_("com.lak.simulator.gamestate.InitialState",8b,08,60,a6),HX_("mouseclick",03,00,fe,d2)));
HXLINE(  39)				 ::com::lak::simulator::manager::LevelManager _hx_tmp1 = ::com::lak::simulator::manager::LevelManager_obj::instance;
HXDLIN(  39)				int _hx_tmp2 = ::Std_obj::_hx_int(this->pt->x);
HXDLIN(  39)				this->n = _hx_tmp1->getNodeAt(_hx_tmp2,::Std_obj::_hx_int(this->pt->y));
HXLINE(  40)				this->n->__SetField(HX_("index",12,9b,14,be),(int)99,hx::paccDynamic);
HXLINE(  41)				this->n->__SetField(HX_("ndType",10,d2,35,c7),HX_("o",6f,00,00,00),hx::paccDynamic);
HXLINE(  42)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  42)				::String _hx_tmp4 = ((HX_("unitx = ",6f,74,a5,17) + unit->get_x()) + HX_(" unity = ",2e,cb,7b,76));
HXDLIN(  42)				::String _hx_tmp5 = (_hx_tmp4 + unit->get_y());
HXDLIN(  42)				_hx_tmp3(_hx_tmp5, ::Dynamic(hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("com.lak.simulator.gamestate.InitialState",8b,08,60,a6))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(this->n->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic))))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("mouseclick",03,00,fe,d2))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("InitialState.hx",d1,25,49,77))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)42)));
HXLINE(  43)				unit->goTo(( ( ::openfl::geom::Point)(this->n->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(InitialState_obj,mouseclick,(void))


hx::ObjectPtr< InitialState_obj > InitialState_obj::__new() {
	hx::ObjectPtr< InitialState_obj > __this = new InitialState_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< InitialState_obj > InitialState_obj::__alloc(hx::Ctx *_hx_ctx) {
	InitialState_obj *__this = (InitialState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InitialState_obj), true, "com.lak.simulator.gamestate.InitialState"));
	*(void **)__this = InitialState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

InitialState_obj::InitialState_obj()
{
}

void InitialState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InitialState);
	HX_MARK_MEMBER_NAME(pt,"pt");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_END_CLASS();
}

void InitialState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pt,"pt");
	HX_VISIT_MEMBER_NAME(n,"n");
}

hx::Val InitialState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { return hx::Val( pt); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mouseup") ) { return hx::Val( mouseup_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mouseover") ) { return hx::Val( mouseover_dyn()); }
		if (HX_FIELD_EQ(inName,"mousemove") ) { return hx::Val( mousemove_dyn()); }
		if (HX_FIELD_EQ(inName,"mousedown") ) { return hx::Val( mousedown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseclick") ) { return hx::Val( mouseclick_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InitialState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { pt=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InitialState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pt","\x04","\x62","\x00","\x00"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InitialState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(InitialState_obj,pt),HX_HCSTRING("pt","\x04","\x62","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(InitialState_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InitialState_obj_sStaticStorageInfo = 0;
#endif

static ::String InitialState_obj_sMemberFields[] = {
	HX_HCSTRING("pt","\x04","\x62","\x00","\x00"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("mouseover","\xf9","\x1d","\x34","\x0b"),
	HX_HCSTRING("mousemove","\xb6","\x6f","\xdc","\x09"),
	HX_HCSTRING("mousedown","\x07","\x85","\xe9","\x03"),
	HX_HCSTRING("mouseup","\xc0","\x0f","\x73","\xc0"),
	HX_HCSTRING("mouseclick","\x03","\x00","\xfe","\xd2"),
	::String(null()) };

static void InitialState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InitialState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InitialState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InitialState_obj::__mClass,"__mClass");
};

#endif

hx::Class InitialState_obj::__mClass;

void InitialState_obj::__register()
{
	hx::Object *dummy = new InitialState_obj;
	InitialState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.gamestate.InitialState","\x8b","\x08","\x60","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InitialState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InitialState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InitialState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InitialState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InitialState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InitialState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace gamestate
