// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_lak_display_FPS_Mem
#include <com/lak/display/FPS_Mem.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_034039eef731e983_13_new,"com.lak.display.FPS_Mem","new",0xdec67840,"com.lak.display.FPS_Mem.new","com/lak/display/FPS_Mem.hx",13,0x46419773)
HX_LOCAL_STACK_FRAME(_hx_pos_034039eef731e983_37_onEnter,"com.lak.display.FPS_Mem","onEnter",0xead82359,"com.lak.display.FPS_Mem.onEnter","com/lak/display/FPS_Mem.hx",37,0x46419773)
namespace com{
namespace lak{
namespace display{

void FPS_Mem_obj::__construct(hx::Null< Float >  __o_inX,hx::Null< Float >  __o_inY,hx::Null< int >  __o_inCol){
Float inX = __o_inX.Default(((Float)10.0));
Float inY = __o_inY.Default(((Float)10.0));
int inCol = __o_inCol.Default(16777215);
            	HX_GC_STACKFRAME(&_hx_pos_034039eef731e983_13_new)
HXLINE(  16)		this->memPeak = ((Float)0);
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->set_x(inX);
HXLINE(  23)		this->set_y(inY);
HXLINE(  24)		this->set_selectable(false);
HXLINE(  26)		this->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),(int)12,inCol,true,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  28)		this->set_text(HX_("FPS: ",af,da,2c,83));
HXLINE(  30)		this->times = ::Array_obj< Float >::__new(0);
HXLINE(  31)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnter_dyn(),null(),null(),null());
HXLINE(  32)		this->set_width((int)150);
HXLINE(  33)		this->set_height((int)70);
            	}

Dynamic FPS_Mem_obj::__CreateEmpty() { return new FPS_Mem_obj; }

void *FPS_Mem_obj::_hx_vtable = 0;

Dynamic FPS_Mem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FPS_Mem_obj > _hx_result = new FPS_Mem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FPS_Mem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			if (inClassId<=(int)0x08b6f7de) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x08b6f7de;
			} else {
				return inClassId==(int)0x19c29573;
			}
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void FPS_Mem_obj::onEnter( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_034039eef731e983_37_onEnter)
HXLINE(  38)		Float now = ((Float)::lime::_hx_system::System_obj::getTimer() / (Float)(int)1000);
HXLINE(  39)		this->times->push(now);
HXLINE(  41)		while(true){
HXLINE(  41)			Float _hx_tmp = this->times->__get((int)0);
HXDLIN(  41)			if (!((_hx_tmp < (now - (int)1)))) {
HXLINE(  41)				goto _hx_goto_1;
            			}
HXLINE(  42)			this->times->shift();
            		}
            		_hx_goto_1:;
HXLINE(  44)		Float mem = ((Float)::Math_obj::round((((Float)((Float)::openfl::_hx_system::System_obj::get_totalMemory() / (Float)(int)1024) / (Float)(int)1024) * (int)100)) / (Float)(int)100);
HXLINE(  45)		if ((mem > this->memPeak)) {
HXLINE(  45)			this->memPeak = mem;
            		}
HXLINE(  47)		if (this->get_visible()) {
HXLINE(  49)			this->set_text(((((((HX_("FPS: ",af,da,2c,83) + this->times->length) + HX_("\nMEM: ",91,9f,42,83)) + mem) + HX_(" MB\nMEM peak: ",85,3c,cd,94)) + this->memPeak) + HX_(" MB",75,8b,18,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FPS_Mem_obj,onEnter,(void))


hx::ObjectPtr< FPS_Mem_obj > FPS_Mem_obj::__new(hx::Null< Float >  __o_inX,hx::Null< Float >  __o_inY,hx::Null< int >  __o_inCol) {
	hx::ObjectPtr< FPS_Mem_obj > __this = new FPS_Mem_obj();
	__this->__construct(__o_inX,__o_inY,__o_inCol);
	return __this;
}

hx::ObjectPtr< FPS_Mem_obj > FPS_Mem_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_inX,hx::Null< Float >  __o_inY,hx::Null< int >  __o_inCol) {
	FPS_Mem_obj *__this = (FPS_Mem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FPS_Mem_obj), true, "com.lak.display.FPS_Mem"));
	*(void **)__this = FPS_Mem_obj::_hx_vtable;
	__this->__construct(__o_inX,__o_inY,__o_inCol);
	return __this;
}

FPS_Mem_obj::FPS_Mem_obj()
{
}

void FPS_Mem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FPS_Mem);
	HX_MARK_MEMBER_NAME(times,"times");
	HX_MARK_MEMBER_NAME(memPeak,"memPeak");
	 ::openfl::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FPS_Mem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(times,"times");
	HX_VISIT_MEMBER_NAME(memPeak,"memPeak");
	 ::openfl::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FPS_Mem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return hx::Val( times); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"memPeak") ) { return hx::Val( memPeak); }
		if (HX_FIELD_EQ(inName,"onEnter") ) { return hx::Val( onEnter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FPS_Mem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"memPeak") ) { memPeak=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FPS_Mem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("memPeak","\xd4","\x46","\x8a","\x0e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FPS_Mem_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FPS_Mem_obj,times),HX_HCSTRING("times","\xc6","\xbf","\x35","\x10")},
	{hx::fsFloat,(int)offsetof(FPS_Mem_obj,memPeak),HX_HCSTRING("memPeak","\xd4","\x46","\x8a","\x0e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FPS_Mem_obj_sStaticStorageInfo = 0;
#endif

static ::String FPS_Mem_obj_sMemberFields[] = {
	HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"),
	HX_HCSTRING("memPeak","\xd4","\x46","\x8a","\x0e"),
	HX_HCSTRING("onEnter","\x79","\x0b","\xc4","\x06"),
	::String(null()) };

static void FPS_Mem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FPS_Mem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FPS_Mem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FPS_Mem_obj::__mClass,"__mClass");
};

#endif

hx::Class FPS_Mem_obj::__mClass;

void FPS_Mem_obj::__register()
{
	hx::Object *dummy = new FPS_Mem_obj;
	FPS_Mem_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.display.FPS_Mem","\x4e","\x98","\x1d","\x1c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FPS_Mem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FPS_Mem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FPS_Mem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FPS_Mem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FPS_Mem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FPS_Mem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace display
