// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_utils_IsoUtils
#include <com/lak/utils/IsoUtils.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_26_slideMapTileWalker,"com.lak.utils.IsoUtils","slideMapTileWalker",0xd6dd07ef,"com.lak.utils.IsoUtils.slideMapTileWalker","com/lak/utils/IsoUtils.hx",26,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_81_mapTilePosition,"com.lak.utils.IsoUtils","mapTilePosition",0x21875413,"com.lak.utils.IsoUtils.mapTilePosition","com/lak/utils/IsoUtils.hx",81,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_91_getTileAt,"com.lak.utils.IsoUtils","getTileAt",0xd6be6a57,"com.lak.utils.IsoUtils.getTileAt","com/lak/utils/IsoUtils.hx",91,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_94_getPos,"com.lak.utils.IsoUtils","getPos",0x47a8453e,"com.lak.utils.IsoUtils.getPos","com/lak/utils/IsoUtils.hx",94,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_11_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",11,0x2c91e08d)
static const ::String _hx_array_data_ab7d1dce_5[] = {
	HX_("N",4e,00,00,00),HX_("NE",37,44,00,00),HX_("E",45,00,00,00),HX_("SE",92,48,00,00),HX_("S",53,00,00,00),HX_("SW",a4,48,00,00),HX_("W",57,00,00,00),HX_("NW",49,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_12_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",12,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_13_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",13,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_14_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",14,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_15_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",15,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_16_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",16,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_17_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",17,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_18_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",18,0x2c91e08d)
HX_LOCAL_STACK_FRAME(_hx_pos_0aa16e091eca6374_19_boot,"com.lak.utils.IsoUtils","boot",0x03e84ad2,"com.lak.utils.IsoUtils.boot","com/lak/utils/IsoUtils.hx",19,0x2c91e08d)
namespace com{
namespace lak{
namespace utils{

void IsoUtils_obj::__construct() { }

Dynamic IsoUtils_obj::__CreateEmpty() { return new IsoUtils_obj; }

void *IsoUtils_obj::_hx_vtable = 0;

Dynamic IsoUtils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IsoUtils_obj > _hx_result = new IsoUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IsoUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x097ae204;
}

::Array< ::String > IsoUtils_obj::spiralWalkStepArray;

::String IsoUtils_obj::ISO_NORTH;

::String IsoUtils_obj::ISO_NORTHEAST;

::String IsoUtils_obj::ISO_EAST;

::String IsoUtils_obj::ISO_SOUTHEAST;

::String IsoUtils_obj::ISO_SOUTH;

::String IsoUtils_obj::ISO_SOUTHWEST;

::String IsoUtils_obj::ISO_WEST;

::String IsoUtils_obj::ISO_NORTHWEST;

 ::openfl::geom::Point IsoUtils_obj::slideMapTileWalker( ::openfl::geom::Point ptStart,::String dir,hx::Null< bool >  __o_debug){
bool debug = __o_debug.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0aa16e091eca6374_26_slideMapTileWalker)
HXLINE(  28)		 ::openfl::geom::Point pDest =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  30)		pDest->x = ptStart->x;
HXLINE(  31)		pDest->y = ptStart->y;
HXLINE(  32)		::String str = HX_("",00,00,00,00);
HXLINE(  34)		if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_NORTH)) {
HXLINE(  35)			 ::openfl::geom::Point pDest1 = pDest;
HXDLIN(  35)			pDest1->y = (pDest1->y - (int)2);
HXLINE(  36)			str = ::com::lak::utils::IsoUtils_obj::ISO_NORTH;
            		}
            		else {
HXLINE(  38)			if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_NORTHEAST)) {
HXLINE(  39)				pDest->y--;
HXLINE(  40)				str = ::com::lak::utils::IsoUtils_obj::ISO_NORTHEAST;
            			}
            			else {
HXLINE(  42)				if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_EAST)) {
HXLINE(  43)					pDest->x++;
HXLINE(  44)					str = ::com::lak::utils::IsoUtils_obj::ISO_EAST;
            				}
            				else {
HXLINE(  46)					if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_SOUTHEAST)) {
HXLINE(  47)						pDest->y++;
HXLINE(  48)						str = ::com::lak::utils::IsoUtils_obj::ISO_SOUTHEAST;
            					}
            					else {
HXLINE(  50)						if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_SOUTH)) {
HXLINE(  51)							 ::openfl::geom::Point pDest2 = pDest;
HXDLIN(  51)							pDest2->y = (pDest2->y + (int)2);
HXLINE(  52)							str = ::com::lak::utils::IsoUtils_obj::ISO_SOUTH;
            						}
            						else {
HXLINE(  54)							if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_SOUTHWEST)) {
HXLINE(  55)								pDest->x--;
HXLINE(  56)								pDest->y++;
HXLINE(  57)								str = ::com::lak::utils::IsoUtils_obj::ISO_SOUTHWEST;
            							}
            							else {
HXLINE(  59)								if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_WEST)) {
HXLINE(  60)									pDest->x--;
HXLINE(  61)									str = ::com::lak::utils::IsoUtils_obj::ISO_WEST;
            								}
            								else {
HXLINE(  63)									if ((dir == ::com::lak::utils::IsoUtils_obj::ISO_NORTHWEST)) {
HXLINE(  64)										pDest->x--;
HXLINE(  65)										pDest->y--;
HXLINE(  66)										str = ::com::lak::utils::IsoUtils_obj::ISO_NORTHWEST;
            									}
            									else {
HXLINE(  68)										str = HX_(" PAS DE DIRECTION ",e2,77,cf,e4);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  70)		if (debug) {
HXLINE(  70)			::haxe::Log_obj::trace(str,hx::SourceInfo(HX_("IsoUtils.hx",72,ff,ec,e3),70,HX_("com.lak.utils.IsoUtils",ce,1d,7d,ab),HX_("slideMapTileWalker",4f,e9,3d,8c)));
            		}
HXLINE(  71)		return pDest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(IsoUtils_obj,slideMapTileWalker,return )

 ::openfl::geom::Point IsoUtils_obj::mapTilePosition( ::openfl::geom::Point ptMap,hx::Null< int >  __o_iTileWidth,hx::Null< int >  __o_iTileHeight){
int iTileWidth = __o_iTileWidth.Default(64);
int iTileHeight = __o_iTileHeight.Default(32);
            	HX_GC_STACKFRAME(&_hx_pos_0aa16e091eca6374_81_mapTilePosition)
HXLINE(  81)		Float _hx_tmp = (ptMap->x * iTileWidth);
HXDLIN(  81)		int _hx_tmp1 = ((int)::Std_obj::_hx_int(ptMap->y) & (int)(int)1);
HXDLIN(  81)		int _hx_tmp2 = ::Std_obj::_hx_int((_hx_tmp + (_hx_tmp1 * ((int)iTileWidth >> (int)(int)1))));
HXDLIN(  81)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp2,::Std_obj::_hx_int(((int)(::Std_obj::_hx_int(ptMap->y) * iTileHeight) >> (int)(int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(IsoUtils_obj,mapTilePosition,return )

 ::openfl::geom::Point IsoUtils_obj::getTileAt( ::openfl::geom::Point pt,hx::Null< bool >  __o_bl){
bool bl = __o_bl.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0aa16e091eca6374_91_getTileAt)
HXLINE(  91)		int _hx_tmp = ::Math_obj::floor(((Float)pt->x / (Float)::com::lak::IsoWorld_obj::instance->tileW));
HXDLIN(  91)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,::Math_obj::floor(((Float)pt->y / (Float)::com::lak::IsoWorld_obj::instance->halfH)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IsoUtils_obj,getTileAt,return )

int IsoUtils_obj::getPos(Float _ax,Float _ay,Float _bx,Float _by,Float _cx,Float _cy){
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_94_getPos)
HXLINE(  95)		Float slope = ((Float)(_by - _ay) / (Float)(_bx - _ax));
HXLINE(  96)		Float yIntercept = (_ay - (_ax * slope));
HXLINE(  97)		Float cSolution = ((slope * _cx) + yIntercept);
HXLINE(  98)		if ((slope != (int)0)) {
HXLINE(  99)			if ((_cy > cSolution)) {
HXLINE(  99)				if ((_bx > _ax)) {
HXLINE(  99)					return (int)1;
            				}
            				else {
HXLINE(  99)					return (int)-1;
            				}
            			}
HXLINE( 100)			if ((_cy < cSolution)) {
HXLINE( 100)				if ((_bx > _ax)) {
HXLINE( 100)					return (int)-1;
            				}
            				else {
HXLINE( 100)					return (int)1;
            				}
            			}
HXLINE( 101)			return (int)0;
            		}
HXLINE( 103)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(IsoUtils_obj,getPos,return )


IsoUtils_obj::IsoUtils_obj()
{
}

bool IsoUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { outValue = getPos_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ISO_EAST") ) { outValue = ISO_EAST; return true; }
		if (HX_FIELD_EQ(inName,"ISO_WEST") ) { outValue = ISO_WEST; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ISO_NORTH") ) { outValue = ISO_NORTH; return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTH") ) { outValue = ISO_SOUTH; return true; }
		if (HX_FIELD_EQ(inName,"getTileAt") ) { outValue = getTileAt_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ISO_NORTHEAST") ) { outValue = ISO_NORTHEAST; return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTHEAST") ) { outValue = ISO_SOUTHEAST; return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTHWEST") ) { outValue = ISO_SOUTHWEST; return true; }
		if (HX_FIELD_EQ(inName,"ISO_NORTHWEST") ) { outValue = ISO_NORTHWEST; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mapTilePosition") ) { outValue = mapTilePosition_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"slideMapTileWalker") ) { outValue = slideMapTileWalker_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"spiralWalkStepArray") ) { outValue = spiralWalkStepArray; return true; }
	}
	return false;
}

bool IsoUtils_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"ISO_EAST") ) { ISO_EAST=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ISO_WEST") ) { ISO_WEST=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ISO_NORTH") ) { ISO_NORTH=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTH") ) { ISO_SOUTH=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ISO_NORTHEAST") ) { ISO_NORTHEAST=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTHEAST") ) { ISO_SOUTHEAST=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ISO_SOUTHWEST") ) { ISO_SOUTHWEST=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ISO_NORTHWEST") ) { ISO_NORTHWEST=ioValue.Cast< ::String >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"spiralWalkStepArray") ) { spiralWalkStepArray=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IsoUtils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo IsoUtils_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &IsoUtils_obj::spiralWalkStepArray,HX_HCSTRING("spiralWalkStepArray","\x73","\x2d","\x39","\xe1")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_NORTH,HX_HCSTRING("ISO_NORTH","\xcb","\x7a","\xf0","\xa0")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_NORTHEAST,HX_HCSTRING("ISO_NORTHEAST","\x48","\x90","\xda","\xcb")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_EAST,HX_HCSTRING("ISO_EAST","\x97","\xfc","\xe7","\x41")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_SOUTHEAST,HX_HCSTRING("ISO_SOUTHEAST","\x90","\x01","\x52","\x67")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_SOUTH,HX_HCSTRING("ISO_SOUTH","\x13","\xa8","\xf3","\x81")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_SOUTHWEST,HX_HCSTRING("ISO_SOUTHWEST","\xc2","\xe1","\x3a","\x73")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_WEST,HX_HCSTRING("ISO_WEST","\xc9","\xdc","\xd0","\x4d")},
	{hx::fsString,(void *) &IsoUtils_obj::ISO_NORTHWEST,HX_HCSTRING("ISO_NORTHWEST","\x7a","\x70","\xc3","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void IsoUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IsoUtils_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::spiralWalkStepArray,"spiralWalkStepArray");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_NORTH,"ISO_NORTH");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_NORTHEAST,"ISO_NORTHEAST");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_EAST,"ISO_EAST");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_SOUTHEAST,"ISO_SOUTHEAST");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_SOUTH,"ISO_SOUTH");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_SOUTHWEST,"ISO_SOUTHWEST");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_WEST,"ISO_WEST");
	HX_MARK_MEMBER_NAME(IsoUtils_obj::ISO_NORTHWEST,"ISO_NORTHWEST");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IsoUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::spiralWalkStepArray,"spiralWalkStepArray");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_NORTH,"ISO_NORTH");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_NORTHEAST,"ISO_NORTHEAST");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_EAST,"ISO_EAST");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_SOUTHEAST,"ISO_SOUTHEAST");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_SOUTH,"ISO_SOUTH");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_SOUTHWEST,"ISO_SOUTHWEST");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_WEST,"ISO_WEST");
	HX_VISIT_MEMBER_NAME(IsoUtils_obj::ISO_NORTHWEST,"ISO_NORTHWEST");
};

#endif

hx::Class IsoUtils_obj::__mClass;

static ::String IsoUtils_obj_sStaticFields[] = {
	HX_HCSTRING("spiralWalkStepArray","\x73","\x2d","\x39","\xe1"),
	HX_HCSTRING("ISO_NORTH","\xcb","\x7a","\xf0","\xa0"),
	HX_HCSTRING("ISO_NORTHEAST","\x48","\x90","\xda","\xcb"),
	HX_HCSTRING("ISO_EAST","\x97","\xfc","\xe7","\x41"),
	HX_HCSTRING("ISO_SOUTHEAST","\x90","\x01","\x52","\x67"),
	HX_HCSTRING("ISO_SOUTH","\x13","\xa8","\xf3","\x81"),
	HX_HCSTRING("ISO_SOUTHWEST","\xc2","\xe1","\x3a","\x73"),
	HX_HCSTRING("ISO_WEST","\xc9","\xdc","\xd0","\x4d"),
	HX_HCSTRING("ISO_NORTHWEST","\x7a","\x70","\xc3","\xd7"),
	HX_HCSTRING("slideMapTileWalker","\x4f","\xe9","\x3d","\x8c"),
	HX_HCSTRING("mapTilePosition","\xb3","\xd6","\x65","\x22"),
	HX_HCSTRING("getTileAt","\xf7","\x34","\x7f","\x9a"),
	HX_HCSTRING("getPos","\x9e","\x96","\x24","\xa3"),
	::String(null())
};

void IsoUtils_obj::__register()
{
	hx::Object *dummy = new IsoUtils_obj;
	IsoUtils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.utils.IsoUtils","\xce","\x1d","\x7d","\xab");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IsoUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &IsoUtils_obj::__SetStatic;
	__mClass->mMarkFunc = IsoUtils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IsoUtils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IsoUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IsoUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IsoUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IsoUtils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IsoUtils_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_11_boot)
HXLINE(  11)		spiralWalkStepArray = ::Array_obj< ::String >::fromData( _hx_array_data_ab7d1dce_5,8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_12_boot)
HXLINE(  12)		ISO_NORTH = HX_("N",4e,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_13_boot)
HXLINE(  13)		ISO_NORTHEAST = HX_("NE",37,44,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_14_boot)
HXLINE(  14)		ISO_EAST = HX_("E",45,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_15_boot)
HXLINE(  15)		ISO_SOUTHEAST = HX_("SE",92,48,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_16_boot)
HXLINE(  16)		ISO_SOUTH = HX_("S",53,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_17_boot)
HXLINE(  17)		ISO_SOUTHWEST = HX_("SW",a4,48,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_18_boot)
HXLINE(  18)		ISO_WEST = HX_("W",57,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0aa16e091eca6374_19_boot)
HXLINE(  19)		ISO_NORTHWEST = HX_("NW",49,44,00,00);
            	}
}

} // end namespace com
} // end namespace lak
} // end namespace utils
