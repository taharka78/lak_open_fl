// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_spritesheet_AnimatedSprite
#include <spritesheet/AnimatedSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a9067831d1860bbc_10_new,"com.lak.entities.IsoObject","new",0xd51f73ee,"com.lak.entities.IsoObject.new","com/lak/entities/IsoObject.hx",10,0x34a71101)
HX_LOCAL_STACK_FRAME(_hx_pos_a9067831d1860bbc_33_update,"com.lak.entities.IsoObject","update",0x9ebe0f3b,"com.lak.entities.IsoObject.update","com/lak/entities/IsoObject.hx",33,0x34a71101)
HX_LOCAL_STACK_FRAME(_hx_pos_a9067831d1860bbc_39_centerPoint,"com.lak.entities.IsoObject","centerPoint",0x67ee9bc9,"com.lak.entities.IsoObject.centerPoint","com/lak/entities/IsoObject.hx",39,0x34a71101)
HX_LOCAL_STACK_FRAME(_hx_pos_a9067831d1860bbc_44_renew,"com.lak.entities.IsoObject","renew",0x406aa19b,"com.lak.entities.IsoObject.renew","com/lak/entities/IsoObject.hx",44,0x34a71101)
HX_LOCAL_STACK_FRAME(_hx_pos_a9067831d1860bbc_47_destroy,"com.lak.entities.IsoObject","destroy",0xce45af88,"com.lak.entities.IsoObject.destroy","com/lak/entities/IsoObject.hx",47,0x34a71101)
namespace com{
namespace lak{
namespace entities{

void IsoObject_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a9067831d1860bbc_10_new)
HXLINE(  24)		this->speed = ((Float)2);
HXLINE(  23)		this->isLive = true;
HXLINE(  22)		this->clone = false;
HXLINE(  21)		this->angle = (int)0;
HXLINE(  20)		this->phase = HX_("",00,00,00,00);
HXLINE(  19)		this->currentAction = HX_("",00,00,00,00);
HXLINE(  18)		this->scale = ((Float)1);
HXLINE(  16)		this->isAttack = false;
HXLINE(  15)		this->canAttack = false;
HXLINE(  14)		this->hasPath = false;
HXLINE(  13)		this->hasBullet = false;
HXLINE(  12)		this->type = HX_("",00,00,00,00);
HXLINE(  31)		super::__construct();
            	}

Dynamic IsoObject_obj::__CreateEmpty() { return new IsoObject_obj; }

void *IsoObject_obj::_hx_vtable = 0;

Dynamic IsoObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IsoObject_obj > _hx_result = new IsoObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IsoObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x0b5def22) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b5def22;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void IsoObject_obj::update(int delta){
            	HX_STACKFRAME(&_hx_pos_a9067831d1860bbc_33_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoObject_obj,update,(void))

void IsoObject_obj::centerPoint(){
            	HX_STACKFRAME(&_hx_pos_a9067831d1860bbc_39_centerPoint)
HXLINE(  40)		this->get_graphics()->beginFill((int)255,null());
HXLINE(  41)		this->get_graphics()->drawCircle(((Float)-2.5),((Float)-2.5),(int)5);
HXLINE(  42)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoObject_obj,centerPoint,(void))

void IsoObject_obj::renew(){
            	HX_STACKFRAME(&_hx_pos_a9067831d1860bbc_44_renew)
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoObject_obj,renew,(void))

void IsoObject_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a9067831d1860bbc_47_destroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoObject_obj,destroy,(void))


hx::ObjectPtr< IsoObject_obj > IsoObject_obj::__new() {
	hx::ObjectPtr< IsoObject_obj > __this = new IsoObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IsoObject_obj > IsoObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	IsoObject_obj *__this = (IsoObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IsoObject_obj), true, "com.lak.entities.IsoObject"));
	*(void **)__this = IsoObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IsoObject_obj::IsoObject_obj()
{
}

void IsoObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IsoObject);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(hasBullet,"hasBullet");
	HX_MARK_MEMBER_NAME(hasPath,"hasPath");
	HX_MARK_MEMBER_NAME(canAttack,"canAttack");
	HX_MARK_MEMBER_NAME(isAttack,"isAttack");
	HX_MARK_MEMBER_NAME(spriteSheet,"spriteSheet");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(currentAction,"currentAction");
	HX_MARK_MEMBER_NAME(phase,"phase");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(clone,"clone");
	HX_MARK_MEMBER_NAME(isLive,"isLive");
	HX_MARK_MEMBER_NAME(speed,"speed");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IsoObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(hasBullet,"hasBullet");
	HX_VISIT_MEMBER_NAME(hasPath,"hasPath");
	HX_VISIT_MEMBER_NAME(canAttack,"canAttack");
	HX_VISIT_MEMBER_NAME(isAttack,"isAttack");
	HX_VISIT_MEMBER_NAME(spriteSheet,"spriteSheet");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(currentAction,"currentAction");
	HX_VISIT_MEMBER_NAME(phase,"phase");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(clone,"clone");
	HX_VISIT_MEMBER_NAME(isLive,"isLive");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IsoObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"phase") ) { return hx::Val( phase); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone); }
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		if (HX_FIELD_EQ(inName,"renew") ) { return hx::Val( renew_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLive") ) { return hx::Val( isLive); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasPath") ) { return hx::Val( hasPath); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isAttack") ) { return hx::Val( isAttack); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasBullet") ) { return hx::Val( hasBullet); }
		if (HX_FIELD_EQ(inName,"canAttack") ) { return hx::Val( canAttack); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spriteSheet") ) { return hx::Val( spriteSheet); }
		if (HX_FIELD_EQ(inName,"centerPoint") ) { return hx::Val( centerPoint_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentAction") ) { return hx::Val( currentAction); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IsoObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phase") ) { phase=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clone") ) { clone=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLive") ) { isLive=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasPath") ) { hasPath=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isAttack") ) { isAttack=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasBullet") ) { hasBullet=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canAttack") ) { canAttack=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spriteSheet") ) { spriteSheet=inValue.Cast<  ::spritesheet::AnimatedSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentAction") ) { currentAction=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IsoObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("hasBullet","\x3c","\x45","\x79","\x15"));
	outFields->push(HX_HCSTRING("hasPath","\x1f","\x06","\x96","\x19"));
	outFields->push(HX_HCSTRING("canAttack","\xf8","\x4f","\x56","\x32"));
	outFields->push(HX_HCSTRING("isAttack","\x52","\x97","\x79","\x38"));
	outFields->push(HX_HCSTRING("spriteSheet","\x5a","\xc4","\xc2","\xb2"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("currentAction","\xcf","\xbc","\xa2","\xf9"));
	outFields->push(HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"));
	outFields->push(HX_HCSTRING("isLive","\xf6","\xe3","\x19","\x65"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IsoObject_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(IsoObject_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,hasBullet),HX_HCSTRING("hasBullet","\x3c","\x45","\x79","\x15")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,hasPath),HX_HCSTRING("hasPath","\x1f","\x06","\x96","\x19")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,canAttack),HX_HCSTRING("canAttack","\xf8","\x4f","\x56","\x32")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,isAttack),HX_HCSTRING("isAttack","\x52","\x97","\x79","\x38")},
	{hx::fsObject /*::spritesheet::AnimatedSprite*/ ,(int)offsetof(IsoObject_obj,spriteSheet),HX_HCSTRING("spriteSheet","\x5a","\xc4","\xc2","\xb2")},
	{hx::fsFloat,(int)offsetof(IsoObject_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsString,(int)offsetof(IsoObject_obj,currentAction),HX_HCSTRING("currentAction","\xcf","\xbc","\xa2","\xf9")},
	{hx::fsString,(int)offsetof(IsoObject_obj,phase),HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1")},
	{hx::fsInt,(int)offsetof(IsoObject_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,clone),HX_HCSTRING("clone","\x5d","\x13","\x63","\x48")},
	{hx::fsBool,(int)offsetof(IsoObject_obj,isLive),HX_HCSTRING("isLive","\xf6","\xe3","\x19","\x65")},
	{hx::fsFloat,(int)offsetof(IsoObject_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IsoObject_obj_sStaticStorageInfo = 0;
#endif

static ::String IsoObject_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("hasBullet","\x3c","\x45","\x79","\x15"),
	HX_HCSTRING("hasPath","\x1f","\x06","\x96","\x19"),
	HX_HCSTRING("canAttack","\xf8","\x4f","\x56","\x32"),
	HX_HCSTRING("isAttack","\x52","\x97","\x79","\x38"),
	HX_HCSTRING("spriteSheet","\x5a","\xc4","\xc2","\xb2"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("currentAction","\xcf","\xbc","\xa2","\xf9"),
	HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("isLive","\xf6","\xe3","\x19","\x65"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("centerPoint","\x3b","\xba","\x5f","\x98"),
	HX_HCSTRING("renew","\x8d","\x7e","\xc4","\xe6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void IsoObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IsoObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IsoObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IsoObject_obj::__mClass,"__mClass");
};

#endif

hx::Class IsoObject_obj::__mClass;

void IsoObject_obj::__register()
{
	hx::Object *dummy = new IsoObject_obj;
	IsoObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.entities.IsoObject","\xfc","\xa4","\xc7","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IsoObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IsoObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IsoObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IsoObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IsoObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IsoObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace entities
