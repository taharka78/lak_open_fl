// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_simulator_manager_SpritesheetManager
#include <com/lak/simulator/manager/SpritesheetManager.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_importers_ZoeImporter
#include <spritesheet/importers/ZoeImporter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_82c5ac538e921a57_14_new,"com.lak.simulator.manager.SpritesheetManager","new",0xfd258515,"com.lak.simulator.manager.SpritesheetManager.new","com/lak/simulator/manager/SpritesheetManager.hx",14,0x4c829777)
HX_LOCAL_STACK_FRAME(_hx_pos_82c5ac538e921a57_22_getSpritesheet,"com.lak.simulator.manager.SpritesheetManager","getSpritesheet",0xbf6ef4ef,"com.lak.simulator.manager.SpritesheetManager.getSpritesheet","com/lak/simulator/manager/SpritesheetManager.hx",22,0x4c829777)
HX_LOCAL_STACK_FRAME(_hx_pos_82c5ac538e921a57_35_addSpriteSheet,"com.lak.simulator.manager.SpritesheetManager","addSpriteSheet",0x60d51924,"com.lak.simulator.manager.SpritesheetManager.addSpriteSheet","com/lak/simulator/manager/SpritesheetManager.hx",35,0x4c829777)
namespace com{
namespace lak{
namespace simulator{
namespace manager{

void SpritesheetManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_82c5ac538e921a57_14_new)
HXLINE(  14)		this->sheetsCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic SpritesheetManager_obj::__CreateEmpty() { return new SpritesheetManager_obj; }

void *SpritesheetManager_obj::_hx_vtable = 0;

Dynamic SpritesheetManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpritesheetManager_obj > _hx_result = new SpritesheetManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SpritesheetManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x34976611;
}

 ::spritesheet::Spritesheet SpritesheetManager_obj::getSpritesheet(::String assetFolderName,::String assetName){
            	HX_STACKFRAME(&_hx_pos_82c5ac538e921a57_22_getSpritesheet)
HXLINE(  23)		if (!(this->sheetsCache->exists(((assetFolderName + HX_("_",5f,00,00,00)) + assetName)))) {
HXLINE(  24)			this->addSpriteSheet(assetFolderName,assetName);
            		}
HXLINE(  26)		return this->sheetsCache->get(((assetFolderName + HX_("_",5f,00,00,00)) + assetName)).StaticCast<  ::spritesheet::Spritesheet >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(SpritesheetManager_obj,getSpritesheet,return )

void SpritesheetManager_obj::addSpriteSheet(::String assetFolderName,::String assetName){
            	HX_STACKFRAME(&_hx_pos_82c5ac538e921a57_35_addSpriteSheet)
HXLINE(  35)		if (!(this->sheetsCache->exists(((assetFolderName + HX_("_",5f,00,00,00)) + assetName)))) {
HXLINE(  36)			 ::openfl::display::BitmapData bitmapData = ::openfl::utils::Assets_obj::getBitmapData((((assetFolderName + HX_("/",2f,00,00,00)) + assetName) + HX_(".png",3b,2d,bd,1e)),null());
HXLINE(  37)			::String spriteSht = ::openfl::utils::Assets_obj::getText((((assetFolderName + HX_("/",2f,00,00,00)) + assetName) + HX_(".json",56,f1,d6,c2)));
HXDLIN(  37)			 ::spritesheet::Spritesheet spriteSht1 = ::spritesheet::importers::ZoeImporter_obj::parse(spriteSht,assetFolderName,(assetName + HX_(".png",3b,2d,bd,1e)));
HXLINE(  38)			this->sheetsCache->set(((assetFolderName + HX_("_",5f,00,00,00)) + assetName),spriteSht1);
            		}
            		else {
HXLINE(  40)			::haxe::Log_obj::trace(HX_(" spritesheet already cached ",b0,b9,6c,df),hx::SourceInfo(HX_("SpritesheetManager.hx",6b,d7,7e,36),40,HX_("com.lak.simulator.manager.SpritesheetManager",a3,56,36,bb),HX_("addSpriteSheet",b9,cb,99,48)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SpritesheetManager_obj,addSpriteSheet,(void))


hx::ObjectPtr< SpritesheetManager_obj > SpritesheetManager_obj::__new() {
	hx::ObjectPtr< SpritesheetManager_obj > __this = new SpritesheetManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SpritesheetManager_obj > SpritesheetManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	SpritesheetManager_obj *__this = (SpritesheetManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpritesheetManager_obj), true, "com.lak.simulator.manager.SpritesheetManager"));
	*(void **)__this = SpritesheetManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SpritesheetManager_obj::SpritesheetManager_obj()
{
}

void SpritesheetManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpritesheetManager);
	HX_MARK_MEMBER_NAME(sheetsCache,"sheetsCache");
	HX_MARK_END_CLASS();
}

void SpritesheetManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sheetsCache,"sheetsCache");
}

hx::Val SpritesheetManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sheetsCache") ) { return hx::Val( sheetsCache); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getSpritesheet") ) { return hx::Val( getSpritesheet_dyn()); }
		if (HX_FIELD_EQ(inName,"addSpriteSheet") ) { return hx::Val( addSpriteSheet_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpritesheetManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sheetsCache") ) { sheetsCache=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpritesheetManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sheetsCache","\xae","\xac","\x56","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpritesheetManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(SpritesheetManager_obj,sheetsCache),HX_HCSTRING("sheetsCache","\xae","\xac","\x56","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpritesheetManager_obj_sStaticStorageInfo = 0;
#endif

static ::String SpritesheetManager_obj_sMemberFields[] = {
	HX_HCSTRING("sheetsCache","\xae","\xac","\x56","\x73"),
	HX_HCSTRING("getSpritesheet","\x84","\xa7","\x33","\xa7"),
	HX_HCSTRING("addSpriteSheet","\xb9","\xcb","\x99","\x48"),
	::String(null()) };

static void SpritesheetManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpritesheetManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpritesheetManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpritesheetManager_obj::__mClass,"__mClass");
};

#endif

hx::Class SpritesheetManager_obj::__mClass;

void SpritesheetManager_obj::__register()
{
	hx::Object *dummy = new SpritesheetManager_obj;
	SpritesheetManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.manager.SpritesheetManager","\xa3","\x56","\x36","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpritesheetManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpritesheetManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpritesheetManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpritesheetManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpritesheetManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpritesheetManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace manager
