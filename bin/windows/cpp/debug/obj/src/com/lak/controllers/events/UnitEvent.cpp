// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_controllers_events_UnitEvent
#include <com/lak/controllers/events/UnitEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_18_new,"com.lak.controllers.events.UnitEvent","new",0xb510b28f,"com.lak.controllers.events.UnitEvent.new","com/lak/controllers/events/UnitEvent.hx",18,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_23_clone,"com.lak.controllers.events.UnitEvent","clone",0x4fc01f4c,"com.lak.controllers.events.UnitEvent.clone","com/lak/controllers/events/UnitEvent.hx",23,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_10_boot,"com.lak.controllers.events.UnitEvent","boot",0xb1a48b23,"com.lak.controllers.events.UnitEvent.boot","com/lak/controllers/events/UnitEvent.hx",10,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_11_boot,"com.lak.controllers.events.UnitEvent","boot",0xb1a48b23,"com.lak.controllers.events.UnitEvent.boot","com/lak/controllers/events/UnitEvent.hx",11,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_12_boot,"com.lak.controllers.events.UnitEvent","boot",0xb1a48b23,"com.lak.controllers.events.UnitEvent.boot","com/lak/controllers/events/UnitEvent.hx",12,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_13_boot,"com.lak.controllers.events.UnitEvent","boot",0xb1a48b23,"com.lak.controllers.events.UnitEvent.boot","com/lak/controllers/events/UnitEvent.hx",13,0xf53edf9f)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdfcd130bfd2800_14_boot,"com.lak.controllers.events.UnitEvent","boot",0xb1a48b23,"com.lak.controllers.events.UnitEvent.boot","com/lak/controllers/events/UnitEvent.hx",14,0xf53edf9f)
namespace com{
namespace lak{
namespace controllers{
namespace events{

void UnitEvent_obj::__construct(::String type, ::Dynamic _dataObj){
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_18_new)
HXLINE(  19)		this->dataObj = _dataObj;
HXLINE(  20)		super::__construct(type,false,false);
            	}

Dynamic UnitEvent_obj::__CreateEmpty() { return new UnitEvent_obj; }

void *UnitEvent_obj::_hx_vtable = 0;

Dynamic UnitEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnitEvent_obj > _hx_result = new UnitEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UnitEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1fbc1687) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1fbc1687;
	} else {
		return inClassId==(int)0x3243040d;
	}
}

 ::openfl::events::Event UnitEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_23_clone)
HXLINE(  23)		return  ::com::lak::controllers::events::UnitEvent_obj::__alloc( HX_CTX ,this->type,this->dataObj);
            	}


::String UnitEvent_obj::CREATE;

::String UnitEvent_obj::MOVE;

::String UnitEvent_obj::DIE;

::String UnitEvent_obj::ATTACK;

::String UnitEvent_obj::WALK;


hx::ObjectPtr< UnitEvent_obj > UnitEvent_obj::__new(::String type, ::Dynamic _dataObj) {
	hx::ObjectPtr< UnitEvent_obj > __this = new UnitEvent_obj();
	__this->__construct(type,_dataObj);
	return __this;
}

hx::ObjectPtr< UnitEvent_obj > UnitEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type, ::Dynamic _dataObj) {
	UnitEvent_obj *__this = (UnitEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UnitEvent_obj), true, "com.lak.controllers.events.UnitEvent"));
	*(void **)__this = UnitEvent_obj::_hx_vtable;
	__this->__construct(type,_dataObj);
	return __this;
}

UnitEvent_obj::UnitEvent_obj()
{
}

void UnitEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UnitEvent);
	HX_MARK_MEMBER_NAME(dataObj,"dataObj");
	 ::openfl::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void UnitEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dataObj,"dataObj");
	 ::openfl::events::Event_obj::__Visit(HX_VISIT_ARG);
}

hx::Val UnitEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dataObj") ) { return hx::Val( dataObj); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val UnitEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dataObj") ) { dataObj=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UnitEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dataObj","\xed","\xa7","\xd5","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UnitEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(UnitEvent_obj,dataObj),HX_HCSTRING("dataObj","\xed","\xa7","\xd5","\x11")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo UnitEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &UnitEvent_obj::CREATE,HX_HCSTRING("CREATE","\xfc","\x12","\x92","\x2e")},
	{hx::fsString,(void *) &UnitEvent_obj::MOVE,HX_HCSTRING("MOVE","\x11","\xab","\x21","\x33")},
	{hx::fsString,(void *) &UnitEvent_obj::DIE,HX_HCSTRING("DIE","\x20","\xd9","\x33","\x00")},
	{hx::fsString,(void *) &UnitEvent_obj::ATTACK,HX_HCSTRING("ATTACK","\xc8","\xa7","\x92","\x92")},
	{hx::fsString,(void *) &UnitEvent_obj::WALK,HX_HCSTRING("WALK","\x09","\x25","\xb3","\x39")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String UnitEvent_obj_sMemberFields[] = {
	HX_HCSTRING("dataObj","\xed","\xa7","\xd5","\x11"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void UnitEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnitEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(UnitEvent_obj::CREATE,"CREATE");
	HX_MARK_MEMBER_NAME(UnitEvent_obj::MOVE,"MOVE");
	HX_MARK_MEMBER_NAME(UnitEvent_obj::DIE,"DIE");
	HX_MARK_MEMBER_NAME(UnitEvent_obj::ATTACK,"ATTACK");
	HX_MARK_MEMBER_NAME(UnitEvent_obj::WALK,"WALK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnitEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::CREATE,"CREATE");
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::MOVE,"MOVE");
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::DIE,"DIE");
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::ATTACK,"ATTACK");
	HX_VISIT_MEMBER_NAME(UnitEvent_obj::WALK,"WALK");
};

#endif

hx::Class UnitEvent_obj::__mClass;

static ::String UnitEvent_obj_sStaticFields[] = {
	HX_HCSTRING("CREATE","\xfc","\x12","\x92","\x2e"),
	HX_HCSTRING("MOVE","\x11","\xab","\x21","\x33"),
	HX_HCSTRING("DIE","\x20","\xd9","\x33","\x00"),
	HX_HCSTRING("ATTACK","\xc8","\xa7","\x92","\x92"),
	HX_HCSTRING("WALK","\x09","\x25","\xb3","\x39"),
	::String(null())
};

void UnitEvent_obj::__register()
{
	hx::Object *dummy = new UnitEvent_obj;
	UnitEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.controllers.events.UnitEvent","\x1d","\xbf","\xea","\x1d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UnitEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UnitEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UnitEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UnitEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnitEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnitEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnitEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void UnitEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_10_boot)
HXLINE(  10)		CREATE = HX_("create",fc,66,0f,7c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_11_boot)
HXLINE(  11)		MOVE = HX_("move",11,e3,60,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_12_boot)
HXLINE(  12)		DIE = HX_("die",40,3d,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_13_boot)
HXLINE(  13)		ATTACK = HX_("attack",c8,fb,0f,e0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdfcd130bfd2800_14_boot)
HXLINE(  14)		WALK = HX_("walk",09,5d,f2,4e);
            	}
}

} // end namespace com
} // end namespace lak
} // end namespace controllers
} // end namespace events
