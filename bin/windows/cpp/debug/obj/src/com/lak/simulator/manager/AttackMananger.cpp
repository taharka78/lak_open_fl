// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_AttackMananger
#include <com/lak/simulator/manager/AttackMananger.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6bbb6666d7df5e57_17_new,"com.lak.simulator.manager.AttackMananger","new",0xed3281d7,"com.lak.simulator.manager.AttackMananger.new","com/lak/simulator/manager/AttackMananger.hx",17,0x974e7af5)
HX_LOCAL_STACK_FRAME(_hx_pos_6bbb6666d7df5e57_19_run,"com.lak.simulator.manager.AttackMananger","run",0xed3598c2,"com.lak.simulator.manager.AttackMananger.run","com/lak/simulator/manager/AttackMananger.hx",19,0x974e7af5)
HX_LOCAL_STACK_FRAME(_hx_pos_6bbb6666d7df5e57_28_manageAttack,"com.lak.simulator.manager.AttackMananger","manageAttack",0x4709b7b6,"com.lak.simulator.manager.AttackMananger.manageAttack","com/lak/simulator/manager/AttackMananger.hx",28,0x974e7af5)
namespace com{
namespace lak{
namespace simulator{
namespace manager{

void AttackMananger_obj::__construct( ::com::lak::IsoWorld _world){
            	HX_STACKFRAME(&_hx_pos_6bbb6666d7df5e57_17_new)
HXLINE(  17)		this->world = _world;
            	}

Dynamic AttackMananger_obj::__CreateEmpty() { return new AttackMananger_obj; }

void *AttackMananger_obj::_hx_vtable = 0;

Dynamic AttackMananger_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AttackMananger_obj > _hx_result = new AttackMananger_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AttackMananger_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x073e8ad3;
}

void AttackMananger_obj::run(int delta){
            	HX_STACKFRAME(&_hx_pos_6bbb6666d7df5e57_19_run)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttackMananger_obj,run,(void))

void AttackMananger_obj::manageAttack( ::com::lak::entities::IsoObject obj){
            	HX_STACKFRAME(&_hx_pos_6bbb6666d7df5e57_28_manageAttack)
HXLINE(  28)		bool _hx_tmp = (obj->isLive == true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttackMananger_obj,manageAttack,(void))


hx::ObjectPtr< AttackMananger_obj > AttackMananger_obj::__new( ::com::lak::IsoWorld _world) {
	hx::ObjectPtr< AttackMananger_obj > __this = new AttackMananger_obj();
	__this->__construct(_world);
	return __this;
}

hx::ObjectPtr< AttackMananger_obj > AttackMananger_obj::__alloc(hx::Ctx *_hx_ctx, ::com::lak::IsoWorld _world) {
	AttackMananger_obj *__this = (AttackMananger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AttackMananger_obj), true, "com.lak.simulator.manager.AttackMananger"));
	*(void **)__this = AttackMananger_obj::_hx_vtable;
	__this->__construct(_world);
	return __this;
}

AttackMananger_obj::AttackMananger_obj()
{
}

void AttackMananger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AttackMananger);
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_END_CLASS();
}

void AttackMananger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(world,"world");
}

hx::Val AttackMananger_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manageAttack") ) { return hx::Val( manageAttack_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AttackMananger_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::com::lak::IsoWorld >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AttackMananger_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AttackMananger_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::lak::IsoWorld*/ ,(int)offsetof(AttackMananger_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AttackMananger_obj_sStaticStorageInfo = 0;
#endif

static ::String AttackMananger_obj_sMemberFields[] = {
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("manageAttack","\x0d","\xd0","\x28","\xe0"),
	::String(null()) };

static void AttackMananger_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AttackMananger_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AttackMananger_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AttackMananger_obj::__mClass,"__mClass");
};

#endif

hx::Class AttackMananger_obj::__mClass;

void AttackMananger_obj::__register()
{
	hx::Object *dummy = new AttackMananger_obj;
	AttackMananger_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.manager.AttackMananger","\x65","\x4a","\x91","\x63");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AttackMananger_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AttackMananger_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AttackMananger_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AttackMananger_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AttackMananger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AttackMananger_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace manager
