// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Astar
#include <com/lak/simulator/Astar.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_SpritesheetManager
#include <com/lak/simulator/manager/SpritesheetManager.h>
#endif
#ifndef INCLUDED_com_lak_utils_GameUtils
#include <com/lak/utils/GameUtils.h>
#endif
#ifndef INCLUDED_com_lak_utils_IsoUtils
#include <com/lak/utils/IsoUtils.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_spritesheet_AnimatedSprite
#include <spritesheet/AnimatedSprite.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_data_BehaviorData
#include <spritesheet/data/BehaviorData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_18_new,"com.lak.entities.IsoUnit","new",0xd782ecf3,"com.lak.entities.IsoUnit.new","com/lak/entities/IsoUnit.hx",18,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_42_goTo,"com.lak.entities.IsoUnit","goTo",0xb67361d0,"com.lak.entities.IsoUnit.goTo","com/lak/entities/IsoUnit.hx",42,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_53_onStateChange,"com.lak.entities.IsoUnit","onStateChange",0x3047add5,"com.lak.entities.IsoUnit.onStateChange","com/lak/entities/IsoUnit.hx",53,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_72_update,"com.lak.entities.IsoUnit","update",0xfa5a4756,"com.lak.entities.IsoUnit.update","com/lak/entities/IsoUnit.hx",72,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_78_move,"com.lak.entities.IsoUnit","move",0xba6ac71e,"com.lak.entities.IsoUnit.move","com/lak/entities/IsoUnit.hx",78,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_96_moveAtDir,"com.lak.entities.IsoUnit","moveAtDir",0x02c5161c,"com.lak.entities.IsoUnit.moveAtDir","com/lak/entities/IsoUnit.hx",96,0x478d21dc)
HX_LOCAL_STACK_FRAME(_hx_pos_66ade5d6a17ff09f_135_lookAtDir,"com.lak.entities.IsoUnit","lookAtDir",0x72e1980e,"com.lak.entities.IsoUnit.lookAtDir","com/lak/entities/IsoUnit.hx",135,0x478d21dc)
namespace com{
namespace lak{
namespace entities{

void IsoUnit_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_18_new)
HXLINE(  25)		this->ymovement = ((Float)0);
HXLINE(  24)		this->xmovement = ((Float)0);
HXLINE(  23)		this->lastNode = HX_("",00,00,00,00);
HXLINE(  22)		this->pEnd =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  21)		this->pCurr =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  32)		super::__construct();
HXLINE(  33)		this->spriteSheet =  ::spritesheet::AnimatedSprite_obj::__alloc( HX_CTX ,::Main_obj::instance->sprSheetManager->getSpritesheet(HX_("mali",d1,3a,56,48),HX_("king",57,e1,09,47)),null());
HXLINE(  34)		this->addEventListener(HX_("change",70,91,72,b7),this->onStateChange_dyn(),null(),null(),null());
            	}

Dynamic IsoUnit_obj::__CreateEmpty() { return new IsoUnit_obj; }

void *IsoUnit_obj::_hx_vtable = 0;

Dynamic IsoUnit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IsoUnit_obj > _hx_result = new IsoUnit_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IsoUnit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x0b5def22) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b5def22;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2248edd3) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2248edd3;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void IsoUnit_obj::goTo( ::openfl::geom::Point targetpt){
            	HX_GC_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_42_goTo)
HXLINE(  43)		Float _hx_tmp = this->get_x();
HXDLIN(  43)		 ::openfl::geom::Point _hx_tmp1 = ::com::lak::utils::IsoUtils_obj::getTileAt( ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,this->get_y()),null());
HXDLIN(  43)		this->pCurr = ::com::lak::utils::IsoUtils_obj::mapTilePosition(_hx_tmp1,::com::lak::IsoWorld_obj::instance->tileW,::com::lak::IsoWorld_obj::instance->tileH);
HXLINE(  44)		Float _hx_tmp2 = this->get_x();
HXDLIN(  44)		this->set_x(::com::lak::utils::GameUtils_obj::toGridCoord(_hx_tmp2,::com::lak::IsoWorld_obj::instance->tileW));
HXLINE(  45)		Float _hx_tmp3 = this->get_y();
HXDLIN(  45)		this->set_y(::com::lak::utils::GameUtils_obj::toGridCoord(_hx_tmp3,::com::lak::IsoWorld_obj::instance->tileH));
HXLINE(  46)		this->pEnd = targetpt;
HXLINE(  47)		::com::lak::simulator::Astar_obj::findPath(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoUnit_obj,goTo,(void))

void IsoUnit_obj::onStateChange( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_53_onStateChange)
HXLINE(  53)		if ((this->nodeTab->get_length() > (int)0)) {
HXLINE(  54)			{
HXLINE(  54)				int _g1 = (int)0;
HXDLIN(  54)				int _g = this->nodeTab->get_length();
HXDLIN(  54)				while((_g1 < _g)){
HXLINE(  54)					_g1 = (_g1 + (int)1);
HXDLIN(  54)					int i = (_g1 - (int)1);
HXLINE(  55)					int cost = (int)0;
HXLINE(  56)					this->nodeTab->__get(i)->__SetField(HX_("g",67,00,00,00),(int)0,hx::paccDynamic);
HXLINE(  57)					this->nodeTab->__get(i)->__SetField(HX_("h",68,00,00,00),::com::lak::simulator::Astar_obj::heuristic(( ( ::openfl::geom::Point)(this->nodeTab->__get(i)->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic)) ),this->pEnd),hx::paccDynamic);
HXLINE(  58)					this->nodeTab->__get(i)->__SetField(HX_("f",66,00,00,00),( ::Dynamic(this->nodeTab->__get(i)->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) +  ::Dynamic(this->nodeTab->__get(i)->__Field(HX_("h",68,00,00,00),hx::paccDynamic))),hx::paccDynamic);
            				}
            			}
HXLINE(  60)			::haxe::ds::ArraySort_obj::sort(this->nodeTab,::com::lak::utils::GameUtils_obj::sortByF_dyn());
HXLINE(  61)			this->hasPath = true;
HXLINE(  62)			this->lookAtDir(( (::String)(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)) ));
HXLINE(  63)			this->currentAction = HX_("walk",09,5d,f2,4e);
            		}
            		else {
HXLINE(  65)			::haxe::Log_obj::trace(HX_(" NO NODE IN _unit.nodeTab ",d4,52,63,78),hx::SourceInfo(HX_("IsoUnit.hx",15,e0,52,f0),65,HX_("com.lak.entities.IsoUnit",81,f7,ce,79),HX_("onStateChange",82,fb,e5,94)));
HXLINE(  66)			this->hasPath = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoUnit_obj,onStateChange,(void))

void IsoUnit_obj::update(int delta){
            	HX_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_72_update)
HXLINE(  73)		::String _hx_tmp = this->spriteSheet->currentBehavior->name;
HXDLIN(  73)		if ((_hx_tmp != ((this->currentAction + HX_("_",5f,00,00,00)) + this->phase))) {
HXLINE(  73)			 ::spritesheet::AnimatedSprite _hx_tmp1 = this->spriteSheet;
HXDLIN(  73)			_hx_tmp1->showBehavior(((this->currentAction + HX_("_",5f,00,00,00)) + this->phase),null());
            		}
HXLINE(  74)		if (this->hasPath) {
HXLINE(  74)			this->move();
            		}
HXLINE(  75)		this->spriteSheet->update(delta);
            	}


void IsoUnit_obj::move(){
            	HX_GC_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_78_move)
HXLINE(  79)		Float distEnd = ::Math_obj::floor(::com::lak::utils::GameUtils_obj::distanceBetweenPt(this->pEnd,this->pCurr));
HXLINE(  81)		bool _hx_tmp;
HXDLIN(  81)		if ((this->xmovement < ::com::lak::IsoWorld_obj::instance->tileW)) {
HXLINE(  81)			_hx_tmp = (this->ymovement < ::com::lak::IsoWorld_obj::instance->halfH);
            		}
            		else {
HXLINE(  81)			_hx_tmp = false;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  82)			this->moveAtDir(( (::String)(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)) ));
HXLINE(  83)			Float _hx_tmp1 = this->get_x();
HXDLIN(  83)			 ::openfl::geom::Point _hx_tmp2 = ::com::lak::utils::IsoUtils_obj::getTileAt( ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,this->get_y()),null());
HXDLIN(  83)			this->pCurr = ::com::lak::utils::IsoUtils_obj::mapTilePosition(_hx_tmp2,::com::lak::IsoWorld_obj::instance->tileW,::com::lak::IsoWorld_obj::instance->tileH);
            		}
            		else {
HXLINE(  85)			this->xmovement = (int)0;
HXLINE(  86)			this->ymovement = (int)0;
HXLINE(  87)			if ((distEnd == (int)0)) {
HXLINE(  88)				this->hasPath = false;
HXLINE(  89)				this->currentAction = HX_("stay",d9,e3,5b,4c);
            			}
            			else {
HXLINE(  92)				::com::lak::simulator::Astar_obj::findPath(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoUnit_obj,move,(void))

void IsoUnit_obj::moveAtDir(::String lookdir){
            	HX_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_96_moveAtDir)
HXLINE(  98)		if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("N",4e,00,00,00) )) {
HXLINE(  99)			{
HXLINE(  99)				 ::com::lak::entities::IsoUnit _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  99)				Float _hx_tmp = _g->get_y();
HXDLIN(  99)				_g->set_y((_hx_tmp - (this->speed * ((Float).5))));
            			}
HXLINE( 100)			 ::com::lak::entities::IsoUnit _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 100)			_hx_tmp1->ymovement = (_hx_tmp1->ymovement + (this->speed * ((Float).5)));
            		}
            		else {
HXLINE( 101)			if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("NE",37,44,00,00) )) {
HXLINE( 102)				{
HXLINE( 102)					 ::com::lak::entities::IsoUnit _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 102)					Float _hx_tmp2 = _g1->get_x();
HXDLIN( 102)					_g1->set_x((_hx_tmp2 + this->speed));
            				}
HXLINE( 103)				{
HXLINE( 103)					 ::com::lak::entities::IsoUnit _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 103)					Float _hx_tmp3 = _g2->get_y();
HXDLIN( 103)					_g2->set_y((_hx_tmp3 - (this->speed * ((Float).5))));
            				}
HXLINE( 104)				 ::com::lak::entities::IsoUnit _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 104)				_hx_tmp4->xmovement = (_hx_tmp4->xmovement + this->speed);
HXLINE( 105)				 ::com::lak::entities::IsoUnit _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 105)				_hx_tmp5->ymovement = (_hx_tmp5->ymovement + (this->speed * ((Float).5)));
            			}
            			else {
HXLINE( 106)				if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("E",45,00,00,00) )) {
HXLINE( 107)					{
HXLINE( 107)						 ::com::lak::entities::IsoUnit _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)						Float _hx_tmp6 = _g3->get_x();
HXDLIN( 107)						_g3->set_x((_hx_tmp6 + this->speed));
            					}
HXLINE( 108)					 ::com::lak::entities::IsoUnit _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)					_hx_tmp7->xmovement = (_hx_tmp7->xmovement + this->speed);
            				}
            				else {
HXLINE( 109)					if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("SE",92,48,00,00) )) {
HXLINE( 110)						{
HXLINE( 110)							 ::com::lak::entities::IsoUnit _g4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 110)							Float _hx_tmp8 = _g4->get_x();
HXDLIN( 110)							_g4->set_x((_hx_tmp8 + this->speed));
            						}
HXLINE( 111)						{
HXLINE( 111)							 ::com::lak::entities::IsoUnit _g5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 111)							Float _hx_tmp9 = _g5->get_y();
HXDLIN( 111)							_g5->set_y((_hx_tmp9 + (this->speed * ((Float).5))));
            						}
HXLINE( 112)						 ::com::lak::entities::IsoUnit _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 112)						_hx_tmp10->xmovement = (_hx_tmp10->xmovement + this->speed);
HXLINE( 113)						 ::com::lak::entities::IsoUnit _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 113)						_hx_tmp11->ymovement = (_hx_tmp11->ymovement + (this->speed * ((Float).5)));
            					}
            					else {
HXLINE( 115)						if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("S",53,00,00,00) )) {
HXLINE( 116)							{
HXLINE( 116)								 ::com::lak::entities::IsoUnit _g6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 116)								Float _hx_tmp12 = _g6->get_y();
HXDLIN( 116)								_g6->set_y((_hx_tmp12 + (this->speed * ((Float).5))));
            							}
HXLINE( 117)							 ::com::lak::entities::IsoUnit _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 117)							_hx_tmp13->ymovement = (_hx_tmp13->ymovement + (this->speed * ((Float).5)));
            						}
            						else {
HXLINE( 118)							if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("SW",a4,48,00,00) )) {
HXLINE( 119)								{
HXLINE( 119)									 ::com::lak::entities::IsoUnit _g7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 119)									Float _hx_tmp14 = _g7->get_x();
HXDLIN( 119)									_g7->set_x((_hx_tmp14 - this->speed));
            								}
HXLINE( 120)								{
HXLINE( 120)									 ::com::lak::entities::IsoUnit _g8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)									Float _hx_tmp15 = _g8->get_y();
HXDLIN( 120)									_g8->set_y((_hx_tmp15 + (this->speed * ((Float).5))));
            								}
HXLINE( 121)								 ::com::lak::entities::IsoUnit _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 121)								_hx_tmp16->xmovement = (_hx_tmp16->xmovement + this->speed);
HXLINE( 122)								 ::com::lak::entities::IsoUnit _hx_tmp17 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 122)								_hx_tmp17->ymovement = (_hx_tmp17->ymovement + this->speed);
            							}
            							else {
HXLINE( 123)								if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("W",57,00,00,00) )) {
HXLINE( 124)									{
HXLINE( 124)										 ::com::lak::entities::IsoUnit _g9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 124)										Float _hx_tmp18 = _g9->get_x();
HXDLIN( 124)										_g9->set_x((_hx_tmp18 - this->speed));
            									}
HXLINE( 125)									 ::com::lak::entities::IsoUnit _hx_tmp19 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 125)									_hx_tmp19->xmovement = (_hx_tmp19->xmovement + this->speed);
            								}
            								else {
HXLINE( 126)									if (hx::IsEq(  ::Dynamic(this->nodeTab->__get((int)0)->__Field(HX_("direction",3f,62,40,10),hx::paccDynamic)),HX_("NW",49,44,00,00) )) {
HXLINE( 127)										{
HXLINE( 127)											 ::com::lak::entities::IsoUnit _g10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 127)											Float _hx_tmp20 = _g10->get_x();
HXDLIN( 127)											_g10->set_x((_hx_tmp20 - this->speed));
            										}
HXLINE( 128)										{
HXLINE( 128)											 ::com::lak::entities::IsoUnit _g11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 128)											Float _hx_tmp21 = _g11->get_y();
HXDLIN( 128)											_g11->set_y((_hx_tmp21 - (this->speed * ((Float).5))));
            										}
HXLINE( 129)										 ::com::lak::entities::IsoUnit _hx_tmp22 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 129)										_hx_tmp22->xmovement = (_hx_tmp22->xmovement + this->speed);
HXLINE( 130)										 ::com::lak::entities::IsoUnit _hx_tmp23 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 130)										_hx_tmp23->ymovement = (_hx_tmp23->ymovement + this->speed);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 133)		this->lookAtDir(lookdir);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoUnit_obj,moveAtDir,(void))

void IsoUnit_obj::lookAtDir(::String lookdir){
            	HX_STACKFRAME(&_hx_pos_66ade5d6a17ff09f_135_lookAtDir)
HXLINE( 136)		if ((lookdir == HX_("N",4e,00,00,00))) {
HXLINE( 136)			this->phase = HX_("U",55,00,00,00);
HXDLIN( 136)			this->set_scaleX(this->scale);
            		}
            		else {
HXLINE( 137)			if ((lookdir == HX_("NE",37,44,00,00))) {
HXLINE( 137)				this->phase = HX_("UL",57,4a,00,00);
HXDLIN( 137)				this->set_scaleX(-(this->scale));
            			}
            			else {
HXLINE( 138)				if ((lookdir == HX_("E",45,00,00,00))) {
HXLINE( 138)					this->phase = HX_("L",4c,00,00,00);
HXDLIN( 138)					this->set_scaleX(-(this->scale));
            				}
            				else {
HXLINE( 139)					if ((lookdir == HX_("SE",92,48,00,00))) {
HXLINE( 139)						this->phase = HX_("DL",88,3b,00,00);
HXDLIN( 139)						this->set_scaleX(-(this->scale));
            					}
            					else {
HXLINE( 140)						if ((lookdir == HX_("S",53,00,00,00))) {
HXLINE( 140)							this->phase = HX_("D",44,00,00,00);
HXDLIN( 140)							this->set_scaleX(this->scale);
            						}
            						else {
HXLINE( 141)							if ((lookdir == HX_("SW",a4,48,00,00))) {
HXLINE( 141)								this->phase = HX_("DL",88,3b,00,00);
HXDLIN( 141)								this->set_scaleX(this->scale);
            							}
            							else {
HXLINE( 142)								if ((lookdir == HX_("W",57,00,00,00))) {
HXLINE( 142)									this->phase = HX_("L",4c,00,00,00);
HXDLIN( 142)									this->set_scaleX(this->scale);
            								}
            								else {
HXLINE( 143)									if ((lookdir == HX_("NW",49,44,00,00))) {
HXLINE( 143)										this->phase = HX_("UL",57,4a,00,00);
HXDLIN( 143)										this->set_scaleX(this->scale);
            									}
            									else {
HXLINE( 144)										return;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 145)		::String _hx_tmp = this->spriteSheet->currentBehavior->name;
HXDLIN( 145)		if ((_hx_tmp != ((this->currentAction + HX_("_",5f,00,00,00)) + this->phase))) {
HXLINE( 145)			 ::spritesheet::AnimatedSprite _hx_tmp1 = this->spriteSheet;
HXDLIN( 145)			_hx_tmp1->showBehavior(((this->currentAction + HX_("_",5f,00,00,00)) + this->phase),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoUnit_obj,lookAtDir,(void))


hx::ObjectPtr< IsoUnit_obj > IsoUnit_obj::__new() {
	hx::ObjectPtr< IsoUnit_obj > __this = new IsoUnit_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IsoUnit_obj > IsoUnit_obj::__alloc(hx::Ctx *_hx_ctx) {
	IsoUnit_obj *__this = (IsoUnit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IsoUnit_obj), true, "com.lak.entities.IsoUnit"));
	*(void **)__this = IsoUnit_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IsoUnit_obj::IsoUnit_obj()
{
}

void IsoUnit_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IsoUnit);
	HX_MARK_MEMBER_NAME(nodeTab,"nodeTab");
	HX_MARK_MEMBER_NAME(pCurr,"pCurr");
	HX_MARK_MEMBER_NAME(pEnd,"pEnd");
	HX_MARK_MEMBER_NAME(lastNode,"lastNode");
	HX_MARK_MEMBER_NAME(xmovement,"xmovement");
	HX_MARK_MEMBER_NAME(ymovement,"ymovement");
	 ::com::lak::entities::IsoObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IsoUnit_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nodeTab,"nodeTab");
	HX_VISIT_MEMBER_NAME(pCurr,"pCurr");
	HX_VISIT_MEMBER_NAME(pEnd,"pEnd");
	HX_VISIT_MEMBER_NAME(lastNode,"lastNode");
	HX_VISIT_MEMBER_NAME(xmovement,"xmovement");
	HX_VISIT_MEMBER_NAME(ymovement,"ymovement");
	 ::com::lak::entities::IsoObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IsoUnit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pEnd") ) { return hx::Val( pEnd); }
		if (HX_FIELD_EQ(inName,"goTo") ) { return hx::Val( goTo_dyn()); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pCurr") ) { return hx::Val( pCurr); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nodeTab") ) { return hx::Val( nodeTab); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastNode") ) { return hx::Val( lastNode); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xmovement") ) { return hx::Val( xmovement); }
		if (HX_FIELD_EQ(inName,"ymovement") ) { return hx::Val( ymovement); }
		if (HX_FIELD_EQ(inName,"moveAtDir") ) { return hx::Val( moveAtDir_dyn()); }
		if (HX_FIELD_EQ(inName,"lookAtDir") ) { return hx::Val( lookAtDir_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onStateChange") ) { return hx::Val( onStateChange_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IsoUnit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pEnd") ) { pEnd=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pCurr") ) { pCurr=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nodeTab") ) { nodeTab=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastNode") ) { lastNode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xmovement") ) { xmovement=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ymovement") ) { ymovement=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IsoUnit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("nodeTab","\x73","\xb5","\xea","\x16"));
	outFields->push(HX_HCSTRING("pCurr","\x82","\x6f","\x83","\xa9"));
	outFields->push(HX_HCSTRING("pEnd","\x4b","\xa1","\x3c","\x4a"));
	outFields->push(HX_HCSTRING("lastNode","\x78","\x23","\x53","\xdc"));
	outFields->push(HX_HCSTRING("xmovement","\xa7","\xbd","\x60","\xe1"));
	outFields->push(HX_HCSTRING("ymovement","\xa8","\x26","\x52","\xb4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IsoUnit_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(IsoUnit_obj,nodeTab),HX_HCSTRING("nodeTab","\x73","\xb5","\xea","\x16")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(IsoUnit_obj,pCurr),HX_HCSTRING("pCurr","\x82","\x6f","\x83","\xa9")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(IsoUnit_obj,pEnd),HX_HCSTRING("pEnd","\x4b","\xa1","\x3c","\x4a")},
	{hx::fsString,(int)offsetof(IsoUnit_obj,lastNode),HX_HCSTRING("lastNode","\x78","\x23","\x53","\xdc")},
	{hx::fsFloat,(int)offsetof(IsoUnit_obj,xmovement),HX_HCSTRING("xmovement","\xa7","\xbd","\x60","\xe1")},
	{hx::fsFloat,(int)offsetof(IsoUnit_obj,ymovement),HX_HCSTRING("ymovement","\xa8","\x26","\x52","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IsoUnit_obj_sStaticStorageInfo = 0;
#endif

static ::String IsoUnit_obj_sMemberFields[] = {
	HX_HCSTRING("nodeTab","\x73","\xb5","\xea","\x16"),
	HX_HCSTRING("pCurr","\x82","\x6f","\x83","\xa9"),
	HX_HCSTRING("pEnd","\x4b","\xa1","\x3c","\x4a"),
	HX_HCSTRING("lastNode","\x78","\x23","\x53","\xdc"),
	HX_HCSTRING("xmovement","\xa7","\xbd","\x60","\xe1"),
	HX_HCSTRING("ymovement","\xa8","\x26","\x52","\xb4"),
	HX_HCSTRING("goTo","\xc3","\x7d","\x69","\x44"),
	HX_HCSTRING("onStateChange","\x82","\xfb","\xe5","\x94"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("moveAtDir","\x49","\xc9","\x85","\xe4"),
	HX_HCSTRING("lookAtDir","\x3b","\x4b","\xa2","\x54"),
	::String(null()) };

static void IsoUnit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IsoUnit_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IsoUnit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IsoUnit_obj::__mClass,"__mClass");
};

#endif

hx::Class IsoUnit_obj::__mClass;

void IsoUnit_obj::__register()
{
	hx::Object *dummy = new IsoUnit_obj;
	IsoUnit_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.entities.IsoUnit","\x81","\xf7","\xce","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IsoUnit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IsoUnit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IsoUnit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IsoUnit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IsoUnit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IsoUnit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace entities
