// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Astar
#include <com/lak/simulator/Astar.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_LevelManager
#include <com/lak/simulator/manager/LevelManager.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_22_findPath,"com.lak.simulator.Astar","findPath",0x9c49f348,"com.lak.simulator.Astar.findPath","com/lak/simulator/Astar.hx",22,0xea318e5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_32_diagonal,"com.lak.simulator.Astar","diagonal",0xc5fc85bf,"com.lak.simulator.Astar.diagonal","com/lak/simulator/Astar.hx",32,0xea318e5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_41_manhattan,"com.lak.simulator.Astar","manhattan",0x8f3d8ff6,"com.lak.simulator.Astar.manhattan","com/lak/simulator/Astar.hx",41,0xea318e5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_44_heuristic,"com.lak.simulator.Astar","heuristic",0x12839ac0,"com.lak.simulator.Astar.heuristic","com/lak/simulator/Astar.hx",44,0xea318e5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_14_boot,"com.lak.simulator.Astar","boot",0x44e8d7fc,"com.lak.simulator.Astar.boot","com/lak/simulator/Astar.hx",14,0xea318e5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bcedcf0b6109907e_15_boot,"com.lak.simulator.Astar","boot",0x44e8d7fc,"com.lak.simulator.Astar.boot","com/lak/simulator/Astar.hx",15,0xea318e5d)
namespace com{
namespace lak{
namespace simulator{

void Astar_obj::__construct() { }

Dynamic Astar_obj::__CreateEmpty() { return new Astar_obj; }

void *Astar_obj::_hx_vtable = 0;

Dynamic Astar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Astar_obj > _hx_result = new Astar_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Astar_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5f215b04;
}

Float Astar_obj::_straightCost;

Float Astar_obj::_diagCost;

 ::com::lak::entities::IsoUnit Astar_obj::_unit;

void Astar_obj::findPath( ::com::lak::entities::IsoUnit unit){
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_22_findPath)
HXLINE(  23)		::com::lak::simulator::Astar_obj::_unit = unit;
HXLINE(  24)		::com::lak::simulator::manager::LevelManager_obj::instance->get9Nodes(::com::lak::simulator::Astar_obj::_unit);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Astar_obj,findPath,(void))

Float Astar_obj::diagonal( ::openfl::geom::Point node, ::openfl::geom::Point endNode){
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_32_diagonal)
HXLINE(  33)		Float dx = ::Math_obj::abs((node->x - endNode->x));
HXLINE(  34)		Float dy = ::Math_obj::abs((node->y - endNode->y));
HXLINE(  35)		Float diag = ::Math_obj::min(dx,dy);
HXLINE(  36)		Float straight = (dx + dy);
HXLINE(  37)		Float _hx_tmp = (::com::lak::simulator::Astar_obj::_diagCost * diag);
HXDLIN(  37)		Float _hx_tmp1 = ::com::lak::simulator::Astar_obj::_straightCost;
HXDLIN(  37)		return (_hx_tmp + (_hx_tmp1 * (straight - ((int)2 * diag))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Astar_obj,diagonal,return )

Float Astar_obj::manhattan( ::openfl::geom::Point newNode, ::openfl::geom::Point end){
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_41_manhattan)
HXLINE(  41)		Float _hx_tmp = ::Math_obj::abs((newNode->x - end->x));
HXDLIN(  41)		return (_hx_tmp + ::Math_obj::abs((newNode->y - end->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Astar_obj,manhattan,return )

int Astar_obj::heuristic( ::openfl::geom::Point pt1, ::openfl::geom::Point pt2){
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_44_heuristic)
HXLINE(  44)		Float _hx_tmp = ::Math_obj::pow((pt1->x - pt2->x),(int)2);
HXDLIN(  44)		return ::Math_obj::floor(::Math_obj::sqrt((_hx_tmp + ::Math_obj::pow((pt1->y - pt2->y),(int)2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Astar_obj,heuristic,return )


Astar_obj::Astar_obj()
{
}

bool Astar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_unit") ) { outValue = _unit; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findPath") ) { outValue = findPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"diagonal") ) { outValue = diagonal_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_diagCost") ) { outValue = _diagCost; return true; }
		if (HX_FIELD_EQ(inName,"manhattan") ) { outValue = manhattan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"heuristic") ) { outValue = heuristic_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_straightCost") ) { outValue = _straightCost; return true; }
	}
	return false;
}

bool Astar_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_unit") ) { _unit=ioValue.Cast<  ::com::lak::entities::IsoUnit >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_diagCost") ) { _diagCost=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_straightCost") ) { _straightCost=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Astar_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Astar_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Astar_obj::_straightCost,HX_HCSTRING("_straightCost","\x46","\xe7","\xe1","\x1b")},
	{hx::fsFloat,(void *) &Astar_obj::_diagCost,HX_HCSTRING("_diagCost","\xf7","\xea","\x19","\xf1")},
	{hx::fsObject /*::com::lak::entities::IsoUnit*/ ,(void *) &Astar_obj::_unit,HX_HCSTRING("_unit","\x63","\xe6","\xba","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Astar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Astar_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Astar_obj::_straightCost,"_straightCost");
	HX_MARK_MEMBER_NAME(Astar_obj::_diagCost,"_diagCost");
	HX_MARK_MEMBER_NAME(Astar_obj::_unit,"_unit");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Astar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Astar_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Astar_obj::_straightCost,"_straightCost");
	HX_VISIT_MEMBER_NAME(Astar_obj::_diagCost,"_diagCost");
	HX_VISIT_MEMBER_NAME(Astar_obj::_unit,"_unit");
};

#endif

hx::Class Astar_obj::__mClass;

static ::String Astar_obj_sStaticFields[] = {
	HX_HCSTRING("_straightCost","\x46","\xe7","\xe1","\x1b"),
	HX_HCSTRING("_diagCost","\xf7","\xea","\x19","\xf1"),
	HX_HCSTRING("_unit","\x63","\xe6","\xba","\x00"),
	HX_HCSTRING("findPath","\x7e","\xf2","\xe5","\x9c"),
	HX_HCSTRING("diagonal","\xf5","\x84","\x98","\xc6"),
	HX_HCSTRING("manhattan","\x00","\xe0","\x20","\x17"),
	HX_HCSTRING("heuristic","\xca","\xea","\x66","\x9a"),
	::String(null())
};

void Astar_obj::__register()
{
	hx::Object *dummy = new Astar_obj;
	Astar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.Astar","\xe4","\xa0","\xdb","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Astar_obj::__GetStatic;
	__mClass->mSetStaticField = &Astar_obj::__SetStatic;
	__mClass->mMarkFunc = Astar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Astar_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Astar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Astar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Astar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Astar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Astar_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_14_boot)
HXLINE(  14)		_straightCost = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bcedcf0b6109907e_15_boot)
HXLINE(  15)		_diagCost = ((Float)1);
            	}
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
