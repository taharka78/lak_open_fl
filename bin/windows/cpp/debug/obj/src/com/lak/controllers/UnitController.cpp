// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_controllers_UnitController
#include <com/lak/controllers/UnitController.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Simulator
#include <com/lak/simulator/Simulator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b9aa9ffb8f57b673_13_create,"com.lak.controllers.UnitController","create",0x4dfb05ee,"com.lak.controllers.UnitController.create","com/lak/controllers/UnitController.hx",13,0x43f7261f)
HX_LOCAL_STACK_FRAME(_hx_pos_b9aa9ffb8f57b673_16_attack,"com.lak.controllers.UnitController","attack",0xb1fb9aba,"com.lak.controllers.UnitController.attack","com/lak/controllers/UnitController.hx",16,0x43f7261f)
HX_LOCAL_STACK_FRAME(_hx_pos_b9aa9ffb8f57b673_20_walk,"com.lak.controllers.UnitController","walk",0x2a63fb7b,"com.lak.controllers.UnitController.walk","com/lak/controllers/UnitController.hx",20,0x43f7261f)
HX_LOCAL_STACK_FRAME(_hx_pos_b9aa9ffb8f57b673_24_die,"com.lak.controllers.UnitController","die",0x8fa1b30e,"com.lak.controllers.UnitController.die","com/lak/controllers/UnitController.hx",24,0x43f7261f)
namespace com{
namespace lak{
namespace controllers{

void UnitController_obj::__construct() { }

Dynamic UnitController_obj::__CreateEmpty() { return new UnitController_obj; }

void *UnitController_obj::_hx_vtable = 0;

Dynamic UnitController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnitController_obj > _hx_result = new UnitController_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UnitController_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5981bafe;
}

void UnitController_obj::create(::String unitType,hx::Null< int >  __o_posX,hx::Null< int >  __o_posY){
int posX = __o_posX.Default(100);
int posY = __o_posY.Default(100);
            	HX_STACKFRAME(&_hx_pos_b9aa9ffb8f57b673_13_create)
HXLINE(  13)		::com::lak::simulator::Simulator_obj::instance->initilizeUnit(unitType,posX,posY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UnitController_obj,create,(void))

void UnitController_obj::attack( ::com::lak::entities::IsoUnit unit){
            	HX_STACKFRAME(&_hx_pos_b9aa9ffb8f57b673_16_attack)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitController_obj,attack,(void))

void UnitController_obj::walk( ::com::lak::entities::IsoUnit unit){
            	HX_STACKFRAME(&_hx_pos_b9aa9ffb8f57b673_20_walk)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitController_obj,walk,(void))

void UnitController_obj::die( ::com::lak::entities::IsoUnit unit){
            	HX_STACKFRAME(&_hx_pos_b9aa9ffb8f57b673_24_die)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitController_obj,die,(void))


UnitController_obj::UnitController_obj()
{
}

bool UnitController_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"die") ) { outValue = die_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { outValue = walk_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"attack") ) { outValue = attack_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UnitController_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *UnitController_obj_sStaticStorageInfo = 0;
#endif

static void UnitController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnitController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnitController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnitController_obj::__mClass,"__mClass");
};

#endif

hx::Class UnitController_obj::__mClass;

static ::String UnitController_obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("attack","\xc8","\xfb","\x0f","\xe0"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("die","\x40","\x3d","\x4c","\x00"),
	::String(null())
};

void UnitController_obj::__register()
{
	hx::Object *dummy = new UnitController_obj;
	UnitController_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.controllers.UnitController","\x3c","\x57","\xeb","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UnitController_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UnitController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UnitController_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< UnitController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnitController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnitController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnitController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace controllers
