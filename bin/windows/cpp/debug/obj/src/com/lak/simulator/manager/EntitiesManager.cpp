// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_EntitiesManager
#include <com/lak/simulator/manager/EntitiesManager.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_166f9e0e7985c433_12_new,"com.lak.simulator.manager.EntitiesManager","new",0x30ded58e,"com.lak.simulator.manager.EntitiesManager.new","com/lak/simulator/manager/EntitiesManager.hx",12,0x02d7aca6)
HX_LOCAL_STACK_FRAME(_hx_pos_166f9e0e7985c433_30_run,"com.lak.simulator.manager.EntitiesManager","run",0x30e1ec79,"com.lak.simulator.manager.EntitiesManager.run","com/lak/simulator/manager/EntitiesManager.hx",30,0x02d7aca6)
HX_LOCAL_STACK_FRAME(_hx_pos_166f9e0e7985c433_42_updateViewBounds,"com.lak.simulator.manager.EntitiesManager","updateViewBounds",0x63b12c35,"com.lak.simulator.manager.EntitiesManager.updateViewBounds","com/lak/simulator/manager/EntitiesManager.hx",42,0x02d7aca6)
HX_LOCAL_STACK_FRAME(_hx_pos_166f9e0e7985c433_54_manageShadow,"com.lak.simulator.manager.EntitiesManager","manageShadow",0x05078137,"com.lak.simulator.manager.EntitiesManager.manageShadow","com/lak/simulator/manager/EntitiesManager.hx",54,0x02d7aca6)
HX_LOCAL_STACK_FRAME(_hx_pos_166f9e0e7985c433_63_manageVisibility,"com.lak.simulator.manager.EntitiesManager","manageVisibility",0xdf215ea9,"com.lak.simulator.manager.EntitiesManager.manageVisibility","com/lak/simulator/manager/EntitiesManager.hx",63,0x02d7aca6)
HX_LOCAL_STACK_FRAME(_hx_pos_166f9e0e7985c433_85_onScreen,"com.lak.simulator.manager.EntitiesManager","onScreen",0x4bd7a5fd,"com.lak.simulator.manager.EntitiesManager.onScreen","com/lak/simulator/manager/EntitiesManager.hx",85,0x02d7aca6)
namespace com{
namespace lak{
namespace simulator{
namespace manager{

void EntitiesManager_obj::__construct( ::com::lak::IsoWorld _world){
            	HX_GC_STACKFRAME(&_hx_pos_166f9e0e7985c433_12_new)
HXLINE(  16)		this->screen =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  15)		this->pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  22)		this->world = _world;
HXLINE(  23)		this->updateViewBounds();
            	}

Dynamic EntitiesManager_obj::__CreateEmpty() { return new EntitiesManager_obj; }

void *EntitiesManager_obj::_hx_vtable = 0;

Dynamic EntitiesManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EntitiesManager_obj > _hx_result = new EntitiesManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EntitiesManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c35d8a6;
}

void EntitiesManager_obj::run(int delta){
            	HX_STACKFRAME(&_hx_pos_166f9e0e7985c433_30_run)
HXLINE(  30)		int _g = (int)0;
HXDLIN(  30)		::Array< ::Dynamic> _g1 = this->world->worldObject;
HXDLIN(  30)		while((_g < _g1->length)){
HXLINE(  30)			 ::com::lak::entities::IsoObject obj = _g1->__get(_g).StaticCast<  ::com::lak::entities::IsoObject >();
HXDLIN(  30)			_g = (_g + (int)1);
HXLINE(  31)			this->pt->x = obj->get_x();
HXLINE(  32)			this->pt->y = obj->get_y();
HXLINE(  33)			this->manageVisibility(obj);
HXLINE(  34)			obj->update(delta);
HXLINE(  35)			bool _hx_tmp;
HXDLIN(  35)			if (::Std_obj::is(obj,hx::ClassOf< ::com::lak::entities::IsoUnit >())) {
HXLINE(  35)				_hx_tmp = (obj->get_visible() == true);
            			}
            			else {
HXLINE(  35)				_hx_tmp = false;
            			}
HXDLIN(  35)			if (_hx_tmp) {
HXLINE(  35)				this->manageShadow(obj);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EntitiesManager_obj,run,(void))

void EntitiesManager_obj::updateViewBounds(){
            	HX_STACKFRAME(&_hx_pos_166f9e0e7985c433_42_updateViewBounds)
HXLINE(  43)		this->screen->width = this->world->VIEW_WIDTH;
HXLINE(  44)		this->screen->height = this->world->VIEW_HEIGHT;
HXLINE(  45)		this->screen->x = this->world->OFFSET_LIGNE_WORLD;
HXLINE(  46)		this->screen->y = this->world->OFFSET_COLONNE_WORLD;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EntitiesManager_obj,updateViewBounds,(void))

void EntitiesManager_obj::manageShadow( ::com::lak::entities::IsoObject obj){
            	HX_STACKFRAME(&_hx_pos_166f9e0e7985c433_54_manageShadow)
HXLINE(  54)		bool _hx_tmp = obj->get_visible();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EntitiesManager_obj,manageShadow,(void))

void EntitiesManager_obj::manageVisibility( ::com::lak::entities::IsoObject obj){
            	HX_STACKFRAME(&_hx_pos_166f9e0e7985c433_63_manageVisibility)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EntitiesManager_obj,manageVisibility,(void))

bool EntitiesManager_obj::onScreen( ::openfl::geom::Point pt){
            	HX_STACKFRAME(&_hx_pos_166f9e0e7985c433_85_onScreen)
HXLINE(  86)		bool _hx_tmp;
HXDLIN(  86)		bool _hx_tmp1;
HXDLIN(  86)		bool _hx_tmp2;
HXDLIN(  86)		Float pt1 = pt->x;
HXDLIN(  86)		if ((pt1 <= (-(this->screen->x) + this->screen->width))) {
HXLINE(  86)			_hx_tmp2 = (pt->x >= -(this->screen->x));
            		}
            		else {
HXLINE(  86)			_hx_tmp2 = false;
            		}
HXDLIN(  86)		if (_hx_tmp2) {
HXLINE(  86)			Float pt2 = pt->y;
HXDLIN(  86)			_hx_tmp1 = (pt2 <= (-(this->screen->y) + this->screen->height));
            		}
            		else {
HXLINE(  86)			_hx_tmp1 = false;
            		}
HXDLIN(  86)		if (_hx_tmp1) {
HXLINE(  86)			_hx_tmp = (pt->y >= -(this->screen->y));
            		}
            		else {
HXLINE(  86)			_hx_tmp = false;
            		}
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  86)			return true;
            		}
HXLINE(  87)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EntitiesManager_obj,onScreen,return )


hx::ObjectPtr< EntitiesManager_obj > EntitiesManager_obj::__new( ::com::lak::IsoWorld _world) {
	hx::ObjectPtr< EntitiesManager_obj > __this = new EntitiesManager_obj();
	__this->__construct(_world);
	return __this;
}

hx::ObjectPtr< EntitiesManager_obj > EntitiesManager_obj::__alloc(hx::Ctx *_hx_ctx, ::com::lak::IsoWorld _world) {
	EntitiesManager_obj *__this = (EntitiesManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EntitiesManager_obj), true, "com.lak.simulator.manager.EntitiesManager"));
	*(void **)__this = EntitiesManager_obj::_hx_vtable;
	__this->__construct(_world);
	return __this;
}

EntitiesManager_obj::EntitiesManager_obj()
{
}

void EntitiesManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EntitiesManager);
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(pt,"pt");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_END_CLASS();
}

void EntitiesManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(pt,"pt");
	HX_VISIT_MEMBER_NAME(screen,"screen");
}

hx::Val EntitiesManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { return hx::Val( pt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"screen") ) { return hx::Val( screen); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onScreen") ) { return hx::Val( onScreen_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manageShadow") ) { return hx::Val( manageShadow_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateViewBounds") ) { return hx::Val( updateViewBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"manageVisibility") ) { return hx::Val( manageVisibility_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EntitiesManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { pt=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::com::lak::IsoWorld >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EntitiesManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("pt","\x04","\x62","\x00","\x00"));
	outFields->push(HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EntitiesManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::lak::IsoWorld*/ ,(int)offsetof(EntitiesManager_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(EntitiesManager_obj,pt),HX_HCSTRING("pt","\x04","\x62","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(EntitiesManager_obj,screen),HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EntitiesManager_obj_sStaticStorageInfo = 0;
#endif

static ::String EntitiesManager_obj_sMemberFields[] = {
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("pt","\x04","\x62","\x00","\x00"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("updateViewBounds","\x23","\x56","\x56","\xf1"),
	HX_HCSTRING("manageShadow","\x25","\x9c","\x39","\x1d"),
	HX_HCSTRING("manageVisibility","\x97","\x88","\xc6","\x6c"),
	HX_HCSTRING("onScreen","\xeb","\x31","\x0a","\x27"),
	::String(null()) };

static void EntitiesManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EntitiesManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EntitiesManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EntitiesManager_obj::__mClass,"__mClass");
};

#endif

hx::Class EntitiesManager_obj::__mClass;

void EntitiesManager_obj::__register()
{
	hx::Object *dummy = new EntitiesManager_obj;
	EntitiesManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.manager.EntitiesManager","\x9c","\xb6","\x8d","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EntitiesManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EntitiesManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EntitiesManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EntitiesManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EntitiesManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EntitiesManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace manager
