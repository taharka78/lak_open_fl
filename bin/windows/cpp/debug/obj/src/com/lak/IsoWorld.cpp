// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_LevelManager
#include <com/lak/simulator/manager/LevelManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_SpritesheetManager
#include <com/lak/simulator/manager/SpritesheetManager.h>
#endif
#ifndef INCLUDED_com_lak_utils_GameUtils
#include <com/lak/utils/GameUtils.h>
#endif
#ifndef INCLUDED_com_lak_utils_IsoUtils
#include <com/lak/utils/IsoUtils.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif
#ifndef INCLUDED_spritesheet_data_SpritesheetFrame
#include <spritesheet/data/SpritesheetFrame.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_28_new,"com.lak.IsoWorld","new",0x6f413c44,"com.lak.IsoWorld.new","com/lak/IsoWorld.hx",28,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_88_onWorldaddedToStage,"com.lak.IsoWorld","onWorldaddedToStage",0x1de78b7a,"com.lak.IsoWorld.onWorldaddedToStage","com/lak/IsoWorld.hx",88,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_104_worldSize,"com.lak.IsoWorld","worldSize",0xb9dd6317,"com.lak.IsoWorld.worldSize","com/lak/IsoWorld.hx",104,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_137_setupMapData,"com.lak.IsoWorld","setupMapData",0x1373f585,"com.lak.IsoWorld.setupMapData","com/lak/IsoWorld.hx",137,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_172_addChildToWorld,"com.lak.IsoWorld","addChildToWorld",0x1c562a40,"com.lak.IsoWorld.addChildToWorld","com/lak/IsoWorld.hx",172,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_186_setupWorld,"com.lak.IsoWorld","setupWorld",0xafbb4b31,"com.lak.IsoWorld.setupWorld","com/lak/IsoWorld.hx",186,0x2e2b8e6a)
HX_LOCAL_STACK_FRAME(_hx_pos_19ac50636e1b7f7d_208_drawView,"com.lak.IsoWorld","drawView",0x11a5d625,"com.lak.IsoWorld.drawView","com/lak/IsoWorld.hx",208,0x2e2b8e6a)
namespace com{
namespace lak{

void IsoWorld_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_28_new)
HXLINE(  72)		this->worldObject = ::Array_obj< ::Dynamic>::__new();
HXLINE(  71)		this->pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  67)		this->tileW = (int)96;
HXLINE(  66)		this->tileH = (int)48;
HXLINE(  62)		this->OFFSET_COLONNE_WORLD = (int)0;
HXLINE(  61)		this->OFFSET_LIGNE_WORLD = (int)0;
HXLINE(  59)		this->curentLevel = HX_("0-0",93,93,24,00);
HXLINE(  57)		this->offsetYCost = (int)0;
HXLINE(  56)		this->offsetXCost = (int)0;
HXLINE(  48)		this->levelData = ::Array_obj< ::Dynamic>::__new();
HXLINE(  39)		this->mtrx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  33)		this->tilesArray = ::Array_obj< ::Dynamic>::__new();
HXLINE(  80)		super::__construct();
HXLINE(  81)		::com::lak::IsoWorld_obj::instance = hx::ObjectPtr<OBJ_>(this);
HXLINE(  82)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onWorldaddedToStage_dyn(),null(),null(),null());
            	}

Dynamic IsoWorld_obj::__CreateEmpty() { return new IsoWorld_obj; }

void *IsoWorld_obj::_hx_vtable = 0;

Dynamic IsoWorld_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IsoWorld_obj > _hx_result = new IsoWorld_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IsoWorld_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x7fa8031a;
		}
	}
}

void IsoWorld_obj::onWorldaddedToStage( ::openfl::events::Event e){
            	HX_GC_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_88_onWorldaddedToStage)
HXLINE(  89)		this->worldGrass = ::Main_obj::instance->sprSheetManager->getSpritesheet(HX_("world",52,96,64,ce),HX_("grass",f6,11,ea,99));
HXLINE(  91)		this->COLONNE_VISIBLE_OFFSET = (int)0;
HXLINE(  92)		this->LIGNE_VISIBLE_OFFSET = (int)0;
HXLINE(  94)		this->halfH = ((int)this->tileH >> (int)(int)1);
HXLINE(  95)		this->halfW = ((int)this->tileW >> (int)(int)1);
HXLINE(  96)		this->levelManager =  ::com::lak::simulator::manager::LevelManager_obj::__alloc( HX_CTX );
HXLINE(  97)		this->worldSize(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoWorld_obj,onWorldaddedToStage,(void))

void IsoWorld_obj::worldSize(hx::Null< bool >  __o__first){
bool _first = __o__first.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_104_worldSize)
HXLINE( 105)		this->VIEW_WIDTH = this->stage->stageWidth;
HXLINE( 106)		this->VIEW_HEIGHT = this->stage->stageHeight;
HXLINE( 108)		this->PART_NUM_TILE_W = (int)100;
HXLINE( 109)		this->PART_NUM_TILE_H = (int)100;
HXLINE( 111)		this->NB_COLONNE_WORLD = this->PART_NUM_TILE_W;
HXLINE( 112)		this->NB_LIGNE_WORLD = this->PART_NUM_TILE_H;
HXLINE( 114)		this->NB_TILE_W = (::Math_obj::floor(((Float)this->VIEW_WIDTH / (Float)this->tileW)) + (int)2);
HXLINE( 115)		this->NB_TILE_H = (::Math_obj::floor(((Float)this->VIEW_HEIGHT / (Float)this->halfH)) + (int)2);
HXLINE( 121)		this->setupMapData(this->curentLevel,(int)1,(int)1,true);
HXLINE( 122)		if ((_first == false)) {
HXLINE( 122)			this->stage->removeChild(this->floor);
            		}
HXLINE( 123)		int _hx_tmp = (this->VIEW_WIDTH + this->tileW);
HXDLIN( 123)		this->groundCanvas =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,(this->VIEW_HEIGHT + this->tileH),null(),null());
HXLINE( 125)		this->floor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->groundCanvas,null(),null());
HXLINE( 126)		this->floor->set_x(-(this->halfW));
HXLINE( 127)		this->floor->set_y(-(this->halfH));
HXLINE( 128)		this->stage->addChild(this->floor);
HXLINE( 129)		this->stage->setChildIndex(this->floor,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoWorld_obj,worldSize,(void))

void IsoWorld_obj::setupMapData(::String __o_partNum,hx::Null< int >  __o_sensX,hx::Null< int >  __o_sensY,hx::Null< bool >  __o_creation){
::String partNum = __o_partNum.Default(HX_HCSTRING("0-0","\x93","\x93","\x24","\x00"));
int sensX = __o_sensX.Default(1);
int sensY = __o_sensY.Default(1);
bool creation = __o_creation.Default(false);
            	HX_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_137_setupMapData)
HXLINE( 138)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 138)		::String _hx_tmp1;
HXDLIN( 138)		if ((sensY == (int)-1)) {
HXLINE( 138)			_hx_tmp1 = HX_("vers le haut",2f,f5,da,4e);
            		}
            		else {
HXLINE( 138)			_hx_tmp1 = HX_("vers le bas ",63,ab,e3,4a);
            		}
HXDLIN( 138)		::String _hx_tmp2;
HXDLIN( 138)		if ((sensX == (int)-1)) {
HXLINE( 138)			_hx_tmp2 = HX_("vers la gauche",c0,2e,34,a8);
            		}
            		else {
HXLINE( 138)			_hx_tmp2 = HX_("vers la droite ",2c,5f,5e,64);
            		}
HXDLIN( 138)		_hx_tmp(((((((HX_("map : part_",22,4f,75,1f) + partNum) + HX_(".txt",02,3f,c0,1e)) + HX_(" SENSY ==> ",60,09,ee,62)) + _hx_tmp1) + HX_(" SENSX ==>",3f,4a,ee,73)) + _hx_tmp2),hx::SourceInfo(HX_("IsoWorld.hx",f1,9d,b2,15),138,HX_("com.lak.IsoWorld",52,0a,5d,a5),HX_("setupMapData",e9,fd,93,e5)));
HXLINE( 139)		if ((sensX == (int)1)) {
HXLINE( 140)			int _hx_tmp3 = this->OFFSET_LIGNE_WORLD;
HXDLIN( 140)			int _hx_tmp4 = this->PART_NUM_TILE_W;
HXDLIN( 140)			this->LIGNE_VISIBLE_OFFSET = (_hx_tmp3 - (_hx_tmp4 * ::Std_obj::parseFloat(partNum.split(HX_("-",2d,00,00,00))->__get((int)0))));
HXLINE( 141)			if ((this->LIGNE_VISIBLE_OFFSET < (int)0)) {
HXLINE( 141)				this->LIGNE_VISIBLE_OFFSET = (int)0;
            			}
            		}
            		else {
HXLINE( 142)			if ((sensX == (int)-1)) {
HXLINE( 143)				this->LIGNE_VISIBLE_OFFSET = this->OFFSET_LIGNE_WORLD;
            			}
            		}
HXLINE( 146)		if ((sensY == (int)1)) {
HXLINE( 147)			int _hx_tmp5 = this->OFFSET_COLONNE_WORLD;
HXDLIN( 147)			int _hx_tmp6 = this->PART_NUM_TILE_H;
HXDLIN( 147)			this->COLONNE_VISIBLE_OFFSET = (_hx_tmp5 - (_hx_tmp6 * ::Std_obj::parseFloat(partNum.split(HX_("-",2d,00,00,00))->__get((int)1))));
HXLINE( 148)			if ((this->COLONNE_VISIBLE_OFFSET < (int)0)) {
HXLINE( 148)				this->COLONNE_VISIBLE_OFFSET = (int)0;
            			}
            		}
            		else {
HXLINE( 150)			if ((sensY == (int)-1)) {
HXLINE( 150)				this->COLONNE_VISIBLE_OFFSET = this->OFFSET_COLONNE_WORLD;
HXDLIN( 150)				this->LIGNE_VISIBLE_OFFSET = this->OFFSET_LIGNE_WORLD;
            			}
            		}
HXLINE( 152)		if ((sensX == (int)1)) {
HXLINE( 153)			int _hx_tmp7 = this->OFFSET_LIGNE_WORLD;
HXDLIN( 153)			int _hx_tmp8 = this->PART_NUM_TILE_W;
HXDLIN( 153)			this->LIGNE_VISIBLE_OFFSET = (_hx_tmp7 - (_hx_tmp8 * ::Std_obj::parseFloat(partNum.split(HX_("-",2d,00,00,00))->__get((int)0))));
HXLINE( 154)			if ((this->LIGNE_VISIBLE_OFFSET < (int)0)) {
HXLINE( 154)				this->LIGNE_VISIBLE_OFFSET = (int)0;
            			}
            		}
            		else {
HXLINE( 155)			if ((sensX == (int)-1)) {
HXLINE( 157)				this->LIGNE_VISIBLE_OFFSET = this->OFFSET_LIGNE_WORLD;
            			}
            		}
HXLINE( 159)		if ((sensY == (int)1)) {
HXLINE( 159)			 ::com::lak::IsoWorld _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)			_hx_tmp9->NB_LIGNE_WORLD = (_hx_tmp9->NB_LIGNE_WORLD + this->PART_NUM_TILE_H);
            		}
            		else {
HXLINE( 159)			 ::com::lak::IsoWorld _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)			_hx_tmp10->NB_LIGNE_WORLD = (_hx_tmp10->NB_LIGNE_WORLD - this->PART_NUM_TILE_H);
            		}
HXLINE( 160)		if ((sensX == (int)1)) {
HXLINE( 160)			 ::com::lak::IsoWorld _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)			_hx_tmp11->NB_COLONNE_WORLD = (_hx_tmp11->NB_COLONNE_WORLD + this->PART_NUM_TILE_W);
            		}
            		else {
HXLINE( 160)			 ::com::lak::IsoWorld _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)			_hx_tmp12->NB_COLONNE_WORLD = (_hx_tmp12->NB_COLONNE_WORLD - this->PART_NUM_TILE_W);
            		}
HXLINE( 162)		 ::com::lak::simulator::manager::LevelManager _hx_tmp13 = this->levelManager;
HXDLIN( 162)		this->levelData = _hx_tmp13->mapPartArray(((HX_("part_",0c,91,55,bd) + partNum) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 163)		if ((creation == true)) {
HXLINE( 163)			this->setupWorld();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(IsoWorld_obj,setupMapData,(void))

void IsoWorld_obj::addChildToWorld( ::com::lak::entities::IsoObject child){
            	HX_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_172_addChildToWorld)
HXLINE( 173)		int len = this->worldObject->length;
HXLINE( 174)		this->worldObject->insert(len,child);
HXLINE( 175)		this->pt->x = child->get_x();
HXLINE( 176)		this->pt->y = child->get_y();
HXLINE( 178)		if (::Std_obj::is(child,hx::ClassOf< ::com::lak::entities::IsoUnit >())) {
HXLINE( 178)			child->scale = child->get_scaleX();
            		}
HXLINE( 179)		this->addChild(child);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IsoWorld_obj,addChildToWorld,(void))

void IsoWorld_obj::setupWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_186_setupWorld)
HXLINE( 187)		int wRowCpt = (int)0;
HXLINE( 188)		int wColViewCpt = (int)0;
HXLINE( 189)		 ::openfl::geom::Point pos =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 190)		wRowCpt = (int)0;
HXLINE( 192)		this->tilesArray = ::Array_obj< ::Dynamic>::__new();
HXLINE( 193)		while((wRowCpt < this->NB_TILE_W)){
HXLINE( 194)			wColViewCpt = (int)0;
HXLINE( 195)			while((wColViewCpt < this->NB_TILE_H)){
HXLINE( 197)				if (hx::IsNull( ::cpp::VirtualArray( this->tilesArray->__get(wRowCpt)) )) {
HXLINE( 197)					::Array< ::Dynamic> _hx_tmp = this->tilesArray;
HXDLIN( 197)					_hx_tmp[wRowCpt] = ::cpp::VirtualArray_obj::__new();
            				}
HXLINE( 198)				::cpp::VirtualArray _hx_tmp1 = ::cpp::VirtualArray( this->tilesArray->__get(wRowCpt));
HXDLIN( 198)				_hx_tmp1->push( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("index",12,9b,14,be),(int)-1)
            					->setFixed(1,HX_("ndType",10,d2,35,c7),HX_("none",b8,12,0a,49))
            					->setFixed(2,HX_("position",a9,a0,fa,ca),::com::lak::utils::IsoUtils_obj::mapTilePosition( ::openfl::geom::Point_obj::__alloc( HX_CTX ,wColViewCpt,wRowCpt),this->tileW,this->tileH))));
HXLINE( 199)				wColViewCpt = (wColViewCpt + (int)1);
            			}
HXLINE( 201)			wRowCpt = (wRowCpt + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoWorld_obj,setupWorld,(void))

void IsoWorld_obj::drawView(){
            	HX_GC_STACKFRAME(&_hx_pos_19ac50636e1b7f7d_208_drawView)
HXLINE( 210)		::String rowCpt = HX_("",00,00,00,00);
HXLINE( 211)		int colCpt = (int)0;
HXLINE( 212)		int lineViewCpt = (int)0;
HXLINE( 213)		int colViewCpt = (int)0;
HXLINE( 214)		int indexX = (int)0;
HXLINE( 215)		int indexY = (int)0;
HXLINE( 216)		::String part = HX_("0-0",93,93,24,00);
HXLINE( 217)		 ::openfl::display::Bitmap bmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 218)		 ::Dynamic n;
HXLINE( 219)		 ::Dynamic nW;
HXLINE( 220)		 ::openfl::geom::Point pos;
HXLINE( 222)		this->groundCanvas->unlock(null());
HXLINE( 223)		while((lineViewCpt < this->NB_TILE_W)){
HXLINE( 225)			colViewCpt = (int)0;
HXLINE( 226)			while((colViewCpt < this->NB_TILE_H)){
HXLINE( 228)				pos = ::com::lak::utils::IsoUtils_obj::mapTilePosition( ::openfl::geom::Point_obj::__alloc( HX_CTX ,lineViewCpt,colViewCpt),this->tileW,this->tileH);
HXLINE( 229)				if ((this->COLONNE_VISIBLE_OFFSET > this->PART_NUM_TILE_W)) {
HXLINE( 230)					this->COLONNE_VISIBLE_OFFSET = hx::Mod(this->COLONNE_VISIBLE_OFFSET,this->PART_NUM_TILE_W);
            				}
HXLINE( 232)				if ((this->LIGNE_VISIBLE_OFFSET > this->PART_NUM_TILE_H)) {
HXLINE( 233)					this->LIGNE_VISIBLE_OFFSET = hx::Mod(this->LIGNE_VISIBLE_OFFSET,this->PART_NUM_TILE_H);
            				}
HXLINE( 235)				bool _hx_tmp;
HXDLIN( 235)				if ((lineViewCpt < this->PART_NUM_TILE_H)) {
HXLINE( 235)					_hx_tmp = (colViewCpt < this->PART_NUM_TILE_W);
            				}
            				else {
HXLINE( 235)					_hx_tmp = false;
            				}
HXDLIN( 235)				if (_hx_tmp) {
HXLINE( 236)					 ::com::lak::simulator::manager::LevelManager nW1 = ::com::lak::simulator::manager::LevelManager_obj::instance;
HXDLIN( 236)					int nW2 = ::Std_obj::_hx_int((lineViewCpt + this->LIGNE_VISIBLE_OFFSET));
HXDLIN( 236)					nW = nW1->getNodeAt(nW2,::Std_obj::_hx_int((colViewCpt + this->COLONNE_VISIBLE_OFFSET)));
HXLINE( 238)					n = ::cpp::VirtualArray( this->tilesArray->__get(lineViewCpt))->__get(colViewCpt);
HXLINE( 239)					bool _hx_tmp1;
HXDLIN( 239)					bool _hx_tmp2;
HXDLIN( 239)					if (hx::IsNotNull( nW )) {
HXLINE( 239)						_hx_tmp2 = hx::IsNotNull( n );
            					}
            					else {
HXLINE( 239)						_hx_tmp2 = false;
            					}
HXDLIN( 239)					if (_hx_tmp2) {
HXLINE( 239)						_hx_tmp1 = hx::IsNotEq(  ::Dynamic(nW->__Field(HX_("ndType",10,d2,35,c7),hx::paccDynamic)), ::Dynamic(n->__Field(HX_("ndType",10,d2,35,c7),hx::paccDynamic)) );
            					}
            					else {
HXLINE( 239)						_hx_tmp1 = false;
            					}
HXDLIN( 239)					if (_hx_tmp1) {
HXLINE( 240)						n->__SetField(HX_("position",a9,a0,fa,ca), ::Dynamic(nW->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic)),hx::paccDynamic);
HXLINE( 241)						n->__SetField(HX_("ndType",10,d2,35,c7), ::Dynamic(nW->__Field(HX_("ndType",10,d2,35,c7),hx::paccDynamic)),hx::paccDynamic);
HXLINE( 242)						this->mtrx->tx = pos->x;
HXLINE( 243)						this->mtrx->ty = pos->y;
HXLINE( 244)						if (hx::IsEq(  ::Dynamic(n->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)),(int)-1 )) {
HXLINE( 244)							 ::spritesheet::Spritesheet _hx_tmp3 = this->worldGrass;
HXDLIN( 244)							bmp->set_bitmapData(_hx_tmp3->getFrame(::com::lak::utils::GameUtils_obj::random((int)0,(int)99),null())->bitmapData);
            						}
            						else {
HXLINE( 245)							bmp->set_bitmapData(this->worldGrass->getFrame(( (int)(n->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) ),null())->bitmapData);
            						}
HXLINE( 246)						this->groundCanvas->draw(bmp,this->mtrx,null(),null(),null(),null());
            					}
            				}
HXLINE( 249)				colViewCpt = (colViewCpt + (int)1);
            			}
HXLINE( 251)			lineViewCpt = (lineViewCpt + (int)1);
            		}
HXLINE( 253)		this->groundCanvas->lock();
HXLINE( 255)		this->offsetYCost = ::Math_obj::floor(((Float)(lineViewCpt + this->OFFSET_COLONNE_WORLD) / (Float)this->PART_NUM_TILE_H));
HXLINE( 256)		this->offsetXCost = ::Math_obj::floor(((Float)(colViewCpt + this->OFFSET_LIGNE_WORLD) / (Float)this->PART_NUM_TILE_W));
HXLINE( 257)		part = ((this->offsetXCost + HX_("-",2d,00,00,00)) + this->offsetYCost);
HXLINE( 259)		if ((part != this->curentLevel)) {
HXLINE( 260)			int rorl;
HXLINE( 261)			int bort;
HXLINE( 263)			Float _hx_tmp4 = ::Std_obj::parseFloat(this->curentLevel.split(HX_("-",2d,00,00,00))->__get((int)0));
HXDLIN( 263)			if ((_hx_tmp4 > ::Std_obj::parseFloat(part.split(HX_("-",2d,00,00,00))->__get((int)0)))) {
HXLINE( 263)				rorl = (int)-1;
            			}
            			else {
HXLINE( 263)				rorl = (int)1;
            			}
HXLINE( 264)			Float _hx_tmp5 = ::Std_obj::parseFloat(this->curentLevel.split(HX_("-",2d,00,00,00))->__get((int)1));
HXDLIN( 264)			if ((_hx_tmp5 > ::Std_obj::parseFloat(part.split(HX_("-",2d,00,00,00))->__get((int)1)))) {
HXLINE( 264)				bort = (int)-1;
            			}
            			else {
HXLINE( 264)				bort = (int)1;
            			}
HXLINE( 265)			this->curentLevel = part;
HXLINE( 267)			this->setupMapData(part,rorl,bort,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IsoWorld_obj,drawView,(void))

 ::com::lak::IsoWorld IsoWorld_obj::instance;


hx::ObjectPtr< IsoWorld_obj > IsoWorld_obj::__new() {
	hx::ObjectPtr< IsoWorld_obj > __this = new IsoWorld_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IsoWorld_obj > IsoWorld_obj::__alloc(hx::Ctx *_hx_ctx) {
	IsoWorld_obj *__this = (IsoWorld_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IsoWorld_obj), true, "com.lak.IsoWorld"));
	*(void **)__this = IsoWorld_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IsoWorld_obj::IsoWorld_obj()
{
}

void IsoWorld_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IsoWorld);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(floor,"floor");
	HX_MARK_MEMBER_NAME(tilesArray,"tilesArray");
	HX_MARK_MEMBER_NAME(groundCanvas,"groundCanvas");
	HX_MARK_MEMBER_NAME(worldGrass,"worldGrass");
	HX_MARK_MEMBER_NAME(mtrx,"mtrx");
	HX_MARK_MEMBER_NAME(NB_TILE_W,"NB_TILE_W");
	HX_MARK_MEMBER_NAME(VIEW_WIDTH,"VIEW_WIDTH");
	HX_MARK_MEMBER_NAME(VIEW_HEIGHT,"VIEW_HEIGHT");
	HX_MARK_MEMBER_NAME(worldTileWidth,"worldTileWidth");
	HX_MARK_MEMBER_NAME(NB_LIGNE_WORLD,"NB_LIGNE_WORLD");
	HX_MARK_MEMBER_NAME(worldTileHeight,"worldTileHeight");
	HX_MARK_MEMBER_NAME(levelData,"levelData");
	HX_MARK_MEMBER_NAME(NB_TILE_H,"NB_TILE_H");
	HX_MARK_MEMBER_NAME(NB_COLONNE_WORLD,"NB_COLONNE_WORLD");
	HX_MARK_MEMBER_NAME(PART_NUM_TILE_W,"PART_NUM_TILE_W");
	HX_MARK_MEMBER_NAME(PART_NUM_TILE_H,"PART_NUM_TILE_H");
	HX_MARK_MEMBER_NAME(offsetXCost,"offsetXCost");
	HX_MARK_MEMBER_NAME(offsetYCost,"offsetYCost");
	HX_MARK_MEMBER_NAME(curentLevel,"curentLevel");
	HX_MARK_MEMBER_NAME(OFFSET_LIGNE_WORLD,"OFFSET_LIGNE_WORLD");
	HX_MARK_MEMBER_NAME(OFFSET_COLONNE_WORLD,"OFFSET_COLONNE_WORLD");
	HX_MARK_MEMBER_NAME(COLONNE_VISIBLE_OFFSET,"COLONNE_VISIBLE_OFFSET");
	HX_MARK_MEMBER_NAME(LIGNE_VISIBLE_OFFSET,"LIGNE_VISIBLE_OFFSET");
	HX_MARK_MEMBER_NAME(tileH,"tileH");
	HX_MARK_MEMBER_NAME(tileW,"tileW");
	HX_MARK_MEMBER_NAME(halfH,"halfH");
	HX_MARK_MEMBER_NAME(halfW,"halfW");
	HX_MARK_MEMBER_NAME(pt,"pt");
	HX_MARK_MEMBER_NAME(worldObject,"worldObject");
	HX_MARK_MEMBER_NAME(levelManager,"levelManager");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IsoWorld_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(floor,"floor");
	HX_VISIT_MEMBER_NAME(tilesArray,"tilesArray");
	HX_VISIT_MEMBER_NAME(groundCanvas,"groundCanvas");
	HX_VISIT_MEMBER_NAME(worldGrass,"worldGrass");
	HX_VISIT_MEMBER_NAME(mtrx,"mtrx");
	HX_VISIT_MEMBER_NAME(NB_TILE_W,"NB_TILE_W");
	HX_VISIT_MEMBER_NAME(VIEW_WIDTH,"VIEW_WIDTH");
	HX_VISIT_MEMBER_NAME(VIEW_HEIGHT,"VIEW_HEIGHT");
	HX_VISIT_MEMBER_NAME(worldTileWidth,"worldTileWidth");
	HX_VISIT_MEMBER_NAME(NB_LIGNE_WORLD,"NB_LIGNE_WORLD");
	HX_VISIT_MEMBER_NAME(worldTileHeight,"worldTileHeight");
	HX_VISIT_MEMBER_NAME(levelData,"levelData");
	HX_VISIT_MEMBER_NAME(NB_TILE_H,"NB_TILE_H");
	HX_VISIT_MEMBER_NAME(NB_COLONNE_WORLD,"NB_COLONNE_WORLD");
	HX_VISIT_MEMBER_NAME(PART_NUM_TILE_W,"PART_NUM_TILE_W");
	HX_VISIT_MEMBER_NAME(PART_NUM_TILE_H,"PART_NUM_TILE_H");
	HX_VISIT_MEMBER_NAME(offsetXCost,"offsetXCost");
	HX_VISIT_MEMBER_NAME(offsetYCost,"offsetYCost");
	HX_VISIT_MEMBER_NAME(curentLevel,"curentLevel");
	HX_VISIT_MEMBER_NAME(OFFSET_LIGNE_WORLD,"OFFSET_LIGNE_WORLD");
	HX_VISIT_MEMBER_NAME(OFFSET_COLONNE_WORLD,"OFFSET_COLONNE_WORLD");
	HX_VISIT_MEMBER_NAME(COLONNE_VISIBLE_OFFSET,"COLONNE_VISIBLE_OFFSET");
	HX_VISIT_MEMBER_NAME(LIGNE_VISIBLE_OFFSET,"LIGNE_VISIBLE_OFFSET");
	HX_VISIT_MEMBER_NAME(tileH,"tileH");
	HX_VISIT_MEMBER_NAME(tileW,"tileW");
	HX_VISIT_MEMBER_NAME(halfH,"halfH");
	HX_VISIT_MEMBER_NAME(halfW,"halfW");
	HX_VISIT_MEMBER_NAME(pt,"pt");
	HX_VISIT_MEMBER_NAME(worldObject,"worldObject");
	HX_VISIT_MEMBER_NAME(levelManager,"levelManager");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IsoWorld_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { return hx::Val( pt); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"mtrx") ) { return hx::Val( mtrx); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"floor") ) { return hx::Val( floor); }
		if (HX_FIELD_EQ(inName,"tileH") ) { return hx::Val( tileH); }
		if (HX_FIELD_EQ(inName,"tileW") ) { return hx::Val( tileW); }
		if (HX_FIELD_EQ(inName,"halfH") ) { return hx::Val( halfH); }
		if (HX_FIELD_EQ(inName,"halfW") ) { return hx::Val( halfW); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawView") ) { return hx::Val( drawView_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"NB_TILE_W") ) { return hx::Val( NB_TILE_W); }
		if (HX_FIELD_EQ(inName,"levelData") ) { return hx::Val( levelData); }
		if (HX_FIELD_EQ(inName,"NB_TILE_H") ) { return hx::Val( NB_TILE_H); }
		if (HX_FIELD_EQ(inName,"worldSize") ) { return hx::Val( worldSize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tilesArray") ) { return hx::Val( tilesArray); }
		if (HX_FIELD_EQ(inName,"worldGrass") ) { return hx::Val( worldGrass); }
		if (HX_FIELD_EQ(inName,"VIEW_WIDTH") ) { return hx::Val( VIEW_WIDTH); }
		if (HX_FIELD_EQ(inName,"setupWorld") ) { return hx::Val( setupWorld_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"VIEW_HEIGHT") ) { return hx::Val( VIEW_HEIGHT); }
		if (HX_FIELD_EQ(inName,"offsetXCost") ) { return hx::Val( offsetXCost); }
		if (HX_FIELD_EQ(inName,"offsetYCost") ) { return hx::Val( offsetYCost); }
		if (HX_FIELD_EQ(inName,"curentLevel") ) { return hx::Val( curentLevel); }
		if (HX_FIELD_EQ(inName,"worldObject") ) { return hx::Val( worldObject); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"groundCanvas") ) { return hx::Val( groundCanvas); }
		if (HX_FIELD_EQ(inName,"levelManager") ) { return hx::Val( levelManager); }
		if (HX_FIELD_EQ(inName,"setupMapData") ) { return hx::Val( setupMapData_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldTileWidth") ) { return hx::Val( worldTileWidth); }
		if (HX_FIELD_EQ(inName,"NB_LIGNE_WORLD") ) { return hx::Val( NB_LIGNE_WORLD); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldTileHeight") ) { return hx::Val( worldTileHeight); }
		if (HX_FIELD_EQ(inName,"PART_NUM_TILE_W") ) { return hx::Val( PART_NUM_TILE_W); }
		if (HX_FIELD_EQ(inName,"PART_NUM_TILE_H") ) { return hx::Val( PART_NUM_TILE_H); }
		if (HX_FIELD_EQ(inName,"addChildToWorld") ) { return hx::Val( addChildToWorld_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"NB_COLONNE_WORLD") ) { return hx::Val( NB_COLONNE_WORLD); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"OFFSET_LIGNE_WORLD") ) { return hx::Val( OFFSET_LIGNE_WORLD); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"onWorldaddedToStage") ) { return hx::Val( onWorldaddedToStage_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"OFFSET_COLONNE_WORLD") ) { return hx::Val( OFFSET_COLONNE_WORLD); }
		if (HX_FIELD_EQ(inName,"LIGNE_VISIBLE_OFFSET") ) { return hx::Val( LIGNE_VISIBLE_OFFSET); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"COLONNE_VISIBLE_OFFSET") ) { return hx::Val( COLONNE_VISIBLE_OFFSET); }
	}
	return super::__Field(inName,inCallProp);
}

bool IsoWorld_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val IsoWorld_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { pt=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mtrx") ) { mtrx=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"floor") ) { floor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileH") ) { tileH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileW") ) { tileW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halfH") ) { halfH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halfW") ) { halfW=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"NB_TILE_W") ) { NB_TILE_W=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"levelData") ) { levelData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NB_TILE_H") ) { NB_TILE_H=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tilesArray") ) { tilesArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldGrass") ) { worldGrass=inValue.Cast<  ::spritesheet::Spritesheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VIEW_WIDTH") ) { VIEW_WIDTH=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"VIEW_HEIGHT") ) { VIEW_HEIGHT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetXCost") ) { offsetXCost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetYCost") ) { offsetYCost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curentLevel") ) { curentLevel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldObject") ) { worldObject=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"groundCanvas") ) { groundCanvas=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"levelManager") ) { levelManager=inValue.Cast<  ::com::lak::simulator::manager::LevelManager >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldTileWidth") ) { worldTileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NB_LIGNE_WORLD") ) { NB_LIGNE_WORLD=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldTileHeight") ) { worldTileHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"PART_NUM_TILE_W") ) { PART_NUM_TILE_W=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"PART_NUM_TILE_H") ) { PART_NUM_TILE_H=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"NB_COLONNE_WORLD") ) { NB_COLONNE_WORLD=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"OFFSET_LIGNE_WORLD") ) { OFFSET_LIGNE_WORLD=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"OFFSET_COLONNE_WORLD") ) { OFFSET_COLONNE_WORLD=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LIGNE_VISIBLE_OFFSET") ) { LIGNE_VISIBLE_OFFSET=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"COLONNE_VISIBLE_OFFSET") ) { COLONNE_VISIBLE_OFFSET=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool IsoWorld_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::com::lak::IsoWorld >(); return true; }
	}
	return false;
}

void IsoWorld_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"));
	outFields->push(HX_HCSTRING("tilesArray","\xd4","\xbd","\xc9","\xe3"));
	outFields->push(HX_HCSTRING("groundCanvas","\xbf","\x0a","\x96","\x5e"));
	outFields->push(HX_HCSTRING("worldGrass","\x44","\xc2","\x96","\x05"));
	outFields->push(HX_HCSTRING("mtrx","\xed","\xaa","\x64","\x48"));
	outFields->push(HX_HCSTRING("NB_TILE_W","\xb1","\x09","\xb2","\x43"));
	outFields->push(HX_HCSTRING("VIEW_WIDTH","\x4c","\x89","\x77","\x90"));
	outFields->push(HX_HCSTRING("VIEW_HEIGHT","\xc1","\x11","\x70","\x8e"));
	outFields->push(HX_HCSTRING("worldTileWidth","\x46","\x03","\xc4","\x76"));
	outFields->push(HX_HCSTRING("NB_LIGNE_WORLD","\x49","\x72","\x93","\x35"));
	outFields->push(HX_HCSTRING("worldTileHeight","\xa7","\x52","\x0e","\x2b"));
	outFields->push(HX_HCSTRING("levelData","\xce","\xa9","\x32","\x78"));
	outFields->push(HX_HCSTRING("NB_TILE_H","\xa2","\x09","\xb2","\x43"));
	outFields->push(HX_HCSTRING("NB_COLONNE_WORLD","\x9e","\x04","\xc4","\xac"));
	outFields->push(HX_HCSTRING("PART_NUM_TILE_W","\x0b","\x66","\xcd","\xcd"));
	outFields->push(HX_HCSTRING("PART_NUM_TILE_H","\xfc","\x65","\xcd","\xcd"));
	outFields->push(HX_HCSTRING("offsetXCost","\x52","\x0a","\x34","\xdd"));
	outFields->push(HX_HCSTRING("offsetYCost","\xd3","\x9e","\x9a","\x70"));
	outFields->push(HX_HCSTRING("curentLevel","\x19","\x73","\xa3","\x7d"));
	outFields->push(HX_HCSTRING("OFFSET_LIGNE_WORLD","\x28","\x84","\x46","\x85"));
	outFields->push(HX_HCSTRING("OFFSET_COLONNE_WORLD","\x3d","\x8c","\xc6","\x9c"));
	outFields->push(HX_HCSTRING("COLONNE_VISIBLE_OFFSET","\x49","\x71","\xaf","\x1c"));
	outFields->push(HX_HCSTRING("LIGNE_VISIBLE_OFFSET","\xfe","\x56","\x43","\x49"));
	outFields->push(HX_HCSTRING("tileH","\x5a","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("tileW","\x69","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("halfH","\x35","\x53","\x1c","\x22"));
	outFields->push(HX_HCSTRING("halfW","\x44","\x53","\x1c","\x22"));
	outFields->push(HX_HCSTRING("pt","\x04","\x62","\x00","\x00"));
	outFields->push(HX_HCSTRING("worldObject","\xb1","\x12","\xad","\xe0"));
	outFields->push(HX_HCSTRING("levelManager","\x49","\x1d","\x6f","\x72"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IsoWorld_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(IsoWorld_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(IsoWorld_obj,floor),HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(IsoWorld_obj,tilesArray),HX_HCSTRING("tilesArray","\xd4","\xbd","\xc9","\xe3")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(IsoWorld_obj,groundCanvas),HX_HCSTRING("groundCanvas","\xbf","\x0a","\x96","\x5e")},
	{hx::fsObject /*::spritesheet::Spritesheet*/ ,(int)offsetof(IsoWorld_obj,worldGrass),HX_HCSTRING("worldGrass","\x44","\xc2","\x96","\x05")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(IsoWorld_obj,mtrx),HX_HCSTRING("mtrx","\xed","\xaa","\x64","\x48")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,NB_TILE_W),HX_HCSTRING("NB_TILE_W","\xb1","\x09","\xb2","\x43")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,VIEW_WIDTH),HX_HCSTRING("VIEW_WIDTH","\x4c","\x89","\x77","\x90")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,VIEW_HEIGHT),HX_HCSTRING("VIEW_HEIGHT","\xc1","\x11","\x70","\x8e")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,worldTileWidth),HX_HCSTRING("worldTileWidth","\x46","\x03","\xc4","\x76")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,NB_LIGNE_WORLD),HX_HCSTRING("NB_LIGNE_WORLD","\x49","\x72","\x93","\x35")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,worldTileHeight),HX_HCSTRING("worldTileHeight","\xa7","\x52","\x0e","\x2b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(IsoWorld_obj,levelData),HX_HCSTRING("levelData","\xce","\xa9","\x32","\x78")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,NB_TILE_H),HX_HCSTRING("NB_TILE_H","\xa2","\x09","\xb2","\x43")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,NB_COLONNE_WORLD),HX_HCSTRING("NB_COLONNE_WORLD","\x9e","\x04","\xc4","\xac")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,PART_NUM_TILE_W),HX_HCSTRING("PART_NUM_TILE_W","\x0b","\x66","\xcd","\xcd")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,PART_NUM_TILE_H),HX_HCSTRING("PART_NUM_TILE_H","\xfc","\x65","\xcd","\xcd")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,offsetXCost),HX_HCSTRING("offsetXCost","\x52","\x0a","\x34","\xdd")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,offsetYCost),HX_HCSTRING("offsetYCost","\xd3","\x9e","\x9a","\x70")},
	{hx::fsString,(int)offsetof(IsoWorld_obj,curentLevel),HX_HCSTRING("curentLevel","\x19","\x73","\xa3","\x7d")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,OFFSET_LIGNE_WORLD),HX_HCSTRING("OFFSET_LIGNE_WORLD","\x28","\x84","\x46","\x85")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,OFFSET_COLONNE_WORLD),HX_HCSTRING("OFFSET_COLONNE_WORLD","\x3d","\x8c","\xc6","\x9c")},
	{hx::fsFloat,(int)offsetof(IsoWorld_obj,COLONNE_VISIBLE_OFFSET),HX_HCSTRING("COLONNE_VISIBLE_OFFSET","\x49","\x71","\xaf","\x1c")},
	{hx::fsFloat,(int)offsetof(IsoWorld_obj,LIGNE_VISIBLE_OFFSET),HX_HCSTRING("LIGNE_VISIBLE_OFFSET","\xfe","\x56","\x43","\x49")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,tileH),HX_HCSTRING("tileH","\x5a","\xfd","\x34","\x10")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,tileW),HX_HCSTRING("tileW","\x69","\xfd","\x34","\x10")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,halfH),HX_HCSTRING("halfH","\x35","\x53","\x1c","\x22")},
	{hx::fsInt,(int)offsetof(IsoWorld_obj,halfW),HX_HCSTRING("halfW","\x44","\x53","\x1c","\x22")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(IsoWorld_obj,pt),HX_HCSTRING("pt","\x04","\x62","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(IsoWorld_obj,worldObject),HX_HCSTRING("worldObject","\xb1","\x12","\xad","\xe0")},
	{hx::fsObject /*::com::lak::simulator::manager::LevelManager*/ ,(int)offsetof(IsoWorld_obj,levelManager),HX_HCSTRING("levelManager","\x49","\x1d","\x6f","\x72")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo IsoWorld_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::lak::IsoWorld*/ ,(void *) &IsoWorld_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String IsoWorld_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("tilesArray","\xd4","\xbd","\xc9","\xe3"),
	HX_HCSTRING("groundCanvas","\xbf","\x0a","\x96","\x5e"),
	HX_HCSTRING("worldGrass","\x44","\xc2","\x96","\x05"),
	HX_HCSTRING("mtrx","\xed","\xaa","\x64","\x48"),
	HX_HCSTRING("NB_TILE_W","\xb1","\x09","\xb2","\x43"),
	HX_HCSTRING("VIEW_WIDTH","\x4c","\x89","\x77","\x90"),
	HX_HCSTRING("VIEW_HEIGHT","\xc1","\x11","\x70","\x8e"),
	HX_HCSTRING("worldTileWidth","\x46","\x03","\xc4","\x76"),
	HX_HCSTRING("NB_LIGNE_WORLD","\x49","\x72","\x93","\x35"),
	HX_HCSTRING("worldTileHeight","\xa7","\x52","\x0e","\x2b"),
	HX_HCSTRING("levelData","\xce","\xa9","\x32","\x78"),
	HX_HCSTRING("NB_TILE_H","\xa2","\x09","\xb2","\x43"),
	HX_HCSTRING("NB_COLONNE_WORLD","\x9e","\x04","\xc4","\xac"),
	HX_HCSTRING("PART_NUM_TILE_W","\x0b","\x66","\xcd","\xcd"),
	HX_HCSTRING("PART_NUM_TILE_H","\xfc","\x65","\xcd","\xcd"),
	HX_HCSTRING("offsetXCost","\x52","\x0a","\x34","\xdd"),
	HX_HCSTRING("offsetYCost","\xd3","\x9e","\x9a","\x70"),
	HX_HCSTRING("curentLevel","\x19","\x73","\xa3","\x7d"),
	HX_HCSTRING("OFFSET_LIGNE_WORLD","\x28","\x84","\x46","\x85"),
	HX_HCSTRING("OFFSET_COLONNE_WORLD","\x3d","\x8c","\xc6","\x9c"),
	HX_HCSTRING("COLONNE_VISIBLE_OFFSET","\x49","\x71","\xaf","\x1c"),
	HX_HCSTRING("LIGNE_VISIBLE_OFFSET","\xfe","\x56","\x43","\x49"),
	HX_HCSTRING("tileH","\x5a","\xfd","\x34","\x10"),
	HX_HCSTRING("tileW","\x69","\xfd","\x34","\x10"),
	HX_HCSTRING("halfH","\x35","\x53","\x1c","\x22"),
	HX_HCSTRING("halfW","\x44","\x53","\x1c","\x22"),
	HX_HCSTRING("pt","\x04","\x62","\x00","\x00"),
	HX_HCSTRING("worldObject","\xb1","\x12","\xad","\xe0"),
	HX_HCSTRING("levelManager","\x49","\x1d","\x6f","\x72"),
	HX_HCSTRING("onWorldaddedToStage","\x96","\x17","\x0d","\xbb"),
	HX_HCSTRING("worldSize","\x33","\xf4","\x6f","\x59"),
	HX_HCSTRING("setupMapData","\xe9","\xfd","\x93","\xe5"),
	HX_HCSTRING("addChildToWorld","\x5c","\x78","\x04","\xea"),
	HX_HCSTRING("setupWorld","\x95","\xb2","\x67","\xb0"),
	HX_HCSTRING("drawView","\x89","\xdc","\xb8","\x62"),
	::String(null()) };

static void IsoWorld_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IsoWorld_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IsoWorld_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IsoWorld_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IsoWorld_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IsoWorld_obj::instance,"instance");
};

#endif

hx::Class IsoWorld_obj::__mClass;

static ::String IsoWorld_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void IsoWorld_obj::__register()
{
	hx::Object *dummy = new IsoWorld_obj;
	IsoWorld_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.IsoWorld","\x52","\x0a","\x5d","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IsoWorld_obj::__GetStatic;
	__mClass->mSetStaticField = &IsoWorld_obj::__SetStatic;
	__mClass->mMarkFunc = IsoWorld_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IsoWorld_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IsoWorld_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IsoWorld_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IsoWorld_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IsoWorld_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IsoWorld_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
