// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_display_SelectionSprite
#include <com/lak/display/SelectionSprite.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ef1001cb9718fe87_9_new,"com.lak.display.SelectionSprite","new",0xe80e9a52,"com.lak.display.SelectionSprite.new","com/lak/display/SelectionSprite.hx",9,0xd04d58a1)
HX_LOCAL_STACK_FRAME(_hx_pos_ef1001cb9718fe87_19_drawRect,"com.lak.display.SelectionSprite","drawRect",0xb3fae016,"com.lak.display.SelectionSprite.drawRect","com/lak/display/SelectionSprite.hx",19,0xd04d58a1)
namespace com{
namespace lak{
namespace display{

void SelectionSprite_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ef1001cb9718fe87_9_new)
HXLINE(  13)		this->selectionRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  12)		this->sprt =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  11)		this->selectedUnitCpt = (int)0;
HXLINE(  16)		super::__construct();
            	}

Dynamic SelectionSprite_obj::__CreateEmpty() { return new SelectionSprite_obj; }

void *SelectionSprite_obj::_hx_vtable = 0;

Dynamic SelectionSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SelectionSprite_obj > _hx_result = new SelectionSprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SelectionSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x1a9e38f0 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void SelectionSprite_obj::drawRect(){
            	HX_STACKFRAME(&_hx_pos_ef1001cb9718fe87_19_drawRect)
HXLINE(  20)		this->get_graphics()->clear();
HXLINE(  21)		this->selectedUnitCpt = (int)0;
HXLINE(  22)		Float _hx_tmp = ::com::lak::IsoWorld_obj::instance->get_mouseX();
HXDLIN(  22)		this->selectionRect->width = (_hx_tmp - this->selectionRect->x);
HXLINE(  23)		Float _hx_tmp1 = ::com::lak::IsoWorld_obj::instance->get_mouseY();
HXDLIN(  23)		this->selectionRect->height = (_hx_tmp1 - this->selectionRect->y);
HXLINE(  24)		this->get_graphics()->lineStyle((int)3,(int)3887907,((Float)0.6),null(),null(),null(),null(),null());
HXLINE(  25)		this->get_graphics()->beginFill((int)4557568,((Float)0.4));
HXLINE(  26)		this->get_graphics()->drawRect(this->selectionRect->x,this->selectionRect->y,this->selectionRect->width,this->selectionRect->height);
HXLINE(  27)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SelectionSprite_obj,drawRect,(void))


hx::ObjectPtr< SelectionSprite_obj > SelectionSprite_obj::__new() {
	hx::ObjectPtr< SelectionSprite_obj > __this = new SelectionSprite_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SelectionSprite_obj > SelectionSprite_obj::__alloc(hx::Ctx *_hx_ctx) {
	SelectionSprite_obj *__this = (SelectionSprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SelectionSprite_obj), true, "com.lak.display.SelectionSprite"));
	*(void **)__this = SelectionSprite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SelectionSprite_obj::SelectionSprite_obj()
{
}

void SelectionSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SelectionSprite);
	HX_MARK_MEMBER_NAME(selectedUnitCpt,"selectedUnitCpt");
	HX_MARK_MEMBER_NAME(sprt,"sprt");
	HX_MARK_MEMBER_NAME(selectionRect,"selectionRect");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SelectionSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selectedUnitCpt,"selectedUnitCpt");
	HX_VISIT_MEMBER_NAME(sprt,"sprt");
	HX_VISIT_MEMBER_NAME(selectionRect,"selectionRect");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SelectionSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sprt") ) { return hx::Val( sprt); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectionRect") ) { return hx::Val( selectionRect); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selectedUnitCpt") ) { return hx::Val( selectedUnitCpt); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SelectionSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sprt") ) { sprt=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectionRect") ) { selectionRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selectedUnitCpt") ) { selectedUnitCpt=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SelectionSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("selectedUnitCpt","\xe8","\xa7","\xaf","\x2d"));
	outFields->push(HX_HCSTRING("sprt","\x9f","\xe9","\x58","\x4c"));
	outFields->push(HX_HCSTRING("selectionRect","\x90","\x87","\xeb","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SelectionSprite_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SelectionSprite_obj,selectedUnitCpt),HX_HCSTRING("selectedUnitCpt","\xe8","\xa7","\xaf","\x2d")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(SelectionSprite_obj,sprt),HX_HCSTRING("sprt","\x9f","\xe9","\x58","\x4c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(SelectionSprite_obj,selectionRect),HX_HCSTRING("selectionRect","\x90","\x87","\xeb","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SelectionSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String SelectionSprite_obj_sMemberFields[] = {
	HX_HCSTRING("selectedUnitCpt","\xe8","\xa7","\xaf","\x2d"),
	HX_HCSTRING("sprt","\x9f","\xe9","\x58","\x4c"),
	HX_HCSTRING("selectionRect","\x90","\x87","\xeb","\xfb"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	::String(null()) };

static void SelectionSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SelectionSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SelectionSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SelectionSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class SelectionSprite_obj::__mClass;

void SelectionSprite_obj::__register()
{
	hx::Object *dummy = new SelectionSprite_obj;
	SelectionSprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.display.SelectionSprite","\x60","\xc9","\x42","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SelectionSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SelectionSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SelectionSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SelectionSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SelectionSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SelectionSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace display
