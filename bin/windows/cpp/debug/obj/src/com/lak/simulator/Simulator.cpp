// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_display_SelectionSprite
#include <com/lak/display/SelectionSprite.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_renderers_Renderer
#include <com/lak/renderers/Renderer.h>
#endif
#ifndef INCLUDED_com_lak_simulator_Simulator
#include <com/lak/simulator/Simulator.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_ArmyManager
#include <com/lak/simulator/manager/ArmyManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_AttackMananger
#include <com/lak/simulator/manager/AttackMananger.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_EntitiesManager
#include <com/lak/simulator/manager/EntitiesManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_SpritesheetManager
#include <com/lak/simulator/manager/SpritesheetManager.h>
#endif
#ifndef INCLUDED_com_lak_simulator_pools_IsoUnitPool
#include <com/lak/simulator/pools/IsoUnitPool.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_spritesheet_AnimatedSprite
#include <spritesheet/AnimatedSprite.h>
#endif
#ifndef INCLUDED_spritesheet_Spritesheet
#include <spritesheet/Spritesheet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e50d501cddc27c81_19_new,"com.lak.simulator.Simulator","new",0x417d8527,"com.lak.simulator.Simulator.new","com/lak/simulator/Simulator.hx",19,0x73af9fac)
HX_LOCAL_STACK_FRAME(_hx_pos_e50d501cddc27c81_43_initilizeUnit,"com.lak.simulator.Simulator","initilizeUnit",0xf40474ec,"com.lak.simulator.Simulator.initilizeUnit","com/lak/simulator/Simulator.hx",43,0x73af9fac)
HX_LOCAL_STACK_FRAME(_hx_pos_e50d501cddc27c81_74_checkKeys,"com.lak.simulator.Simulator","checkKeys",0x0b7eaee3,"com.lak.simulator.Simulator.checkKeys","com/lak/simulator/Simulator.hx",74,0x73af9fac)
HX_LOCAL_STACK_FRAME(_hx_pos_e50d501cddc27c81_119_checkForSelection,"com.lak.simulator.Simulator","checkForSelection",0xc6523bf2,"com.lak.simulator.Simulator.checkForSelection","com/lak/simulator/Simulator.hx",119,0x73af9fac)
HX_LOCAL_STACK_FRAME(_hx_pos_e50d501cddc27c81_129_run,"com.lak.simulator.Simulator","run",0x41809c12,"com.lak.simulator.Simulator.run","com/lak/simulator/Simulator.hx",129,0x73af9fac)
namespace com{
namespace lak{
namespace simulator{

void Simulator_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e50d501cddc27c81_19_new)
HXLINE(  23)		this->aKeyPress = ::Array_obj< bool >::__new();
HXLINE(  29)		super::__construct();
HXLINE(  30)		::com::lak::simulator::pools::IsoUnitPool_obj::initialize((int)200,(int)100);
HXLINE(  31)		::com::lak::simulator::Simulator_obj::instance = hx::ObjectPtr<OBJ_>(this);
HXLINE(  32)		this->renderer =  ::com::lak::renderers::Renderer_obj::__alloc( HX_CTX );
HXLINE(  33)		this->entitiesManager =  ::com::lak::simulator::manager::EntitiesManager_obj::__alloc( HX_CTX ,::com::lak::IsoWorld_obj::instance);
HXLINE(  34)		this->attackMananger =  ::com::lak::simulator::manager::AttackMananger_obj::__alloc( HX_CTX ,::com::lak::IsoWorld_obj::instance);
HXLINE(  35)		this->armyManager =  ::com::lak::simulator::manager::ArmyManager_obj::__alloc( HX_CTX );
            	}

Dynamic Simulator_obj::__CreateEmpty() { return new Simulator_obj; }

void *Simulator_obj::_hx_vtable = 0;

Dynamic Simulator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Simulator_obj > _hx_result = new Simulator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Simulator_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0921afd5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0921afd5;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

void Simulator_obj::initilizeUnit(::String unitType,int posX,int posY){
            	HX_STACKFRAME(&_hx_pos_e50d501cddc27c81_43_initilizeUnit)
HXLINE(  45)		 ::com::lak::entities::IsoUnit unit = ::com::lak::simulator::pools::IsoUnitPool_obj::getEntity();
HXLINE(  46)		unit->set_scaleX(unit->set_scaleY(((Float).8)));
HXLINE(  49)		::String assetName = unitType;
HXLINE(  50)		::String civ = HX_("mali",d1,3a,56,48);
HXLINE(  52)		unit->type = HX_("unit",84,ca,a9,4d);
HXLINE(  53)		unit->currentAction = HX_("stay",d9,e3,5b,4c);
HXLINE(  54)		unit->phase = HX_("DL",88,3b,00,00);
HXLINE(  57)		unit->spriteSheet->spritesheet = ::Main_obj::instance->sprSheetManager->getSpritesheet(civ,assetName);
HXLINE(  58)		 ::spritesheet::AnimatedSprite unit1 = unit->spriteSheet;
HXDLIN(  58)		unit1->showBehavior(((unit->currentAction + HX_("_",5f,00,00,00)) + unit->phase),null());
HXLINE(  59)		 ::spritesheet::AnimatedSprite unit2 = unit->spriteSheet;
HXDLIN(  59)		Float _hx_tmp = unit->spriteSheet->get_width();
HXDLIN(  59)		unit2->set_x((-(::Std_obj::_hx_int((_hx_tmp + unit->spriteSheet->bitmap->get_x()))) * ((Float).7)));
HXLINE(  60)		 ::spritesheet::AnimatedSprite unit3 = unit->spriteSheet;
HXDLIN(  60)		Float _hx_tmp1 = unit->spriteSheet->get_height();
HXDLIN(  60)		unit3->set_y((-(::Std_obj::_hx_int((_hx_tmp1 + unit->spriteSheet->bitmap->get_y()))) * ((Float).85)));
HXLINE(  61)		unit->addChild(unit->spriteSheet);
HXLINE(  63)		unit->set_x(posX);
HXLINE(  64)		unit->set_y(posY);
HXLINE(  66)		::com::lak::IsoWorld_obj::instance->addChildToWorld(unit);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Simulator_obj,initilizeUnit,(void))

void Simulator_obj::checkKeys(){
            	HX_STACKFRAME(&_hx_pos_e50d501cddc27c81_74_checkKeys)
HXLINE(  76)		if (this->aKeyPress->__get((int)38)) {
HXLINE(  79)			::com::lak::IsoWorld_obj::instance->COLONNE_VISIBLE_OFFSET--;
HXLINE(  80)			::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD--;
HXLINE(  82)			if ((::com::lak::IsoWorld_obj::instance->COLONNE_VISIBLE_OFFSET < (int)0)) {
HXLINE(  82)				::com::lak::IsoWorld_obj::instance->COLONNE_VISIBLE_OFFSET = (int)0;
            			}
HXLINE(  83)			if ((::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD < (int)0)) {
HXLINE(  83)				::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD = (int)0;
HXDLIN(  83)				::com::lak::IsoWorld_obj::instance->set_y((int)0);
            			}
            			else {
HXLINE(  85)				 ::com::lak::IsoWorld _g = ::com::lak::IsoWorld_obj::instance;
HXDLIN(  85)				Float _hx_tmp = _g->get_y();
HXDLIN(  85)				_g->set_y((_hx_tmp + ::com::lak::IsoWorld_obj::instance->halfH));
            			}
            		}
HXLINE(  88)		if (this->aKeyPress->__get((int)40)) {
HXLINE(  91)			::com::lak::IsoWorld_obj::instance->COLONNE_VISIBLE_OFFSET++;
HXLINE(  92)			::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD++;
HXLINE(  94)			if ((::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD >= (int)900)) {
HXLINE(  94)				::com::lak::IsoWorld_obj::instance->OFFSET_COLONNE_WORLD = (int)900;
HXDLIN(  94)				::com::lak::IsoWorld_obj::instance->set_y((int)90000);
            			}
            			else {
HXLINE(  95)				 ::com::lak::IsoWorld _g1 = ::com::lak::IsoWorld_obj::instance;
HXDLIN(  95)				Float _hx_tmp1 = _g1->get_y();
HXDLIN(  95)				_g1->set_y((_hx_tmp1 - ::com::lak::IsoWorld_obj::instance->halfH));
            			}
            		}
HXLINE(  98)		if (this->aKeyPress->__get((int)37)) {
HXLINE( 101)			::com::lak::IsoWorld_obj::instance->LIGNE_VISIBLE_OFFSET--;
HXLINE( 102)			::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD--;
HXLINE( 103)			if ((::com::lak::IsoWorld_obj::instance->LIGNE_VISIBLE_OFFSET < (int)0)) {
HXLINE( 103)				::com::lak::IsoWorld_obj::instance->LIGNE_VISIBLE_OFFSET = (int)0;
            			}
HXLINE( 104)			if ((::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD < (int)0)) {
HXLINE( 104)				::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD = (int)0;
HXDLIN( 104)				::com::lak::IsoWorld_obj::instance->set_x((int)0);
            			}
            			else {
HXLINE( 105)				 ::com::lak::IsoWorld _g2 = ::com::lak::IsoWorld_obj::instance;
HXDLIN( 105)				Float _hx_tmp2 = _g2->get_x();
HXDLIN( 105)				_g2->set_x((_hx_tmp2 + ::com::lak::IsoWorld_obj::instance->tileW));
            			}
            		}
HXLINE( 107)		if (this->aKeyPress->__get((int)39)) {
HXLINE( 110)			::com::lak::IsoWorld_obj::instance->LIGNE_VISIBLE_OFFSET++;
HXLINE( 111)			::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD++;
HXLINE( 112)			if ((::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD >= (int)900)) {
HXLINE( 112)				::com::lak::IsoWorld_obj::instance->OFFSET_LIGNE_WORLD = (int)900;
HXDLIN( 112)				::com::lak::IsoWorld_obj::instance->set_x((int)90000);
            			}
            			else {
HXLINE( 113)				 ::com::lak::IsoWorld _g3 = ::com::lak::IsoWorld_obj::instance;
HXDLIN( 113)				Float _hx_tmp3 = _g3->get_x();
HXDLIN( 113)				_g3->set_x((_hx_tmp3 - ::com::lak::IsoWorld_obj::instance->tileW));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Simulator_obj,checkKeys,(void))

void Simulator_obj::checkForSelection(){
            	HX_STACKFRAME(&_hx_pos_e50d501cddc27c81_119_checkForSelection)
HXLINE( 119)		int _g = (int)0;
HXDLIN( 119)		::Array< ::Dynamic> _g1 = ::com::lak::IsoWorld_obj::instance->worldObject;
HXDLIN( 119)		while((_g < _g1->length)){
HXLINE( 119)			 ::com::lak::entities::IsoObject obj = _g1->__get(_g).StaticCast<  ::com::lak::entities::IsoObject >();
HXDLIN( 119)			_g = (_g + (int)1);
HXLINE( 121)			bool _hx_tmp;
HXDLIN( 121)			bool _hx_tmp1;
HXDLIN( 121)			if (::Std_obj::is(obj,hx::ClassOf< ::com::lak::entities::IsoUnit >())) {
HXLINE( 121)				_hx_tmp1 = obj->get_visible();
            			}
            			else {
HXLINE( 121)				_hx_tmp1 = false;
            			}
HXDLIN( 121)			if (_hx_tmp1) {
HXLINE( 121)				 ::openfl::geom::Rectangle _hx_tmp2 = ::com::lak::renderers::Renderer_obj::instance->selectionSprt->selectionRect;
HXDLIN( 121)				Float _hx_tmp3 = obj->get_x();
HXDLIN( 121)				_hx_tmp = _hx_tmp2->contains(_hx_tmp3,obj->get_y());
            			}
            			else {
HXLINE( 121)				_hx_tmp = false;
            			}
HXDLIN( 121)			if (_hx_tmp) {
HXLINE( 123)				::com::lak::renderers::Renderer_obj::instance->createEllipse(obj,(int)16711935);
HXLINE( 124)				 ::com::lak::simulator::manager::ArmyManager _hx_tmp4 = this->armyManager;
HXDLIN( 124)				_hx_tmp4->selectUnit(hx::TCast<  ::com::lak::entities::IsoUnit >::cast(obj));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Simulator_obj,checkForSelection,(void))

void Simulator_obj::run(int delta){
            	HX_STACKFRAME(&_hx_pos_e50d501cddc27c81_129_run)
HXLINE( 130)		this->renderer->run(delta);
HXLINE( 131)		this->checkKeys();
HXLINE( 132)		this->entitiesManager->run(delta);
HXLINE( 133)		this->attackMananger->run(delta);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Simulator_obj,run,(void))

 ::com::lak::simulator::Simulator Simulator_obj::instance;


hx::ObjectPtr< Simulator_obj > Simulator_obj::__new() {
	hx::ObjectPtr< Simulator_obj > __this = new Simulator_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Simulator_obj > Simulator_obj::__alloc(hx::Ctx *_hx_ctx) {
	Simulator_obj *__this = (Simulator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Simulator_obj), true, "com.lak.simulator.Simulator"));
	*(void **)__this = Simulator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Simulator_obj::Simulator_obj()
{
}

void Simulator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Simulator);
	HX_MARK_MEMBER_NAME(renderer,"renderer");
	HX_MARK_MEMBER_NAME(aKeyPress,"aKeyPress");
	HX_MARK_MEMBER_NAME(entitiesManager,"entitiesManager");
	HX_MARK_MEMBER_NAME(attackMananger,"attackMananger");
	HX_MARK_MEMBER_NAME(armyManager,"armyManager");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Simulator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(renderer,"renderer");
	HX_VISIT_MEMBER_NAME(aKeyPress,"aKeyPress");
	HX_VISIT_MEMBER_NAME(entitiesManager,"entitiesManager");
	HX_VISIT_MEMBER_NAME(attackMananger,"attackMananger");
	HX_VISIT_MEMBER_NAME(armyManager,"armyManager");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Simulator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { return hx::Val( renderer); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aKeyPress") ) { return hx::Val( aKeyPress); }
		if (HX_FIELD_EQ(inName,"checkKeys") ) { return hx::Val( checkKeys_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"armyManager") ) { return hx::Val( armyManager); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initilizeUnit") ) { return hx::Val( initilizeUnit_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"attackMananger") ) { return hx::Val( attackMananger); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"entitiesManager") ) { return hx::Val( entitiesManager); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkForSelection") ) { return hx::Val( checkForSelection_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Simulator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val Simulator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=inValue.Cast<  ::com::lak::renderers::Renderer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aKeyPress") ) { aKeyPress=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"armyManager") ) { armyManager=inValue.Cast<  ::com::lak::simulator::manager::ArmyManager >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"attackMananger") ) { attackMananger=inValue.Cast<  ::com::lak::simulator::manager::AttackMananger >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"entitiesManager") ) { entitiesManager=inValue.Cast<  ::com::lak::simulator::manager::EntitiesManager >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Simulator_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::com::lak::simulator::Simulator >(); return true; }
	}
	return false;
}

void Simulator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("aKeyPress","\xe5","\x7e","\x1c","\xd4"));
	outFields->push(HX_HCSTRING("entitiesManager","\x2c","\xde","\xca","\x0f"));
	outFields->push(HX_HCSTRING("attackMananger","\xd5","\x44","\x8f","\x99"));
	outFields->push(HX_HCSTRING("armyManager","\x50","\x65","\x24","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Simulator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::lak::renderers::Renderer*/ ,(int)offsetof(Simulator_obj,renderer),HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Simulator_obj,aKeyPress),HX_HCSTRING("aKeyPress","\xe5","\x7e","\x1c","\xd4")},
	{hx::fsObject /*::com::lak::simulator::manager::EntitiesManager*/ ,(int)offsetof(Simulator_obj,entitiesManager),HX_HCSTRING("entitiesManager","\x2c","\xde","\xca","\x0f")},
	{hx::fsObject /*::com::lak::simulator::manager::AttackMananger*/ ,(int)offsetof(Simulator_obj,attackMananger),HX_HCSTRING("attackMananger","\xd5","\x44","\x8f","\x99")},
	{hx::fsObject /*::com::lak::simulator::manager::ArmyManager*/ ,(int)offsetof(Simulator_obj,armyManager),HX_HCSTRING("armyManager","\x50","\x65","\x24","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Simulator_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::lak::simulator::Simulator*/ ,(void *) &Simulator_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Simulator_obj_sMemberFields[] = {
	HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"),
	HX_HCSTRING("aKeyPress","\xe5","\x7e","\x1c","\xd4"),
	HX_HCSTRING("entitiesManager","\x2c","\xde","\xca","\x0f"),
	HX_HCSTRING("attackMananger","\xd5","\x44","\x8f","\x99"),
	HX_HCSTRING("armyManager","\x50","\x65","\x24","\x30"),
	HX_HCSTRING("initilizeUnit","\x65","\x61","\x4c","\xb5"),
	HX_HCSTRING("checkKeys","\xdc","\xaa","\xe6","\x9a"),
	HX_HCSTRING("checkForSelection","\xeb","\x58","\x7c","\x73"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void Simulator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Simulator_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Simulator_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Simulator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Simulator_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Simulator_obj::instance,"instance");
};

#endif

hx::Class Simulator_obj::__mClass;

static ::String Simulator_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void Simulator_obj::__register()
{
	hx::Object *dummy = new Simulator_obj;
	Simulator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.Simulator","\xb5","\x65","\xa4","\x50");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Simulator_obj::__GetStatic;
	__mClass->mSetStaticField = &Simulator_obj::__SetStatic;
	__mClass->mMarkFunc = Simulator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Simulator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Simulator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Simulator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Simulator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Simulator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Simulator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
