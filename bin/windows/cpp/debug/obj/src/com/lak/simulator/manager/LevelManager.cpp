// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_lak_IsoWorld
#include <com/lak/IsoWorld.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoObject
#include <com/lak/entities/IsoObject.h>
#endif
#ifndef INCLUDED_com_lak_entities_IsoUnit
#include <com/lak/entities/IsoUnit.h>
#endif
#ifndef INCLUDED_com_lak_simulator_manager_LevelManager
#include <com/lak/simulator/manager/LevelManager.h>
#endif
#ifndef INCLUDED_com_lak_utils_GameUtils
#include <com/lak/utils/GameUtils.h>
#endif
#ifndef INCLUDED_com_lak_utils_IsoUtils
#include <com/lak/utils/IsoUtils.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_20eb0cef224da4c1_13_new,"com.lak.simulator.manager.LevelManager","new",0x6e78204b,"com.lak.simulator.manager.LevelManager.new","com/lak/simulator/manager/LevelManager.hx",13,0x9f35d001)
HX_LOCAL_STACK_FRAME(_hx_pos_20eb0cef224da4c1_28_get9Nodes,"com.lak.simulator.manager.LevelManager","get9Nodes",0x32036079,"com.lak.simulator.manager.LevelManager.get9Nodes","com/lak/simulator/manager/LevelManager.hx",28,0x9f35d001)
HX_LOCAL_STACK_FRAME(_hx_pos_20eb0cef224da4c1_35_mapPartArray,"com.lak.simulator.manager.LevelManager","mapPartArray",0x5652451f,"com.lak.simulator.manager.LevelManager.mapPartArray","com/lak/simulator/manager/LevelManager.hx",35,0x9f35d001)
HX_LOCAL_STACK_FRAME(_hx_pos_20eb0cef224da4c1_50_getNodeAt,"com.lak.simulator.manager.LevelManager","getNodeAt",0x907662f6,"com.lak.simulator.manager.LevelManager.getNodeAt","com/lak/simulator/manager/LevelManager.hx",50,0x9f35d001)
HX_LOCAL_STACK_FRAME(_hx_pos_20eb0cef224da4c1_64_getUnitAdjacentNodes,"com.lak.simulator.manager.LevelManager","getUnitAdjacentNodes",0x3ee7712a,"com.lak.simulator.manager.LevelManager.getUnitAdjacentNodes","com/lak/simulator/manager/LevelManager.hx",64,0x9f35d001)
namespace com{
namespace lak{
namespace simulator{
namespace manager{

void LevelManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_20eb0cef224da4c1_13_new)
HXLINE(  16)		this->registeredMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  20)		::com::lak::simulator::manager::LevelManager_obj::instance = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic LevelManager_obj::__CreateEmpty() { return new LevelManager_obj; }

void *LevelManager_obj::_hx_vtable = 0;

Dynamic LevelManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LevelManager_obj > _hx_result = new LevelManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LevelManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f423d2b;
}

void LevelManager_obj::get9Nodes( ::com::lak::entities::IsoUnit _unit){
            	HX_STACKFRAME(&_hx_pos_20eb0cef224da4c1_28_get9Nodes)
HXLINE(  28)		Float _hx_tmp = _unit->get_x();
HXDLIN(  28)		::String _hx_tmp1 = ((HX_("part_",0c,91,55,bd) + ::Math_obj::floor(((Float)_hx_tmp / (Float)(::com::lak::IsoWorld_obj::instance->tileW * ::com::lak::IsoWorld_obj::instance->PART_NUM_TILE_W)))) + HX_("-",2d,00,00,00));
HXDLIN(  28)		Float _hx_tmp2 = _unit->get_y();
HXDLIN(  28)		this->getUnitAdjacentNodes(_unit,(_hx_tmp1 + (::Math_obj::floor(((Float)_hx_tmp2 / (Float)(::com::lak::IsoWorld_obj::instance->halfH * ::com::lak::IsoWorld_obj::instance->PART_NUM_TILE_H))) + HX_(".txt",02,3f,c0,1e))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LevelManager_obj,get9Nodes,(void))

::cpp::VirtualArray LevelManager_obj::mapPartArray(::String partName){
            	HX_STACKFRAME(&_hx_pos_20eb0cef224da4c1_35_mapPartArray)
HXLINE(  36)		if (hx::IsNull( ( (::cpp::VirtualArray)(this->registeredMap->get(partName)) ) )) {
HXLINE(  37)			 ::openfl::utils::ByteArrayData bytes = ::openfl::utils::Assets_obj::getBytes((HX_("world1/",b0,79,74,a1) + partName));
HXLINE(  38)			bytes->uncompress(null());
HXLINE(  39)			::String str = bytes->toString();
HXLINE(  40)			{
HXLINE(  40)				::Dynamic this1 = this->registeredMap;
HXDLIN(  40)				( ( ::haxe::ds::StringMap)(this1) )->set(partName,::com::lak::utils::GameUtils_obj::to2DDimension(str,partName,null()));
            			}
            		}
HXLINE(  43)		return this->registeredMap->get(partName);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LevelManager_obj,mapPartArray,return )

 ::Dynamic LevelManager_obj::getNodeAt(int line,int col){
            	HX_STACKFRAME(&_hx_pos_20eb0cef224da4c1_50_getNodeAt)
HXLINE(  51)		int lineIndex = ::Std_obj::_hx_int(::Math_obj::floor(((Float)line / (Float)::com::lak::IsoWorld_obj::instance->PART_NUM_TILE_W)));
HXLINE(  52)		int colIndex = ::Std_obj::_hx_int(::Math_obj::floor(((Float)col / (Float)::com::lak::IsoWorld_obj::instance->PART_NUM_TILE_H)));
HXLINE(  54)		::cpp::VirtualArray tempLevel = this->mapPartArray(((((HX_("part_",0c,91,55,bd) + lineIndex) + HX_("-",2d,00,00,00)) + colIndex) + HX_(".txt",02,3f,c0,1e)));
HXLINE(  55)		return tempLevel->__get(hx::Mod(line,(int)100))->__GetItem(hx::Mod(col,(int)100));
            	}


HX_DEFINE_DYNAMIC_FUNC2(LevelManager_obj,getNodeAt,return )

void LevelManager_obj::getUnitAdjacentNodes( ::com::lak::entities::IsoUnit _unit,::String partName){
            	HX_GC_STACKFRAME(&_hx_pos_20eb0cef224da4c1_64_getUnitAdjacentNodes)
HXLINE(  66)		Float pt = _unit->get_x();
HXDLIN(  66)		 ::openfl::geom::Point pt1 = ::com::lak::utils::IsoUtils_obj::getTileAt( ::openfl::geom::Point_obj::__alloc( HX_CTX ,pt,_unit->get_y()),null());
HXLINE(  67)		 ::openfl::geom::Point temp_pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  68)		_unit->nodeTab = ::cpp::VirtualArray_obj::__new();
HXLINE(  70)		{
HXLINE(  70)			int _g1 = (int)0;
HXDLIN(  70)			int _g = ::com::lak::utils::IsoUtils_obj::spiralWalkStepArray->length;
HXDLIN(  70)			while((_g1 < _g)){
HXLINE(  70)				_g1 = (_g1 + (int)1);
HXDLIN(  70)				int i = (_g1 - (int)1);
HXLINE(  71)				temp_pt = ::com::lak::utils::IsoUtils_obj::slideMapTileWalker(pt1,::com::lak::utils::IsoUtils_obj::spiralWalkStepArray->__get(i),null());
HXLINE(  72)				int n = ::Std_obj::_hx_int(temp_pt->x);
HXDLIN(  72)				 ::Dynamic n1 = this->getNodeAt(n,::Std_obj::_hx_int(temp_pt->y));
HXLINE(  73)				n1->__SetField(HX_("direction",3f,62,40,10),::com::lak::utils::IsoUtils_obj::spiralWalkStepArray->__get(i),hx::paccDynamic);
HXLINE(  74)				_unit->nodeTab->push(n1);
            			}
            		}
HXLINE(  76)		_unit->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(LevelManager_obj,getUnitAdjacentNodes,(void))

 ::com::lak::simulator::manager::LevelManager LevelManager_obj::instance;


hx::ObjectPtr< LevelManager_obj > LevelManager_obj::__new() {
	hx::ObjectPtr< LevelManager_obj > __this = new LevelManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< LevelManager_obj > LevelManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	LevelManager_obj *__this = (LevelManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LevelManager_obj), true, "com.lak.simulator.manager.LevelManager"));
	*(void **)__this = LevelManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LevelManager_obj::LevelManager_obj()
{
}

void LevelManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LevelManager);
	HX_MARK_MEMBER_NAME(registeredMap,"registeredMap");
	HX_MARK_MEMBER_NAME(tempUnit,"tempUnit");
	HX_MARK_END_CLASS();
}

void LevelManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(registeredMap,"registeredMap");
	HX_VISIT_MEMBER_NAME(tempUnit,"tempUnit");
}

hx::Val LevelManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"tempUnit") ) { return hx::Val( tempUnit); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get9Nodes") ) { return hx::Val( get9Nodes_dyn()); }
		if (HX_FIELD_EQ(inName,"getNodeAt") ) { return hx::Val( getNodeAt_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mapPartArray") ) { return hx::Val( mapPartArray_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"registeredMap") ) { return hx::Val( registeredMap); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getUnitAdjacentNodes") ) { return hx::Val( getUnitAdjacentNodes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool LevelManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val LevelManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"tempUnit") ) { tempUnit=inValue.Cast<  ::com::lak::entities::IsoUnit >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"registeredMap") ) { registeredMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool LevelManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::com::lak::simulator::manager::LevelManager >(); return true; }
	}
	return false;
}

void LevelManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("registeredMap","\x3a","\x02","\x08","\xcc"));
	outFields->push(HX_HCSTRING("tempUnit","\xb8","\xd3","\x1d","\x9d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LevelManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(LevelManager_obj,registeredMap),HX_HCSTRING("registeredMap","\x3a","\x02","\x08","\xcc")},
	{hx::fsObject /*::com::lak::entities::IsoUnit*/ ,(int)offsetof(LevelManager_obj,tempUnit),HX_HCSTRING("tempUnit","\xb8","\xd3","\x1d","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo LevelManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::lak::simulator::manager::LevelManager*/ ,(void *) &LevelManager_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String LevelManager_obj_sMemberFields[] = {
	HX_HCSTRING("registeredMap","\x3a","\x02","\x08","\xcc"),
	HX_HCSTRING("tempUnit","\xb8","\xd3","\x1d","\x9d"),
	HX_HCSTRING("get9Nodes","\x4e","\xce","\x05","\x45"),
	HX_HCSTRING("mapPartArray","\x6a","\x6a","\x9c","\x29"),
	HX_HCSTRING("getNodeAt","\xcb","\xd0","\x78","\xa3"),
	HX_HCSTRING("getUnitAdjacentNodes","\x75","\x59","\x18","\x1d"),
	::String(null()) };

static void LevelManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LevelManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(LevelManager_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LevelManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LevelManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(LevelManager_obj::instance,"instance");
};

#endif

hx::Class LevelManager_obj::__mClass;

static ::String LevelManager_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void LevelManager_obj::__register()
{
	hx::Object *dummy = new LevelManager_obj;
	LevelManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.lak.simulator.manager.LevelManager","\xd9","\x9e","\xa1","\x29");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LevelManager_obj::__GetStatic;
	__mClass->mSetStaticField = &LevelManager_obj::__SetStatic;
	__mClass->mMarkFunc = LevelManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LevelManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LevelManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LevelManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LevelManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LevelManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LevelManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace manager
