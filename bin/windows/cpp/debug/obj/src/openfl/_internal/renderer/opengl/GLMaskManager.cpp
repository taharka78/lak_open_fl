// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskManager
#include <openfl/_internal/renderer/opengl/GLMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_33_new,"openfl._internal.renderer.opengl.GLMaskManager","new",0xce241a4a,"openfl._internal.renderer.opengl.GLMaskManager.new","openfl/_internal/renderer/opengl/GLMaskManager.hx",33,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_50_pushMask,"openfl._internal.renderer.opengl.GLMaskManager","pushMask",0xd450f9bc,"openfl._internal.renderer.opengl.GLMaskManager.pushMask","openfl/_internal/renderer/opengl/GLMaskManager.hx",50,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_55_pushObject,"openfl._internal.renderer.opengl.GLMaskManager","pushObject",0x9ff60b8f,"openfl._internal.renderer.opengl.GLMaskManager.pushObject","openfl/_internal/renderer/opengl/GLMaskManager.hx",55,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_72_pushRect,"openfl._internal.renderer.opengl.GLMaskManager","pushRect",0xd7a205f4,"openfl._internal.renderer.opengl.GLMaskManager.pushRect","openfl/_internal/renderer/opengl/GLMaskManager.hx",72,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_114_popMask,"openfl._internal.renderer.opengl.GLMaskManager","popMask",0x34fdee07,"openfl._internal.renderer.opengl.GLMaskManager.popMask","openfl/_internal/renderer/opengl/GLMaskManager.hx",114,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_119_popObject,"openfl._internal.renderer.opengl.GLMaskManager","popObject",0x3d00e89a,"openfl._internal.renderer.opengl.GLMaskManager.popObject","openfl/_internal/renderer/opengl/GLMaskManager.hx",119,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_138_popRect,"openfl._internal.renderer.opengl.GLMaskManager","popRect",0x384efa3f,"openfl._internal.renderer.opengl.GLMaskManager.popRect","openfl/_internal/renderer/opengl/GLMaskManager.hx",138,0x0550a1c8)
HX_LOCAL_STACK_FRAME(_hx_pos_5ff60bcfe7d9703d_159_scissorRect,"openfl._internal.renderer.opengl.GLMaskManager","scissorRect",0x26bf234a,"openfl._internal.renderer.opengl.GLMaskManager.scissorRect","openfl/_internal/renderer/opengl/GLMaskManager.hx",159,0x0550a1c8)
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLMaskManager_obj::__construct( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_33_new)
HXLINE(  35)		super::__construct(renderSession);
HXLINE(  37)		this->gl = renderSession->gl;
HXLINE(  39)		this->clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE(  40)		this->numClipRects = (int)0;
HXLINE(  41)		this->tempRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic GLMaskManager_obj::__CreateEmpty() { return new GLMaskManager_obj; }

void *GLMaskManager_obj::_hx_vtable = 0;

Dynamic GLMaskManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLMaskManager_obj > _hx_result = new GLMaskManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GLMaskManager_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x02b763fc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x02b763fc;
	} else {
		return inClassId==(int)0x421e3c3e;
	}
}

void GLMaskManager_obj::pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_50_pushMask)
HXLINE(  50)		 ::openfl::geom::Rectangle _hx_tmp = mask->getBounds(mask);
HXDLIN(  50)		this->pushRect(_hx_tmp,mask->_hx___getRenderTransform());
            	}


void GLMaskManager_obj::pushObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_55_pushObject)
HXLINE(  57)		bool _hx_tmp;
HXDLIN(  57)		if (handleScrollRect) {
HXLINE(  57)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE(  57)			_hx_tmp = false;
            		}
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  59)			this->pushRect(object->_hx___scrollRect,object->_hx___renderTransform);
            		}
HXLINE(  63)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE(  65)			this->pushMask(object->_hx___mask);
            		}
            	}


void GLMaskManager_obj::pushRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_72_pushRect)
HXLINE(  76)		 ::openfl::display::Stage stage = ::openfl::Lib_obj::current->stage;
HXLINE(  78)		if ((this->numClipRects == this->clipRects->length)) {
HXLINE(  80)			::Array< ::Dynamic> _hx_tmp = this->clipRects;
HXDLIN(  80)			int _hx_tmp1 = this->numClipRects;
HXDLIN(  80)			_hx_tmp[_hx_tmp1] =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(  84)		 ::openfl::geom::Rectangle clipRect = this->clipRects->__get(this->numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  85)		rect->_hx___transform(clipRect,transform);
HXLINE(  87)		if ((this->numClipRects > (int)0)) {
HXLINE(  89)			::Array< ::Dynamic> parentClipRect = this->clipRects;
HXDLIN(  89)			 ::openfl::geom::Rectangle parentClipRect1 = parentClipRect->__get((this->numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  90)			clipRect->_hx___contract(parentClipRect1->x,parentClipRect1->y,parentClipRect1->width,parentClipRect1->height);
            		}
HXLINE(  94)		if ((clipRect->height < (int)0)) {
HXLINE(  96)			clipRect->height = (int)0;
            		}
HXLINE( 100)		if ((clipRect->width < (int)0)) {
HXLINE( 102)			clipRect->width = (int)0;
            		}
HXLINE( 106)		this->scissorRect(clipRect);
HXLINE( 107)		this->numClipRects++;
            	}


void GLMaskManager_obj::popMask(){
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_114_popMask)
HXLINE( 114)		this->popRect();
            	}


void GLMaskManager_obj::popObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_119_popObject)
HXLINE( 121)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 123)			this->popMask();
            		}
HXLINE( 127)		bool _hx_tmp;
HXDLIN( 127)		if (handleScrollRect) {
HXLINE( 127)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 127)			_hx_tmp = false;
            		}
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 129)			this->popRect();
            		}
            	}


void GLMaskManager_obj::popRect(){
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_138_popRect)
HXLINE( 138)		if ((this->numClipRects > (int)0)) {
HXLINE( 140)			this->numClipRects--;
HXLINE( 142)			if ((this->numClipRects > (int)0)) {
HXLINE( 144)				::Array< ::Dynamic> _hx_tmp = this->clipRects;
HXDLIN( 144)				this->scissorRect(_hx_tmp->__get((this->numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >());
            			}
            			else {
HXLINE( 148)				this->scissorRect(null());
            			}
            		}
            	}


void GLMaskManager_obj::scissorRect( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_5ff60bcfe7d9703d_159_scissorRect)
HXLINE( 159)		if (hx::IsNotNull( rect )) {
HXLINE( 161)			 ::openfl::_internal::renderer::opengl::GLRenderer renderer = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(this->renderSession->renderer) );
HXLINE( 163)			this->gl->enable(this->gl->SCISSOR_TEST);
HXLINE( 165)			 ::openfl::geom::Rectangle clipRect = this->tempRect;
HXLINE( 166)			rect->_hx___transform(clipRect,renderer->displayMatrix);
HXLINE( 168)			int x = ::Math_obj::floor(clipRect->x);
HXLINE( 169)			int y = ::Math_obj::floor(((renderer->height - clipRect->y) - clipRect->height));
HXLINE( 170)			int width = ::Math_obj::ceil(clipRect->width);
HXLINE( 171)			int height = ::Math_obj::ceil(clipRect->height);
HXLINE( 173)			if ((width < (int)0)) {
HXLINE( 173)				width = (int)0;
            			}
HXLINE( 174)			if ((height < (int)0)) {
HXLINE( 174)				height = (int)0;
            			}
HXLINE( 176)			this->gl->scissor(x,y,width,height);
            		}
            		else {
HXLINE( 180)			this->gl->disable(this->gl->SCISSOR_TEST);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLMaskManager_obj,scissorRect,(void))


hx::ObjectPtr< GLMaskManager_obj > GLMaskManager_obj::__new( ::openfl::_internal::renderer::RenderSession renderSession) {
	hx::ObjectPtr< GLMaskManager_obj > __this = new GLMaskManager_obj();
	__this->__construct(renderSession);
	return __this;
}

hx::ObjectPtr< GLMaskManager_obj > GLMaskManager_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_internal::renderer::RenderSession renderSession) {
	GLMaskManager_obj *__this = (GLMaskManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLMaskManager_obj), true, "openfl._internal.renderer.opengl.GLMaskManager"));
	*(void **)__this = GLMaskManager_obj::_hx_vtable;
	__this->__construct(renderSession);
	return __this;
}

GLMaskManager_obj::GLMaskManager_obj()
{
}

void GLMaskManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLMaskManager);
	HX_MARK_MEMBER_NAME(clipRects,"clipRects");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(numClipRects,"numClipRects");
	HX_MARK_MEMBER_NAME(tempRect,"tempRect");
	 ::openfl::_internal::renderer::AbstractMaskManager_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GLMaskManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clipRects,"clipRects");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(numClipRects,"numClipRects");
	HX_VISIT_MEMBER_NAME(tempRect,"tempRect");
	 ::openfl::_internal::renderer::AbstractMaskManager_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GLMaskManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"popMask") ) { return hx::Val( popMask_dyn()); }
		if (HX_FIELD_EQ(inName,"popRect") ) { return hx::Val( popRect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tempRect") ) { return hx::Val( tempRect); }
		if (HX_FIELD_EQ(inName,"pushMask") ) { return hx::Val( pushMask_dyn()); }
		if (HX_FIELD_EQ(inName,"pushRect") ) { return hx::Val( pushRect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clipRects") ) { return hx::Val( clipRects); }
		if (HX_FIELD_EQ(inName,"popObject") ) { return hx::Val( popObject_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pushObject") ) { return hx::Val( pushObject_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scissorRect") ) { return hx::Val( scissorRect_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numClipRects") ) { return hx::Val( numClipRects); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLMaskManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tempRect") ) { tempRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clipRects") ) { clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numClipRects") ) { numClipRects=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLMaskManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac"));
	outFields->push(HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLMaskManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(GLMaskManager_obj,clipRects),HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(GLMaskManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(GLMaskManager_obj,numClipRects),HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(GLMaskManager_obj,tempRect),HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLMaskManager_obj_sStaticStorageInfo = 0;
#endif

static ::String GLMaskManager_obj_sMemberFields[] = {
	HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac"),
	HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b"),
	HX_HCSTRING("pushMask","\xe6","\x73","\x47","\x17"),
	HX_HCSTRING("pushObject","\x39","\xe4","\x1e","\x69"),
	HX_HCSTRING("pushRect","\x1e","\x80","\x98","\x1a"),
	HX_HCSTRING("popMask","\x1d","\x67","\x11","\x43"),
	HX_HCSTRING("popObject","\x30","\x53","\xb5","\x91"),
	HX_HCSTRING("popRect","\x55","\x73","\x62","\x46"),
	HX_HCSTRING("scissorRect","\x60","\xdf","\x53","\x61"),
	::String(null()) };

static void GLMaskManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLMaskManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLMaskManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLMaskManager_obj::__mClass,"__mClass");
};

#endif

hx::Class GLMaskManager_obj::__mClass;

void GLMaskManager_obj::__register()
{
	hx::Object *dummy = new GLMaskManager_obj;
	GLMaskManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLMaskManager","\x58","\xed","\xaa","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLMaskManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLMaskManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLMaskManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLMaskManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLMaskManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLMaskManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
