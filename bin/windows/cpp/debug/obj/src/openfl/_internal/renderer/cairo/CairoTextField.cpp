// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoFTFontFace_CairoFTFontFace_Impl_
#include <lime/graphics/cairo/_CairoFTFontFace/CairoFTFontFace_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoFontOptions_CairoFontOptions_Impl_
#include <lime/graphics/cairo/_CairoFontOptions/CairoFontOptions_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0e9241bd5d873906_35_render,"openfl._internal.renderer.cairo.CairoTextField","render",0xabb9797e,"openfl._internal.renderer.cairo.CairoTextField.render","openfl/_internal/renderer/cairo/CairoTextField.hx",35,0xfadfb778)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoTextField_obj::__construct() { }

Dynamic CairoTextField_obj::__CreateEmpty() { return new CairoTextField_obj; }

void *CairoTextField_obj::_hx_vtable = 0;

Dynamic CairoTextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoTextField_obj > _hx_result = new CairoTextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CairoTextField_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76dbe9c2;
}

void CairoTextField_obj::render( ::openfl::text::TextField textField, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_0e9241bd5d873906_35_render)
HXLINE(  39)		 ::openfl::_internal::text::TextEngine textEngine = textField->_hx___textEngine;
HXLINE(  40)		 ::openfl::geom::Rectangle bounds = textEngine->bounds;
HXLINE(  41)		 ::openfl::display::Graphics graphics = textField->_hx___graphics;
HXLINE(  42)		 ::lime::graphics::cairo::Cairo cairo = graphics->_hx___cairo;
HXLINE(  44)		if (textField->_hx___dirty) {
HXLINE(  46)			textField->_hx___updateLayout();
HXLINE(  48)			if (hx::IsNull( graphics->_hx___bounds )) {
HXLINE(  50)				graphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(  54)			graphics->_hx___bounds->copyFrom(bounds);
            		}
HXLINE(  61)		graphics->_hx___update();
HXLINE(  63)		int width = graphics->_hx___width;
HXLINE(  64)		int height = graphics->_hx___height;
HXLINE(  66)		bool renderable;
HXDLIN(  66)		bool renderable1;
HXDLIN(  66)		if (!(textEngine->border)) {
HXLINE(  66)			renderable1 = textEngine->background;
            		}
            		else {
HXLINE(  66)			renderable1 = true;
            		}
HXDLIN(  66)		if (!(renderable1)) {
HXLINE(  66)			if (hx::IsNotNull( textEngine->text )) {
HXLINE(  66)				renderable = (textEngine->text != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  66)				renderable = false;
            			}
            		}
            		else {
HXLINE(  66)			renderable = true;
            		}
HXLINE(  68)		if (hx::IsNotNull( cairo )) {
HXLINE(  71)			 ::Dynamic surface = graphics->_hx___bitmap->getSurface();
HXLINE(  73)			bool _hx_tmp;
HXDLIN(  73)			if (!(!(renderable))) {
HXLINE(  73)				if (graphics->_hx___dirty) {
HXLINE(  73)					if ((width == ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface))) {
HXLINE(  73)						_hx_tmp = (height != ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface));
            					}
            					else {
HXLINE(  73)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  73)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(  73)				_hx_tmp = true;
            			}
HXDLIN(  73)			if (_hx_tmp) {
HXLINE(  75)				graphics->_hx___cairo = null();
HXLINE(  76)				graphics->_hx___bitmap = null();
HXLINE(  77)				graphics->_hx___visible = false;
HXLINE(  78)				cairo = null();
            			}
            		}
HXLINE(  84)		bool _hx_tmp1;
HXDLIN(  84)		bool _hx_tmp2;
HXDLIN(  84)		bool _hx_tmp3;
HXDLIN(  84)		if ((width > (int)0)) {
HXLINE(  84)			_hx_tmp3 = (height <= (int)0);
            		}
            		else {
HXLINE(  84)			_hx_tmp3 = true;
            		}
HXDLIN(  84)		if (!(_hx_tmp3)) {
HXLINE(  84)			if (!(textField->_hx___dirty)) {
HXLINE(  84)				_hx_tmp2 = !(graphics->_hx___dirty);
            			}
            			else {
HXLINE(  84)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE(  84)			_hx_tmp2 = true;
            		}
HXDLIN(  84)		if (!(_hx_tmp2)) {
HXLINE(  84)			_hx_tmp1 = !(renderable);
            		}
            		else {
HXLINE(  84)			_hx_tmp1 = true;
            		}
HXDLIN(  84)		if (_hx_tmp1) {
HXLINE(  86)			textField->_hx___dirty = false;
HXLINE(  87)			return;
            		}
HXLINE(  91)		if (hx::IsNull( cairo )) {
HXLINE(  93)			 ::openfl::display::BitmapData bitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE(  94)			 ::Dynamic surface1 = bitmap->getSurface();
HXLINE(  95)			graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,surface1);
HXLINE(  96)			graphics->_hx___visible = true;
HXLINE(  97)			graphics->_hx___managed = true;
HXLINE(  99)			graphics->_hx___bitmap = bitmap;
HXLINE( 101)			cairo = graphics->_hx___cairo;
HXLINE( 103)			 ::Dynamic options = ::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::_new();
HXLINE( 105)			bool _hx_tmp4;
HXDLIN( 105)			if (hx::IsEq( textEngine->antiAliasType,(int)0 )) {
HXLINE( 105)				_hx_tmp4 = (textEngine->sharpness == (int)400);
            			}
            			else {
HXLINE( 105)				_hx_tmp4 = false;
            			}
HXDLIN( 105)			if (_hx_tmp4) {
HXLINE( 107)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintStyle(options,(int)1);
HXLINE( 108)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintMetrics(options,(int)1);
HXLINE( 109)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_antialias(options,(int)1);
            			}
            			else {
HXLINE( 113)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintStyle(options,(int)2);
HXLINE( 114)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintMetrics(options,(int)1);
HXLINE( 115)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_antialias(options,(int)5);
            			}
HXLINE( 119)			cairo->set_fontOptions(options);
            		}
HXLINE( 123)		{
HXLINE( 125)			 ::lime::math::Matrix3 matrix = graphics->_hx___renderTransform->_hx___toMatrix3();
HXLINE( 126)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE( 127)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE( 128)			cairo->set_matrix(matrix);
            		}
HXLINE( 136)		if (textEngine->border) {
HXLINE( 138)			int _hx_tmp5 = ::Std_obj::_hx_int((bounds->width - (int)1));
HXDLIN( 138)			cairo->rectangle(((Float)0.5),((Float)0.5),_hx_tmp5,::Std_obj::_hx_int((bounds->height - (int)1)));
            		}
            		else {
HXLINE( 142)			cairo->rectangle((int)0,(int)0,bounds->width,bounds->height);
            		}
HXLINE( 146)		if (!(textEngine->background)) {
HXLINE( 148)			cairo->set_operator((int)0);
HXLINE( 149)			cairo->paint();
HXLINE( 150)			cairo->set_operator((int)2);
            		}
            		else {
HXLINE( 154)			int color = textEngine->backgroundColor;
HXLINE( 155)			Float r = ((Float)hx::UShr(((int)color & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 156)			Float g = ((Float)hx::UShr(((int)color & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 157)			Float b = ((Float)((int)color & (int)(int)255) / (Float)(int)255);
HXLINE( 159)			cairo->setSourceRGB(r,g,b);
HXLINE( 160)			cairo->fillPreserve();
            		}
HXLINE( 164)		if (textEngine->border) {
HXLINE( 166)			int color1 = textEngine->borderColor;
HXLINE( 167)			Float r1 = ((Float)hx::UShr(((int)color1 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 168)			Float g1 = ((Float)hx::UShr(((int)color1 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 169)			Float b1 = ((Float)((int)color1 & (int)(int)255) / (Float)(int)255);
HXLINE( 171)			cairo->setSourceRGB(r1,g1,b1);
HXLINE( 172)			cairo->set_lineWidth((int)1);
HXLINE( 173)			cairo->stroke();
            		}
HXLINE( 177)		bool _hx_tmp6;
HXDLIN( 177)		if (hx::IsNotNull( textEngine->text )) {
HXLINE( 177)			_hx_tmp6 = (textEngine->text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 177)			_hx_tmp6 = false;
            		}
HXDLIN( 177)		if (_hx_tmp6) {
HXLINE( 179)			Float bounds1 = bounds->width;
HXDLIN( 179)			int _hx_tmp7;
HXDLIN( 179)			if (textField->get_border()) {
HXLINE( 179)				_hx_tmp7 = (int)1;
            			}
            			else {
HXLINE( 179)				_hx_tmp7 = (int)0;
            			}
HXDLIN( 179)			Float _hx_tmp8 = (bounds1 - _hx_tmp7);
HXDLIN( 179)			Float bounds2 = bounds->height;
HXDLIN( 179)			int _hx_tmp9;
HXDLIN( 179)			if (textField->get_border()) {
HXLINE( 179)				_hx_tmp9 = (int)1;
            			}
            			else {
HXLINE( 179)				_hx_tmp9 = (int)0;
            			}
HXDLIN( 179)			cairo->rectangle((int)0,(int)0,_hx_tmp8,(bounds2 - _hx_tmp9));
HXLINE( 180)			cairo->clip();
HXLINE( 182)			::String text = textEngine->text;
HXLINE( 184)			int scrollX = -(textField->get_scrollH());
HXLINE( 185)			Float scrollY = ((Float)0.0);
HXLINE( 187)			{
HXLINE( 187)				int _g1 = (int)0;
HXDLIN( 187)				int _g = (textField->get_scrollV() - (int)1);
HXDLIN( 187)				while((_g1 < _g)){
HXLINE( 187)					_g1 = (_g1 + (int)1);
HXDLIN( 187)					int i = (_g1 - (int)1);
HXLINE( 189)					scrollY = (scrollY - textEngine->lineHeights->get(i));
            				}
            			}
HXLINE( 193)			 ::Dynamic color2;
HXDLIN( 193)			Float r2;
HXDLIN( 193)			Float g2;
HXDLIN( 193)			Float b2;
HXDLIN( 193)			 ::openfl::text::Font font;
HXDLIN( 193)			int size;
HXDLIN( 193)			Float advance;
HXLINE( 195)			{
HXLINE( 195)				int _g2 = (int)0;
HXDLIN( 195)				 ::openfl::_Vector::ObjectVector _g11 = textEngine->layoutGroups;
HXDLIN( 195)				while((_g2 < _g11->get_length())){
HXLINE( 195)					 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 195)					_g2 = (_g2 + (int)1);
HXLINE( 197)					int group1 = group->lineIndex;
HXDLIN( 197)					if ((group1 < (textField->get_scrollV() - (int)1))) {
HXLINE( 197)						continue;
            					}
HXLINE( 198)					int group2 = group->lineIndex;
HXDLIN( 198)					int _hx_tmp10 = textField->get_scrollV();
HXDLIN( 198)					if ((group2 > ((_hx_tmp10 + textEngine->bottomScrollV) - (int)2))) {
HXLINE( 198)						goto _hx_goto_1;
            					}
HXLINE( 200)					color2 = group->format->color;
HXLINE( 201)					r2 = ((Float)hx::UShr(((int)color2 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 202)					g2 = ((Float)hx::UShr(((int)color2 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 203)					b2 = ((Float)((int)color2 & (int)(int)255) / (Float)(int)255);
HXLINE( 205)					cairo->setSourceRGB(r2,g2,b2);
HXLINE( 207)					font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(group->format);
HXLINE( 209)					bool _hx_tmp11;
HXDLIN( 209)					if (hx::IsNotNull( font )) {
HXLINE( 209)						_hx_tmp11 = hx::IsNotNull( group->format->size );
            					}
            					else {
HXLINE( 209)						_hx_tmp11 = false;
            					}
HXDLIN( 209)					if (_hx_tmp11) {
HXLINE( 211)						if (hx::IsNotNull( textEngine->_hx___cairoFont )) {
HXLINE( 213)							if (hx::IsNotEq( textEngine->_hx___font,font )) {
HXLINE( 215)								textEngine->_hx___cairoFont = null();
            							}
            						}
HXLINE( 221)						if (hx::IsNull( textEngine->_hx___cairoFont )) {
HXLINE( 223)							textEngine->_hx___font = font;
HXLINE( 224)							textEngine->_hx___cairoFont = ::lime::graphics::cairo::_CairoFTFontFace::CairoFTFontFace_Impl__obj::create(font,(int)0);
            						}
HXLINE( 228)						cairo->set_fontFace(textEngine->_hx___cairoFont);
HXLINE( 230)						size = ::Std_obj::_hx_int(group->format->size);
HXLINE( 231)						cairo->setFontSize(size);
HXLINE( 233)						Float _hx_tmp12 = (group->offsetX + scrollX);
HXDLIN( 233)						cairo->moveTo(_hx_tmp12,((group->offsetY + group->ascent) + scrollY));
HXLINE( 254)						bool usedHack = false;
HXLINE( 256)						bool _hx_tmp13;
HXDLIN( 256)						if (hx::IsNotNull( textField->_hx___filters )) {
HXLINE( 256)							_hx_tmp13 = (textField->_hx___filters->length > (int)0);
            						}
            						else {
HXLINE( 256)							_hx_tmp13 = false;
            						}
HXDLIN( 256)						if (_hx_tmp13) {
HXLINE( 260)							if (::Std_obj::is(textField->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >(),hx::ClassOf< ::openfl::filters::GlowFilter >())) {
HXLINE( 262)								cairo->textPath(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,group->startIndex,group->endIndex));
HXLINE( 264)								 ::openfl::filters::GlowFilter glowFilter = ( ( ::openfl::filters::GlowFilter)(textField->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >()) );
HXLINE( 266)								color2 = glowFilter->color;
HXLINE( 267)								r2 = ((Float)hx::UShr(((int)color2 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 268)								g2 = ((Float)hx::UShr(((int)color2 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 269)								b2 = ((Float)((int)color2 & (int)(int)255) / (Float)(int)255);
HXLINE( 271)								cairo->setSourceRGBA(r2,g2,b2,glowFilter->alpha);
HXLINE( 272)								cairo->set_lineWidth(::Math_obj::max(glowFilter->blurX,glowFilter->blurY));
HXLINE( 273)								cairo->strokePreserve();
HXLINE( 275)								color2 = group->format->color;
HXLINE( 276)								r2 = ((Float)hx::UShr(((int)color2 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 277)								g2 = ((Float)hx::UShr(((int)color2 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 278)								b2 = ((Float)((int)color2 & (int)(int)255) / (Float)(int)255);
HXLINE( 280)								cairo->setSourceRGB(r2,g2,b2);
HXLINE( 282)								cairo->fillPreserve();
HXLINE( 283)								usedHack = true;
            							}
            						}
HXLINE( 289)						if (!(usedHack)) {
HXLINE( 291)							cairo->showText(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,group->startIndex,group->endIndex));
            						}
HXLINE( 295)						bool _hx_tmp14;
HXDLIN( 295)						if ((textField->_hx___caretIndex > (int)-1)) {
HXLINE( 295)							_hx_tmp14 = textEngine->selectable;
            						}
            						else {
HXLINE( 295)							_hx_tmp14 = false;
            						}
HXDLIN( 295)						if (_hx_tmp14) {
HXLINE( 297)							if ((textField->_hx___selectionIndex == textField->_hx___caretIndex)) {
HXLINE( 299)								bool _hx_tmp15;
HXDLIN( 299)								bool _hx_tmp16;
HXDLIN( 299)								if (textField->_hx___showCursor) {
HXLINE( 299)									_hx_tmp16 = (group->startIndex <= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 299)									_hx_tmp16 = false;
            								}
HXDLIN( 299)								if (_hx_tmp16) {
HXLINE( 299)									_hx_tmp15 = (group->endIndex >= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 299)									_hx_tmp15 = false;
            								}
HXDLIN( 299)								if (_hx_tmp15) {
HXLINE( 301)									advance = ((Float)0.0);
HXLINE( 303)									{
HXLINE( 303)										int _g3 = (int)0;
HXDLIN( 303)										int _g21 = (textField->_hx___caretIndex - group->startIndex);
HXDLIN( 303)										while((_g3 < _g21)){
HXLINE( 303)											_g3 = (_g3 + (int)1);
HXDLIN( 303)											int i1 = (_g3 - (int)1);
HXLINE( 305)											if ((group->advances->length <= i1)) {
HXLINE( 305)												goto _hx_goto_2;
            											}
HXLINE( 306)											advance = (advance + group->advances->__get(i1));
            										}
            										_hx_goto_2:;
            									}
HXLINE( 310)									Float _hx_tmp17 = (::Math_obj::floor((group->offsetX + advance)) + ((Float)0.5));
HXDLIN( 310)									cairo->moveTo(_hx_tmp17,((group->offsetY - (int)2) + ((Float)0.5)));
HXLINE( 311)									cairo->set_lineWidth((int)1);
HXLINE( 312)									Float _hx_tmp18 = (::Math_obj::floor((group->offsetX + advance)) + ((Float)0.5));
HXDLIN( 312)									cairo->lineTo(_hx_tmp18,(((group->offsetY - (int)2) + group->height) - (int)1));
HXLINE( 313)									cairo->stroke();
            								}
            							}
            							else {
HXLINE( 317)								bool _hx_tmp19;
HXDLIN( 317)								bool _hx_tmp20;
HXDLIN( 317)								bool _hx_tmp21;
HXDLIN( 317)								bool _hx_tmp22;
HXDLIN( 317)								if ((group->startIndex <= textField->_hx___caretIndex)) {
HXLINE( 317)									_hx_tmp22 = (group->endIndex >= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 317)									_hx_tmp22 = false;
            								}
HXDLIN( 317)								if (!(_hx_tmp22)) {
HXLINE( 317)									if ((group->startIndex <= textField->_hx___selectionIndex)) {
HXLINE( 317)										_hx_tmp21 = (group->endIndex >= textField->_hx___selectionIndex);
            									}
            									else {
HXLINE( 317)										_hx_tmp21 = false;
            									}
            								}
            								else {
HXLINE( 317)									_hx_tmp21 = true;
            								}
HXDLIN( 317)								if (!(_hx_tmp21)) {
HXLINE( 317)									if ((group->startIndex > textField->_hx___caretIndex)) {
HXLINE( 317)										_hx_tmp20 = (group->endIndex < textField->_hx___selectionIndex);
            									}
            									else {
HXLINE( 317)										_hx_tmp20 = false;
            									}
            								}
            								else {
HXLINE( 317)									_hx_tmp20 = true;
            								}
HXDLIN( 317)								if (!(_hx_tmp20)) {
HXLINE( 317)									if ((group->startIndex > textField->_hx___selectionIndex)) {
HXLINE( 317)										_hx_tmp19 = (group->endIndex < textField->_hx___caretIndex);
            									}
            									else {
HXLINE( 317)										_hx_tmp19 = false;
            									}
            								}
            								else {
HXLINE( 317)									_hx_tmp19 = true;
            								}
HXDLIN( 317)								if (_hx_tmp19) {
HXLINE( 319)									int selectionStart = ::Std_obj::_hx_int(::Math_obj::min(textField->_hx___selectionIndex,textField->_hx___caretIndex));
HXLINE( 320)									int selectionEnd = ::Std_obj::_hx_int(::Math_obj::max(textField->_hx___selectionIndex,textField->_hx___caretIndex));
HXLINE( 322)									if ((group->startIndex > selectionStart)) {
HXLINE( 324)										selectionStart = group->startIndex;
            									}
HXLINE( 328)									if ((group->endIndex < selectionEnd)) {
HXLINE( 330)										selectionEnd = group->endIndex;
            									}
HXLINE( 334)									 ::openfl::geom::Rectangle start;
HXDLIN( 334)									 ::openfl::geom::Rectangle end;
HXLINE( 336)									start = textField->getCharBoundaries(selectionStart);
HXLINE( 338)									if ((selectionEnd >= ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(textEngine->text))) {
HXLINE( 340)										end = textField->getCharBoundaries((::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(textEngine->text) - (int)1));
HXLINE( 341)										 ::openfl::geom::Rectangle end1 = end;
HXDLIN( 341)										end1->x = (end1->x + (end->width + (int)2));
            									}
            									else {
HXLINE( 345)										end = textField->getCharBoundaries(selectionEnd);
            									}
HXLINE( 349)									bool _hx_tmp23;
HXDLIN( 349)									if (hx::IsNotNull( start )) {
HXLINE( 349)										_hx_tmp23 = hx::IsNotNull( end );
            									}
            									else {
HXLINE( 349)										_hx_tmp23 = false;
            									}
HXDLIN( 349)									if (_hx_tmp23) {
HXLINE( 351)										cairo->setSourceRGB((int)0,(int)0,(int)0);
HXLINE( 352)										Float start1 = start->x;
HXDLIN( 352)										Float start2 = start->y;
HXDLIN( 352)										cairo->rectangle(start1,start2,(end->x - start->x),group->height);
HXLINE( 353)										cairo->fill();
HXLINE( 354)										cairo->setSourceRGB((int)1,(int)1,(int)1);
HXLINE( 358)										Float _hx_tmp24 = (scrollX + start->x);
HXDLIN( 358)										cairo->moveTo(_hx_tmp24,((group->offsetY + group->ascent) + scrollY));
HXLINE( 359)										cairo->showText(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,selectionStart,selectionEnd));
            									}
            								}
            							}
            						}
            					}
            				}
            				_hx_goto_1:;
            			}
            		}
            		else {
HXLINE( 371)			bool _hx_tmp25;
HXDLIN( 371)			bool _hx_tmp26;
HXDLIN( 371)			if ((textField->_hx___caretIndex > (int)-1)) {
HXLINE( 371)				_hx_tmp26 = textEngine->selectable;
            			}
            			else {
HXLINE( 371)				_hx_tmp26 = false;
            			}
HXDLIN( 371)			if (_hx_tmp26) {
HXLINE( 371)				_hx_tmp25 = textField->_hx___showCursor;
            			}
            			else {
HXLINE( 371)				_hx_tmp25 = false;
            			}
HXDLIN( 371)			if (_hx_tmp25) {
HXLINE( 373)				int scrollX1 = -(textField->get_scrollH());
HXLINE( 374)				Float scrollY1 = ((Float)0.0);
HXLINE( 376)				{
HXLINE( 376)					int _g12 = (int)0;
HXDLIN( 376)					int _g4 = (textField->get_scrollV() - (int)1);
HXDLIN( 376)					while((_g12 < _g4)){
HXLINE( 376)						_g12 = (_g12 + (int)1);
HXDLIN( 376)						int i2 = (_g12 - (int)1);
HXLINE( 378)						scrollY1 = (scrollY1 - textEngine->lineHeights->get(i2));
            					}
            				}
HXLINE( 382)				 ::Dynamic color3 = textField->get_defaultTextFormat()->color;
HXLINE( 383)				Float r3 = ((Float)hx::UShr(((int)color3 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 384)				Float g3 = ((Float)hx::UShr(((int)color3 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 385)				Float b3 = ((Float)((int)color3 & (int)(int)255) / (Float)(int)255);
HXLINE( 387)				cairo->setSourceRGB(r3,g3,b3);
HXLINE( 389)				cairo->newPath();
HXLINE( 390)				cairo->moveTo((scrollX1 + ((Float)2.5)),(scrollY1 + ((Float)2.5)));
HXLINE( 391)				cairo->set_lineWidth((int)1);
HXLINE( 392)				cairo->lineTo((scrollX1 + ((Float)2.5)),((scrollY1 + ::openfl::_internal::text::TextEngine_obj::getFormatHeight(textField->get_defaultTextFormat())) - (int)1));
HXLINE( 393)				cairo->stroke();
HXLINE( 394)				cairo->closePath();
            			}
            		}
HXLINE( 398)		graphics->_hx___bitmap->image->dirty = true;
HXLINE( 399)		graphics->_hx___bitmap->image->version++;
HXLINE( 400)		textField->_hx___dirty = false;
HXLINE( 401)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoTextField_obj,render,(void))


CairoTextField_obj::CairoTextField_obj()
{
}

bool CairoTextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoTextField_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CairoTextField_obj_sStaticStorageInfo = 0;
#endif

static void CairoTextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoTextField_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoTextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoTextField_obj::__mClass,"__mClass");
};

#endif

hx::Class CairoTextField_obj::__mClass;

static ::String CairoTextField_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void CairoTextField_obj::__register()
{
	hx::Object *dummy = new CairoTextField_obj;
	CairoTextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoTextField","\x46","\x1d","\x84","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoTextField_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CairoTextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoTextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoTextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoTextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoTextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoTextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
