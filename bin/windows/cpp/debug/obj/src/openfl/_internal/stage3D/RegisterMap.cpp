// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_RegisterMap
#include <openfl/_internal/stage3D/RegisterMap.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_DestRegister
#include <openfl/_internal/stage3D/_AGALConverter/DestRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_RegisterMapEntry
#include <openfl/_internal/stage3D/_AGALConverter/RegisterMapEntry.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_RegisterUsage
#include <openfl/_internal/stage3D/_AGALConverter/RegisterUsage.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SamplerRegister
#include <openfl/_internal/stage3D/_AGALConverter/SamplerRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SourceRegister
#include <openfl/_internal/stage3D/_AGALConverter/SourceRegister.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d31ae922ad12a73_588_new,"openfl._internal.stage3D.RegisterMap","new",0xb81e399c,"openfl._internal.stage3D.RegisterMap.new","openfl/_internal/stage3D/AGALConverter.hx",588,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_598_add,"openfl._internal.stage3D.RegisterMap","add",0xb8145b5d,"openfl._internal.stage3D.RegisterMap.add","openfl/_internal/stage3D/AGALConverter.hx",598,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_628_addDR,"openfl._internal.stage3D.RegisterMap","addDR",0x2a67e82b,"openfl._internal.stage3D.RegisterMap.addDR","openfl/_internal/stage3D/AGALConverter.hx",628,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_635_addSaR,"openfl._internal.stage3D.RegisterMap","addSaR",0xf08eaca7,"openfl._internal.stage3D.RegisterMap.addSaR","openfl/_internal/stage3D/AGALConverter.hx",635,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_640_addSR,"openfl._internal.stage3D.RegisterMap","addSR",0x2a67f53c,"openfl._internal.stage3D.RegisterMap.addSR","openfl/_internal/stage3D/AGALConverter.hx",640,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_655_getRegisterUsage,"openfl._internal.stage3D.RegisterMap","getRegisterUsage",0x73804a8c,"openfl._internal.stage3D.RegisterMap.getRegisterUsage","openfl/_internal/stage3D/AGALConverter.hx",655,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_668_getUsage,"openfl._internal.stage3D.RegisterMap","getUsage",0x4c4909ef,"openfl._internal.stage3D.RegisterMap.getUsage","openfl/_internal/stage3D/AGALConverter.hx",668,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_689_toGLSL,"openfl._internal.stage3D.RegisterMap","toGLSL",0xcb8e5d3d,"openfl._internal.stage3D.RegisterMap.toGLSL","openfl/_internal/stage3D/AGALConverter.hx",689,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_719_toGLSL,"openfl._internal.stage3D.RegisterMap","toGLSL",0xcb8e5d3d,"openfl._internal.stage3D.RegisterMap.toGLSL","openfl/_internal/stage3D/AGALConverter.hx",719,0x0a35cc61)
HX_LOCAL_STACK_FRAME(_hx_pos_9d31ae922ad12a73_685_toGLSL,"openfl._internal.stage3D.RegisterMap","toGLSL",0xcb8e5d3d,"openfl._internal.stage3D.RegisterMap.toGLSL","openfl/_internal/stage3D/AGALConverter.hx",685,0x0a35cc61)
static const ::String _hx_array_data_b0ea7baa_14[] = {
	HX_("attribute ",84,a8,71,97),
};
static const ::String _hx_array_data_b0ea7baa_15[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_b0ea7baa_16[] = {
	HX_("\t",09,00,00,00),
};
static const ::String _hx_array_data_b0ea7baa_17[] = {
	HX_("varying ",b0,25,c9,a4),
};
static const ::String _hx_array_data_b0ea7baa_18[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_b0ea7baa_19[] = {
	HX_("vec4 ",c0,4c,56,34),
};
static const ::String _hx_array_data_b0ea7baa_20[] = {
	HX_("mat4 ",0c,20,23,03),
};
static const ::String _hx_array_data_b0ea7baa_21[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_b0ea7baa_22[] = {
	HX_("samplerCube ",63,87,00,86),
};
static const ::String _hx_array_data_b0ea7baa_23[] = {
	HX_("vec4 ",c0,4c,56,34),
};
static const ::String _hx_array_data_b0ea7baa_24[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_b0ea7baa_25[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_b0ea7baa_26[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_b0ea7baa_27[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_b0ea7baa_28[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_b0ea7baa_29[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_b0ea7baa_30[] = {
	HX_(";\n",6f,33,00,00),
};
namespace openfl{
namespace _internal{
namespace stage3D{

void RegisterMap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_588_new)
HXLINE( 588)		this->mEntries = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic RegisterMap_obj::__CreateEmpty() { return new RegisterMap_obj; }

void *RegisterMap_obj::_hx_vtable = 0;

Dynamic RegisterMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RegisterMap_obj > _hx_result = new RegisterMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegisterMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x330952d6;
}

void RegisterMap_obj::add(int type,::String name,int number, ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage usage){
            	HX_GC_STACKFRAME(&_hx_pos_9d31ae922ad12a73_598_add)
HXLINE( 600)		{
HXLINE( 600)			int _g = (int)0;
HXDLIN( 600)			::Array< ::Dynamic> _g1 = this->mEntries;
HXDLIN( 600)			while((_g < _g1->length)){
HXLINE( 600)				 ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry entry = _g1->__get(_g).StaticCast<  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry >();
HXDLIN( 600)				_g = (_g + (int)1);
HXLINE( 602)				bool _hx_tmp;
HXDLIN( 602)				bool _hx_tmp1;
HXDLIN( 602)				if ((entry->type == type)) {
HXLINE( 602)					_hx_tmp1 = (entry->name == name);
            				}
            				else {
HXLINE( 602)					_hx_tmp1 = false;
            				}
HXDLIN( 602)				if (_hx_tmp1) {
HXLINE( 602)					_hx_tmp = (entry->number == number);
            				}
            				else {
HXLINE( 602)					_hx_tmp = false;
            				}
HXDLIN( 602)				if (_hx_tmp) {
HXLINE( 604)					if (hx::IsNotEq( entry->usage,usage )) {
HXLINE( 606)						HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot use register in multiple ways yet (mat4/vec4)",5e,30,e0,74)));
            					}
HXLINE( 610)					return;
            				}
            			}
            		}
HXLINE( 616)		 ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry entry1 =  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry_obj::__alloc( HX_CTX );
HXLINE( 617)		entry1->type = type;
HXLINE( 618)		entry1->name = name;
HXLINE( 619)		entry1->number = number;
HXLINE( 620)		entry1->usage = usage;
HXLINE( 621)		this->mEntries->push(entry1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(RegisterMap_obj,add,(void))

void RegisterMap_obj::addDR( ::openfl::_internal::stage3D::_AGALConverter::DestRegister dr, ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage usage){
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_628_addDR)
HXLINE( 628)		int dr1 = dr->type;
HXDLIN( 628)		::String _hx_tmp = dr->toGLSL(false);
HXDLIN( 628)		this->add(dr1,_hx_tmp,dr->n,usage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RegisterMap_obj,addDR,(void))

void RegisterMap_obj::addSaR( ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister sr, ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage usage){
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_635_addSaR)
HXLINE( 635)		int sr1 = sr->type;
HXDLIN( 635)		::String _hx_tmp = sr->toGLSL();
HXDLIN( 635)		this->add(sr1,_hx_tmp,sr->n,usage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RegisterMap_obj,addSaR,(void))

void RegisterMap_obj::addSR( ::openfl::_internal::stage3D::_AGALConverter::SourceRegister sr, ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage usage,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_640_addSR)
HXLINE( 642)		if ((sr->d != (int)0)) {
HXLINE( 644)			int sr1 = sr->itype;
HXDLIN( 644)			::String _hx_tmp = ::openfl::_internal::stage3D::AGALConverter_obj::prefixFromType(sr->itype,sr->programType);
HXDLIN( 644)			this->add(sr1,(_hx_tmp + sr->n),sr->n,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 645)			int sr2 = sr->type;
HXDLIN( 645)			::String _hx_tmp1 = ::openfl::_internal::stage3D::AGALConverter_obj::prefixFromType(sr->type,sr->programType);
HXDLIN( 645)			this->add(sr2,(_hx_tmp1 + sr->o),sr->o,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn());
HXLINE( 646)			return;
            		}
HXLINE( 650)		int sr3 = sr->type;
HXDLIN( 650)		::String _hx_tmp2 = sr->toGLSL(false,offset);
HXDLIN( 650)		this->add(sr3,_hx_tmp2,(sr->n + offset),usage);
            	}


HX_DEFINE_DYNAMIC_FUNC3(RegisterMap_obj,addSR,(void))

 ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage RegisterMap_obj::getRegisterUsage( ::openfl::_internal::stage3D::_AGALConverter::SourceRegister sr){
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_655_getRegisterUsage)
HXLINE( 657)		if ((sr->d != (int)0)) {
HXLINE( 659)			return ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn();
            		}
HXLINE( 663)		int sr1 = sr->type;
HXDLIN( 663)		::String _hx_tmp = sr->toGLSL(false,null());
HXDLIN( 663)		return this->getUsage(sr1,_hx_tmp,sr->n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterMap_obj,getRegisterUsage,return )

 ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage RegisterMap_obj::getUsage(int type,::String name,int number){
            	HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_668_getUsage)
HXLINE( 670)		{
HXLINE( 670)			int _g = (int)0;
HXDLIN( 670)			::Array< ::Dynamic> _g1 = this->mEntries;
HXDLIN( 670)			while((_g < _g1->length)){
HXLINE( 670)				 ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry entry = _g1->__get(_g).StaticCast<  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry >();
HXDLIN( 670)				_g = (_g + (int)1);
HXLINE( 672)				bool _hx_tmp;
HXDLIN( 672)				bool _hx_tmp1;
HXDLIN( 672)				if ((entry->type == type)) {
HXLINE( 672)					_hx_tmp1 = (entry->name == name);
            				}
            				else {
HXLINE( 672)					_hx_tmp1 = false;
            				}
HXDLIN( 672)				if (_hx_tmp1) {
HXLINE( 672)					_hx_tmp = (entry->number == number);
            				}
            				else {
HXLINE( 672)					_hx_tmp = false;
            				}
HXDLIN( 672)				if (_hx_tmp) {
HXLINE( 674)					return entry->usage;
            				}
            			}
            		}
HXLINE( 680)		return ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::UNUSED_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC3(RegisterMap_obj,getUsage,return )

::String RegisterMap_obj::toGLSL(bool tempRegistersOnly){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry a, ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry b){
            			HX_STACKFRAME(&_hx_pos_9d31ae922ad12a73_689_toGLSL)
HXLINE( 689)			return (a->number - b->number);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry a1, ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry b1){
            			HX_GC_STACKFRAME(&_hx_pos_9d31ae922ad12a73_719_toGLSL)
HXLINE( 719)			int _hx_tmp = a1->type;
HXDLIN( 719)			return (_hx_tmp - b1->type);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_9d31ae922ad12a73_685_toGLSL)
HXLINE( 687)		this->mEntries->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 693)		 ::haxe::ds::ObjectMap arrayCount =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE( 694)		 ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry entry;
HXLINE( 696)		{
HXLINE( 696)			int _g1 = (int)0;
HXDLIN( 696)			int _g = this->mEntries->length;
HXDLIN( 696)			while((_g1 < _g)){
HXLINE( 696)				_g1 = (_g1 + (int)1);
HXDLIN( 696)				int i = (_g1 - (int)1);
HXLINE( 698)				entry = this->mEntries->__get(i).StaticCast<  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry >();
HXLINE( 700)				if (hx::IsEq( entry->usage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() )) {
HXLINE( 703)					if ((i < (this->mEntries->length - (int)1))) {
HXLINE( 705)						::Array< ::Dynamic> v = this->mEntries;
HXDLIN( 705)						int v1 = (v->__get((i + (int)1)).StaticCast<  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry >()->number - entry->number);
HXDLIN( 705)						arrayCount->set(entry,v1);
            					}
            					else {
HXLINE( 709)						arrayCount->set(entry,(int)128);
            					}
            				}
            			}
            		}
HXLINE( 717)		this->mEntries->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE( 723)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 725)		{
HXLINE( 725)			int _g11 = (int)0;
HXDLIN( 725)			int _g2 = this->mEntries->length;
HXDLIN( 725)			while((_g11 < _g2)){
HXLINE( 725)				_g11 = (_g11 + (int)1);
HXDLIN( 725)				int i1 = (_g11 - (int)1);
HXLINE( 727)				entry = this->mEntries->__get(i1).StaticCast<  ::openfl::_internal::stage3D::_AGALConverter::RegisterMapEntry >();
HXLINE( 731)				bool _hx_tmp1;
HXDLIN( 731)				bool _hx_tmp2;
HXDLIN( 731)				if (tempRegistersOnly) {
HXLINE( 731)					_hx_tmp2 = (entry->type != (int)2);
            				}
            				else {
HXLINE( 731)					_hx_tmp2 = false;
            				}
HXDLIN( 731)				if (!(_hx_tmp2)) {
HXLINE( 731)					if (!(tempRegistersOnly)) {
HXLINE( 731)						_hx_tmp1 = (entry->type == (int)2);
            					}
            					else {
HXLINE( 731)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 731)					_hx_tmp1 = true;
            				}
HXDLIN( 731)				if (_hx_tmp1) {
HXLINE( 733)					continue;
            				}
HXLINE( 738)				if ((entry->type == (int)3)) {
HXLINE( 740)					continue;
            				}
HXLINE( 744)				{
HXLINE( 744)					int _g21 = entry->type;
HXDLIN( 744)					switch((int)(_g21)){
            						case (int)0: {
HXLINE( 749)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 749)								sb->flush();
            							}
HXDLIN( 749)							if (hx::IsNull( sb->b )) {
HXLINE( 749)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_14,1);
            							}
            							else {
HXLINE( 749)								sb->b->push(HX_("attribute ",84,a8,71,97));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 754)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 754)								sb->flush();
            							}
HXDLIN( 754)							if (hx::IsNull( sb->b )) {
HXLINE( 754)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_15,1);
            							}
            							else {
HXLINE( 754)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 758)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 758)								sb->flush();
            							}
HXDLIN( 758)							if (hx::IsNull( sb->b )) {
HXLINE( 758)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_16,1);
            							}
            							else {
HXLINE( 758)								sb->b->push(HX_("\t",09,00,00,00));
            							}
            						}
            						break;
            						case (int)3: {
            						}
            						break;
            						case (int)4: {
HXLINE( 764)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 764)								sb->flush();
            							}
HXDLIN( 764)							if (hx::IsNull( sb->b )) {
HXLINE( 764)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_17,1);
            							}
            							else {
HXLINE( 764)								sb->b->push(HX_("varying ",b0,25,c9,a4));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 768)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 768)								sb->flush();
            							}
HXDLIN( 768)							if (hx::IsNull( sb->b )) {
HXLINE( 768)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_18,1);
            							}
            							else {
HXLINE( 768)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
            						break;
            						default:{
HXLINE( 772)							HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            						}
            					}
            				}
HXLINE( 776)				{
HXLINE( 776)					 ::openfl::_internal::stage3D::_AGALConverter::RegisterUsage _g3 = entry->usage;
HXDLIN( 776)					switch((int)(_hx_getEnumValueIndex(_g3))){
            						case (int)0: {
HXLINE( 800)							::haxe::Log_obj::trace(HX_("Missing switch patten: RegisterUsage.UNUSED",38,09,f6,02),hx::SourceInfo(HX_("AGALConverter.hx",8f,36,cd,e2),800,HX_("openfl._internal.stage3D.RegisterMap",aa,7b,ea,b0),HX_("toGLSL",f9,58,08,7a)));
            						}
            						break;
            						case (int)1: {
HXLINE( 780)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 780)								sb->flush();
            							}
HXDLIN( 780)							if (hx::IsNull( sb->b )) {
HXLINE( 780)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_19,1);
            							}
            							else {
HXLINE( 780)								sb->b->push(HX_("vec4 ",c0,4c,56,34));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 788)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 788)								sb->flush();
            							}
HXDLIN( 788)							if (hx::IsNull( sb->b )) {
HXLINE( 788)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_20,1);
            							}
            							else {
HXLINE( 788)								sb->b->push(HX_("mat4 ",0c,20,23,03));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 792)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 792)								sb->flush();
            							}
HXDLIN( 792)							if (hx::IsNull( sb->b )) {
HXLINE( 792)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_21,1);
            							}
            							else {
HXLINE( 792)								sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 804)							::haxe::Log_obj::trace(HX_("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",ea,ff,93,8e),hx::SourceInfo(HX_("AGALConverter.hx",8f,36,cd,e2),804,HX_("openfl._internal.stage3D.RegisterMap",aa,7b,ea,b0),HX_("toGLSL",f9,58,08,7a)));
            						}
            						break;
            						case (int)5: {
HXLINE( 796)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 796)								sb->flush();
            							}
HXDLIN( 796)							if (hx::IsNull( sb->b )) {
HXLINE( 796)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_22,1);
            							}
            							else {
HXLINE( 796)								sb->b->push(HX_("samplerCube ",63,87,00,86));
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 784)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 784)								sb->flush();
            							}
HXDLIN( 784)							if (hx::IsNull( sb->b )) {
HXLINE( 784)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_23,1);
            							}
            							else {
HXLINE( 784)								sb->b->push(HX_("vec4 ",c0,4c,56,34));
            							}
            						}
            						break;
            					}
            				}
HXLINE( 808)				if (hx::IsEq( entry->usage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::SAMPLER_2D_ALPHA_dyn() )) {
HXLINE( 810)					{
HXLINE( 810)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 810)							sb->flush();
            						}
HXDLIN( 810)						if (hx::IsNull( sb->b )) {
HXLINE( 810)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_24,1);
            						}
            						else {
HXLINE( 810)							sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            						}
            					}
HXLINE( 811)					{
HXLINE( 811)						::String x = entry->name;
HXDLIN( 811)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 811)							sb->flush();
            						}
HXDLIN( 811)						if (hx::IsNull( sb->b )) {
HXLINE( 811)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 811)							::Array< ::String > sb1 = sb->b;
HXDLIN( 811)							sb1->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 812)					{
HXLINE( 812)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 812)							sb->flush();
            						}
HXDLIN( 812)						if (hx::IsNull( sb->b )) {
HXLINE( 812)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_25,1);
            						}
            						else {
HXLINE( 812)							sb->b->push(HX_(";\n",6f,33,00,00));
            						}
            					}
HXLINE( 814)					{
HXLINE( 814)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 814)							sb->flush();
            						}
HXDLIN( 814)						if (hx::IsNull( sb->b )) {
HXLINE( 814)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_26,1);
            						}
            						else {
HXLINE( 814)							sb->b->push(HX_("uniform ",6c,cc,54,02));
            						}
            					}
HXLINE( 815)					{
HXLINE( 815)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 815)							sb->flush();
            						}
HXDLIN( 815)						if (hx::IsNull( sb->b )) {
HXLINE( 815)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_27,1);
            						}
            						else {
HXLINE( 815)							sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            						}
            					}
HXLINE( 816)					{
HXLINE( 816)						::String x1 = (entry->name + HX_("_alpha",9f,ee,7d,1d));
HXDLIN( 816)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 816)							sb->flush();
            						}
HXDLIN( 816)						if (hx::IsNull( sb->b )) {
HXLINE( 816)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 816)							::Array< ::String > sb2 = sb->b;
HXDLIN( 816)							sb2->push(::Std_obj::string(x1));
            						}
            					}
HXLINE( 817)					{
HXLINE( 817)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 817)							sb->flush();
            						}
HXDLIN( 817)						if (hx::IsNull( sb->b )) {
HXLINE( 817)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_28,1);
            						}
            						else {
HXLINE( 817)							sb->b->push(HX_(";\n",6f,33,00,00));
            						}
            					}
            				}
            				else {
HXLINE( 819)					if (hx::IsEq( entry->usage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() )) {
HXLINE( 821)						{
HXLINE( 821)							::String x2 = (entry->name + HX_("[",5b,00,00,00));
HXDLIN( 821)							::String x3 = ((x2 + arrayCount->get(entry)) + HX_("]",5d,00,00,00));
HXDLIN( 821)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 821)								sb->flush();
            							}
HXDLIN( 821)							if (hx::IsNull( sb->b )) {
HXLINE( 821)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            							}
            							else {
HXLINE( 821)								::Array< ::String > sb3 = sb->b;
HXDLIN( 821)								sb3->push(::Std_obj::string(x3));
            							}
            						}
HXLINE( 822)						{
HXLINE( 822)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 822)								sb->flush();
            							}
HXDLIN( 822)							if (hx::IsNull( sb->b )) {
HXLINE( 822)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_29,1);
            							}
            							else {
HXLINE( 822)								sb->b->push(HX_(";\n",6f,33,00,00));
            							}
            						}
            					}
            					else {
HXLINE( 826)						{
HXLINE( 826)							::String x4 = entry->name;
HXDLIN( 826)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 826)								sb->flush();
            							}
HXDLIN( 826)							if (hx::IsNull( sb->b )) {
HXLINE( 826)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            							}
            							else {
HXLINE( 826)								::Array< ::String > sb4 = sb->b;
HXDLIN( 826)								sb4->push(::Std_obj::string(x4));
            							}
            						}
HXLINE( 827)						{
HXLINE( 827)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 827)								sb->flush();
            							}
HXDLIN( 827)							if (hx::IsNull( sb->b )) {
HXLINE( 827)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_b0ea7baa_30,1);
            							}
            							else {
HXLINE( 827)								sb->b->push(HX_(";\n",6f,33,00,00));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 833)		return sb->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterMap_obj,toGLSL,return )


hx::ObjectPtr< RegisterMap_obj > RegisterMap_obj::__new() {
	hx::ObjectPtr< RegisterMap_obj > __this = new RegisterMap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RegisterMap_obj > RegisterMap_obj::__alloc(hx::Ctx *_hx_ctx) {
	RegisterMap_obj *__this = (RegisterMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RegisterMap_obj), true, "openfl._internal.stage3D.RegisterMap"));
	*(void **)__this = RegisterMap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RegisterMap_obj::RegisterMap_obj()
{
}

void RegisterMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RegisterMap);
	HX_MARK_MEMBER_NAME(mEntries,"mEntries");
	HX_MARK_END_CLASS();
}

void RegisterMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mEntries,"mEntries");
}

hx::Val RegisterMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"addDR") ) { return hx::Val( addDR_dyn()); }
		if (HX_FIELD_EQ(inName,"addSR") ) { return hx::Val( addSR_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addSaR") ) { return hx::Val( addSaR_dyn()); }
		if (HX_FIELD_EQ(inName,"toGLSL") ) { return hx::Val( toGLSL_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mEntries") ) { return hx::Val( mEntries); }
		if (HX_FIELD_EQ(inName,"getUsage") ) { return hx::Val( getUsage_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getRegisterUsage") ) { return hx::Val( getRegisterUsage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RegisterMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mEntries") ) { mEntries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegisterMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RegisterMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(RegisterMap_obj,mEntries),HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RegisterMap_obj_sStaticStorageInfo = 0;
#endif

static ::String RegisterMap_obj_sMemberFields[] = {
	HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addDR","\xef","\xb7","\x43","\x1c"),
	HX_HCSTRING("addSaR","\x63","\xa8","\x08","\x9f"),
	HX_HCSTRING("addSR","\x00","\xc5","\x43","\x1c"),
	HX_HCSTRING("getRegisterUsage","\x48","\xc9","\xb8","\x09"),
	HX_HCSTRING("getUsage","\xab","\x6c","\x06","\x0a"),
	HX_HCSTRING("toGLSL","\xf9","\x58","\x08","\x7a"),
	::String(null()) };

static void RegisterMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RegisterMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RegisterMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RegisterMap_obj::__mClass,"__mClass");
};

#endif

hx::Class RegisterMap_obj::__mClass;

void RegisterMap_obj::__register()
{
	hx::Object *dummy = new RegisterMap_obj;
	RegisterMap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.RegisterMap","\xaa","\x7b","\xea","\xb0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RegisterMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RegisterMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RegisterMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RegisterMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegisterMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegisterMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
