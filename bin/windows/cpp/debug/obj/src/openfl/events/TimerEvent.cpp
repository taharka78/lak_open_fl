// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_13_new,"openfl.events.TimerEvent","new",0xb64ac7fe,"openfl.events.TimerEvent.new","openfl/events/TimerEvent.hx",13,0x5c7b7b12)
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_18_clone,"openfl.events.TimerEvent","clone",0xa3bdae7b,"openfl.events.TimerEvent.clone","openfl/events/TimerEvent.hx",18,0x5c7b7b12)
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_31_toString,"openfl.events.TimerEvent","toString",0x793b7c4e,"openfl.events.TimerEvent.toString","openfl/events/TimerEvent.hx",31,0x5c7b7b12)
static const ::String _hx_array_data_7c93b10c_3[] = {
	HX_("type",ba,f2,08,4d),HX_("bubbles",67,bb,56,61),HX_("cancelable",14,a0,79,c4),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_36_updateAfterEvent,"openfl.events.TimerEvent","updateAfterEvent",0xcd7c1969,"openfl.events.TimerEvent.updateAfterEvent","openfl/events/TimerEvent.hx",36,0x5c7b7b12)
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_7_boot,"openfl.events.TimerEvent","boot",0xc33d36d4,"openfl.events.TimerEvent.boot","openfl/events/TimerEvent.hx",7,0x5c7b7b12)
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_8_boot,"openfl.events.TimerEvent","boot",0xc33d36d4,"openfl.events.TimerEvent.boot","openfl/events/TimerEvent.hx",8,0x5c7b7b12)
namespace openfl{
namespace events{

void TimerEvent_obj::__construct(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable){
bool bubbles = __o_bubbles.Default(false);
bool cancelable = __o_cancelable.Default(false);
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_13_new)
HXLINE(  13)		super::__construct(type,bubbles,cancelable);
            	}

Dynamic TimerEvent_obj::__CreateEmpty() { return new TimerEvent_obj; }

void *TimerEvent_obj::_hx_vtable = 0;

Dynamic TimerEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TimerEvent_obj > _hx_result = new TimerEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TimerEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3243040d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3243040d;
	} else {
		return inClassId==(int)0x4da0d3de;
	}
}

 ::openfl::events::Event TimerEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_18_clone)
HXLINE(  20)		 ::openfl::events::TimerEvent event =  ::openfl::events::TimerEvent_obj::__alloc( HX_CTX ,this->type,this->bubbles,this->cancelable);
HXLINE(  21)		event->target = this->target;
HXLINE(  22)		event->currentTarget = this->currentTarget;
HXLINE(  23)		event->eventPhase = this->eventPhase;
HXLINE(  24)		return event;
            	}


::String TimerEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_31_toString)
HXLINE(  31)		return this->_hx___formatToString(HX_("TimerEvent",35,32,87,fd),::Array_obj< ::String >::fromData( _hx_array_data_7c93b10c_3,3));
            	}


void TimerEvent_obj::updateAfterEvent(){
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_36_updateAfterEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TimerEvent_obj,updateAfterEvent,(void))

::String TimerEvent_obj::TIMER;

::String TimerEvent_obj::TIMER_COMPLETE;


hx::ObjectPtr< TimerEvent_obj > TimerEvent_obj::__new(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable) {
	hx::ObjectPtr< TimerEvent_obj > __this = new TimerEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

hx::ObjectPtr< TimerEvent_obj > TimerEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable) {
	TimerEvent_obj *__this = (TimerEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TimerEvent_obj), true, "openfl.events.TimerEvent"));
	*(void **)__this = TimerEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

TimerEvent_obj::TimerEvent_obj()
{
}

hx::Val TimerEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateAfterEvent") ) { return hx::Val( updateAfterEvent_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TimerEvent_obj_sMemberStorageInfo = 0;
static hx::StaticInfo TimerEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TimerEvent_obj::TIMER,HX_HCSTRING("TIMER","\xa5","\xf7","\x23","\x8e")},
	{hx::fsString,(void *) &TimerEvent_obj::TIMER_COMPLETE,HX_HCSTRING("TIMER_COMPLETE","\xd3","\xf3","\x07","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TimerEvent_obj_sMemberFields[] = {
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("updateAfterEvent","\xc7","\xfb","\xc7","\x22"),
	::String(null()) };

static void TimerEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TimerEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TimerEvent_obj::TIMER,"TIMER");
	HX_MARK_MEMBER_NAME(TimerEvent_obj::TIMER_COMPLETE,"TIMER_COMPLETE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TimerEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TimerEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TimerEvent_obj::TIMER,"TIMER");
	HX_VISIT_MEMBER_NAME(TimerEvent_obj::TIMER_COMPLETE,"TIMER_COMPLETE");
};

#endif

hx::Class TimerEvent_obj::__mClass;

static ::String TimerEvent_obj_sStaticFields[] = {
	HX_HCSTRING("TIMER","\xa5","\xf7","\x23","\x8e"),
	HX_HCSTRING("TIMER_COMPLETE","\xd3","\xf3","\x07","\x00"),
	::String(null())
};

void TimerEvent_obj::__register()
{
	hx::Object *dummy = new TimerEvent_obj;
	TimerEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.events.TimerEvent","\x0c","\xb1","\x93","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TimerEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TimerEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TimerEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TimerEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TimerEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimerEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimerEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TimerEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_7_boot)
HXLINE(   7)		TIMER = HX_("timer",c5,bf,35,10);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_8_boot)
HXLINE(   8)		TIMER_COMPLETE = HX_("timerComplete",9e,49,cc,97);
            	}
}

} // end namespace openfl
} // end namespace events
