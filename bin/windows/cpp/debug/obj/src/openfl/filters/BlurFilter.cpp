// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__BlurFilter_BlurShader
#include <openfl/filters/_BlurFilter/BlurShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e95f8db175a4230_23_new,"openfl.filters.BlurFilter","new",0x2ff6acc2,"openfl.filters.BlurFilter.new","openfl/filters/BlurFilter.hx",23,0x46563eac)
HX_LOCAL_STACK_FRAME(_hx_pos_6e95f8db175a4230_36_clone,"openfl.filters.BlurFilter","clone",0xcbbf4c3f,"openfl.filters.BlurFilter.clone","openfl/filters/BlurFilter.hx",36,0x46563eac)
HX_LOCAL_STACK_FRAME(_hx_pos_6e95f8db175a4230_41___initShader,"openfl.filters.BlurFilter","__initShader",0xc19d1cd3,"openfl.filters.BlurFilter.__initShader","openfl/filters/BlurFilter.hx",41,0x46563eac)
HX_LOCAL_STACK_FRAME(_hx_pos_6e95f8db175a4230_71_set_quality,"openfl.filters.BlurFilter","set_quality",0xacfc7a44,"openfl.filters.BlurFilter.set_quality","openfl/filters/BlurFilter.hx",71,0x46563eac)
HX_LOCAL_STACK_FRAME(_hx_pos_6e95f8db175a4230_13_boot,"openfl.filters.BlurFilter","boot",0xbff97d90,"openfl.filters.BlurFilter.boot","openfl/filters/BlurFilter.hx",13,0x46563eac)
namespace openfl{
namespace filters{

void BlurFilter_obj::__construct(hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality){
Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
int quality = __o_quality.Default(1);
            	HX_STACKFRAME(&_hx_pos_6e95f8db175a4230_23_new)
HXLINE(  25)		super::__construct();
HXLINE(  27)		this->blurX = blurX;
HXLINE(  28)		this->blurY = blurY;
HXLINE(  29)		this->set_quality(quality);
            	}

Dynamic BlurFilter_obj::__CreateEmpty() { return new BlurFilter_obj; }

void *BlurFilter_obj::_hx_vtable = 0;

Dynamic BlurFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BlurFilter_obj > _hx_result = new BlurFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BlurFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4c5fda8a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4c5fda8a;
	} else {
		return inClassId==(int)0x4f68d692;
	}
}

 ::openfl::filters::BitmapFilter BlurFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_6e95f8db175a4230_36_clone)
HXLINE(  36)		return  ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,this->blurX,this->blurY,this->quality);
            	}


 ::openfl::display::Shader BlurFilter_obj::_hx___initShader( ::openfl::_internal::renderer::RenderSession renderSession,int pass){
            	HX_STACKFRAME(&_hx_pos_6e95f8db175a4230_41___initShader)
HXLINE(  43)		 ::openfl::display::ShaderData data = ::openfl::filters::BlurFilter_obj::_hx___blurShader->get_data();
HXLINE(  45)		if ((pass <= this->horizontalPasses)) {
HXLINE(  47)			Float scale = ::Math_obj::pow(((Float)0.5),((int)pass >> (int)(int)1));
HXLINE(  48)			 ::Dynamic data1 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  48)			data1->__SetItem((int)0,(this->blurX * scale));
HXLINE(  49)			 ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)1,(int)0);
            		}
            		else {
HXLINE(  53)			Float scale1 = ::Math_obj::pow(((Float)0.5),((int)(pass - this->horizontalPasses) >> (int)(int)1));
HXLINE(  54)			 ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)0,(int)0);
HXLINE(  55)			 ::Dynamic data2 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  55)			data2->__SetItem((int)1,(this->blurY * scale1));
            		}
HXLINE(  59)		return ::openfl::filters::BlurFilter_obj::_hx___blurShader;
            	}


int BlurFilter_obj::set_quality(int value){
            	HX_STACKFRAME(&_hx_pos_6e95f8db175a4230_71_set_quality)
HXLINE(  75)		int _hx_tmp;
HXDLIN(  75)		if ((this->blurX <= (int)0)) {
HXLINE(  75)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  75)			Float _hx_tmp1 = this->blurX;
HXDLIN(  75)			_hx_tmp = (::Math_obj::round((_hx_tmp1 * ((Float)value / (Float)(int)4))) + (int)1);
            		}
HXDLIN(  75)		this->horizontalPasses = _hx_tmp;
HXLINE(  76)		int _hx_tmp2;
HXDLIN(  76)		if ((this->blurY <= (int)0)) {
HXLINE(  76)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  76)			Float _hx_tmp3 = this->blurY;
HXDLIN(  76)			_hx_tmp2 = (::Math_obj::round((_hx_tmp3 * ((Float)value / (Float)(int)4))) + (int)1);
            		}
HXDLIN(  76)		this->verticalPasses = _hx_tmp2;
HXLINE(  78)		this->_hx___numPasses = (this->horizontalPasses + this->verticalPasses);
HXLINE(  80)		return (this->quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlurFilter_obj,set_quality,return )

 ::openfl::filters::_BlurFilter::BlurShader BlurFilter_obj::_hx___blurShader;


hx::ObjectPtr< BlurFilter_obj > BlurFilter_obj::__new(hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality) {
	hx::ObjectPtr< BlurFilter_obj > __this = new BlurFilter_obj();
	__this->__construct(__o_blurX,__o_blurY,__o_quality);
	return __this;
}

hx::ObjectPtr< BlurFilter_obj > BlurFilter_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality) {
	BlurFilter_obj *__this = (BlurFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BlurFilter_obj), false, "openfl.filters.BlurFilter"));
	*(void **)__this = BlurFilter_obj::_hx_vtable;
	__this->__construct(__o_blurX,__o_blurY,__o_quality);
	return __this;
}

BlurFilter_obj::BlurFilter_obj()
{
}

hx::Val BlurFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"blurX") ) { return hx::Val( blurX); }
		if (HX_FIELD_EQ(inName,"blurY") ) { return hx::Val( blurY); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"verticalPasses") ) { return hx::Val( verticalPasses); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"horizontalPasses") ) { return hx::Val( horizontalPasses); }
	}
	return super::__Field(inName,inCallProp);
}

bool BlurFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__blurShader") ) { outValue = _hx___blurShader; return true; }
	}
	return false;
}

hx::Val BlurFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"blurX") ) { blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurY") ) { blurY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue) );quality=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"verticalPasses") ) { verticalPasses=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"horizontalPasses") ) { horizontalPasses=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BlurFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__blurShader") ) { _hx___blurShader=ioValue.Cast<  ::openfl::filters::_BlurFilter::BlurShader >(); return true; }
	}
	return false;
}

void BlurFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96"));
	outFields->push(HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BlurFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BlurFilter_obj,blurX),HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5")},
	{hx::fsFloat,(int)offsetof(BlurFilter_obj,blurY),HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5")},
	{hx::fsInt,(int)offsetof(BlurFilter_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{hx::fsInt,(int)offsetof(BlurFilter_obj,horizontalPasses),HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96")},
	{hx::fsInt,(int)offsetof(BlurFilter_obj,verticalPasses),HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BlurFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::_BlurFilter::BlurShader*/ ,(void *) &BlurFilter_obj::_hx___blurShader,HX_HCSTRING("__blurShader","\x4c","\xe8","\x3f","\xcd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BlurFilter_obj_sMemberFields[] = {
	HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"),
	HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96"),
	HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	::String(null()) };

static void BlurFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlurFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BlurFilter_obj::_hx___blurShader,"__blurShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlurFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlurFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BlurFilter_obj::_hx___blurShader,"__blurShader");
};

#endif

hx::Class BlurFilter_obj::__mClass;

static ::String BlurFilter_obj_sStaticFields[] = {
	HX_HCSTRING("__blurShader","\x4c","\xe8","\x3f","\xcd"),
	::String(null())
};

void BlurFilter_obj::__register()
{
	hx::Object *dummy = new BlurFilter_obj;
	BlurFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.BlurFilter","\xd0","\xe3","\x34","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BlurFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &BlurFilter_obj::__SetStatic;
	__mClass->mMarkFunc = BlurFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BlurFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BlurFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BlurFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlurFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlurFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlurFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BlurFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6e95f8db175a4230_13_boot)
HXLINE(  13)		_hx___blurShader =  ::openfl::filters::_BlurFilter::BlurShader_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace filters
