// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_FPS
#include <openfl/display/FPS.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a7e04a5c6176ce66_24_new,"openfl.display.FPS","new",0xe5d2c231,"openfl.display.FPS.new","openfl/display/FPS.hx",24,0x584764e1)
HX_LOCAL_STACK_FRAME(_hx_pos_a7e04a5c6176ce66_52_this_onEnterFrame,"openfl.display.FPS","this_onEnterFrame",0x56ef2d46,"openfl.display.FPS.this_onEnterFrame","openfl/display/FPS.hx",52,0x584764e1)
namespace openfl{
namespace display{

void FPS_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_color){
Float x = __o_x.Default(10);
Float y = __o_y.Default(10);
int color = __o_color.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a7e04a5c6176ce66_24_new)
HXLINE(  26)		super::__construct();
HXLINE(  28)		this->set_x(x);
HXLINE(  29)		this->set_y(y);
HXLINE(  31)		this->currentFPS = (int)0;
HXLINE(  32)		this->set_selectable(false);
HXLINE(  33)		this->mouseEnabled = false;
HXLINE(  34)		this->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),(int)12,color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  35)		this->set_text(HX_("FPS: ",af,da,2c,83));
HXLINE(  37)		this->cacheCount = (int)0;
HXLINE(  38)		this->times = ::Array_obj< Float >::__new(0);
HXLINE(  40)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
            	}

Dynamic FPS_obj::__CreateEmpty() { return new FPS_obj; }

void *FPS_obj::_hx_vtable = 0;

Dynamic FPS_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FPS_obj > _hx_result = new FPS_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FPS_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f2b00af) {
		if (inClassId<=(int)0x1b123bf8) {
			if (inClassId<=(int)0x19c29573) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
			} else {
				return inClassId==(int)0x1b123bf8;
			}
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	} else {
		return inClassId==(int)0x46bba1d7 || inClassId==(int)0x6d9fc210;
	}
}

void FPS_obj::this_onEnterFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_a7e04a5c6176ce66_52_this_onEnterFrame)
HXLINE(  54)		Float currentTime = ((Float)::lime::_hx_system::System_obj::getTimer() / (Float)(int)1000);
HXLINE(  55)		this->times->push(currentTime);
HXLINE(  57)		while(true){
HXLINE(  57)			Float _hx_tmp = this->times->__get((int)0);
HXDLIN(  57)			if (!((_hx_tmp < (currentTime - (int)1)))) {
HXLINE(  57)				goto _hx_goto_1;
            			}
HXLINE(  59)			this->times->shift();
            		}
            		_hx_goto_1:;
HXLINE(  63)		int currentCount = this->times->length;
HXLINE(  64)		this->currentFPS = ::Math_obj::round(((Float)(currentCount + this->cacheCount) / (Float)(int)2));
HXLINE(  66)		if ((currentCount != this->cacheCount)) {
HXLINE(  68)			this->set_text((HX_("FPS: ",af,da,2c,83) + this->currentFPS));
            		}
HXLINE(  72)		this->cacheCount = currentCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FPS_obj,this_onEnterFrame,(void))


hx::ObjectPtr< FPS_obj > FPS_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_color) {
	hx::ObjectPtr< FPS_obj > __this = new FPS_obj();
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

hx::ObjectPtr< FPS_obj > FPS_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_color) {
	FPS_obj *__this = (FPS_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FPS_obj), true, "openfl.display.FPS"));
	*(void **)__this = FPS_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

FPS_obj::FPS_obj()
{
}

void FPS_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FPS);
	HX_MARK_MEMBER_NAME(currentFPS,"currentFPS");
	HX_MARK_MEMBER_NAME(cacheCount,"cacheCount");
	HX_MARK_MEMBER_NAME(times,"times");
	 ::openfl::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FPS_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentFPS,"currentFPS");
	HX_VISIT_MEMBER_NAME(cacheCount,"cacheCount");
	HX_VISIT_MEMBER_NAME(times,"times");
	 ::openfl::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FPS_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return hx::Val( times); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { return hx::Val( currentFPS); }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { return hx::Val( cacheCount); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return hx::Val( this_onEnterFrame_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FPS_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { currentFPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { cacheCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FPS_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentFPS","\x30","\x71","\x28","\xc7"));
	outFields->push(HX_HCSTRING("cacheCount","\x2d","\xab","\x1b","\x8d"));
	outFields->push(HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FPS_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FPS_obj,currentFPS),HX_HCSTRING("currentFPS","\x30","\x71","\x28","\xc7")},
	{hx::fsInt,(int)offsetof(FPS_obj,cacheCount),HX_HCSTRING("cacheCount","\x2d","\xab","\x1b","\x8d")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FPS_obj,times),HX_HCSTRING("times","\xc6","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FPS_obj_sStaticStorageInfo = 0;
#endif

static ::String FPS_obj_sMemberFields[] = {
	HX_HCSTRING("currentFPS","\x30","\x71","\x28","\xc7"),
	HX_HCSTRING("cacheCount","\x2d","\xab","\x1b","\x8d"),
	HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"),
	HX_HCSTRING("this_onEnterFrame","\xb5","\x0f","\x1f","\x8e"),
	::String(null()) };

static void FPS_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FPS_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FPS_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FPS_obj::__mClass,"__mClass");
};

#endif

hx::Class FPS_obj::__mClass;

void FPS_obj::__register()
{
	hx::Object *dummy = new FPS_obj;
	FPS_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.FPS","\xbf","\xd5","\x7f","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FPS_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FPS_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FPS_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FPS_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FPS_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FPS_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
