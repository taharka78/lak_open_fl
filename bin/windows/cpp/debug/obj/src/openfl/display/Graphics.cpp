// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsBitmapFill
#include <openfl/display/GraphicsBitmapFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsDataType
#include <openfl/display/GraphicsDataType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsFillType
#include <openfl/display/GraphicsFillType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsGradientFill
#include <openfl/display/GraphicsGradientFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsTrianglePath
#include <openfl/display/GraphicsTrianglePath.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_043516e11ce5c7d5_41_new,"openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",41,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_90_beginBitmapFill,"openfl.display.Graphics","beginBitmapFill",0x31c80e62,"openfl.display.Graphics.beginBitmapFill","openfl/display/Graphics.hx",90,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_99_beginFill,"openfl.display.Graphics","beginFill",0xf44a92d3,"openfl.display.Graphics.beginFill","openfl/display/Graphics.hx",99,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_108_beginGradientFill,"openfl.display.Graphics","beginGradientFill",0x99f380e3,"openfl.display.Graphics.beginGradientFill","openfl/display/Graphics.hx",108,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_126_clear,"openfl.display.Graphics","clear",0x0a9f4794,"openfl.display.Graphics.clear","openfl/display/Graphics.hx",126,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_148_copyFrom,"openfl.display.Graphics","copyFrom",0x0a477418,"openfl.display.Graphics.copyFrom","openfl/display/Graphics.hx",148,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_162_cubicCurveTo,"openfl.display.Graphics","cubicCurveTo",0x467410b9,"openfl.display.Graphics.cubicCurveTo","openfl/display/Graphics.hx",162,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_239_curveTo,"openfl.display.Graphics","curveTo",0x89f305d1,"openfl.display.Graphics.curveTo","openfl/display/Graphics.hx",239,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_281_drawCircle,"openfl.display.Graphics","drawCircle",0xee64ddcd,"openfl.display.Graphics.drawCircle","openfl/display/Graphics.hx",281,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_295_drawEllipse,"openfl.display.Graphics","drawEllipse",0xbfad1a81,"openfl.display.Graphics.drawEllipse","openfl/display/Graphics.hx",295,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_309_drawGraphicsData,"openfl.display.Graphics","drawGraphicsData",0x60ea9412,"openfl.display.Graphics.drawGraphicsData","openfl/display/Graphics.hx",309,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_401_drawPath,"openfl.display.Graphics","drawPath",0xa0a1f822,"openfl.display.Graphics.drawPath","openfl/display/Graphics.hx",401,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_448_drawRect,"openfl.display.Graphics","drawRect",0xa1f75fa1,"openfl.display.Graphics.drawRect","openfl/display/Graphics.hx",448,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_462_drawRoundRect,"openfl.display.Graphics","drawRoundRect",0xb24e78f5,"openfl.display.Graphics.drawRoundRect","openfl/display/Graphics.hx",462,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_476_drawRoundRectComplex,"openfl.display.Graphics","drawRoundRectComplex",0x06fa4dbb,"openfl.display.Graphics.drawRoundRectComplex","openfl/display/Graphics.hx",476,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_524_drawTriangles,"openfl.display.Graphics","drawTriangles",0xae0bf90e,"openfl.display.Graphics.drawTriangles","openfl/display/Graphics.hx",524,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_581_endFill,"openfl.display.Graphics","endFill",0xe14b2dc5,"openfl.display.Graphics.endFill","openfl/display/Graphics.hx",581,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_588_lineBitmapStyle,"openfl.display.Graphics","lineBitmapStyle",0x0ce183f5,"openfl.display.Graphics.lineBitmapStyle","openfl/display/Graphics.hx",588,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_595_lineGradientStyle,"openfl.display.Graphics","lineGradientStyle",0x2de26914,"openfl.display.Graphics.lineGradientStyle","openfl/display/Graphics.hx",595,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_600_lineStyle,"openfl.display.Graphics","lineStyle",0x32cd8e24,"openfl.display.Graphics.lineStyle","openfl/display/Graphics.hx",600,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_623_lineTo,"openfl.display.Graphics","lineTo",0x25b7b6a8,"openfl.display.Graphics.lineTo","openfl/display/Graphics.hx",623,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_649_moveTo,"openfl.display.Graphics","moveTo",0x05c44305,"openfl.display.Graphics.moveTo","openfl/display/Graphics.hx",649,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_659_readGraphicsData,"openfl.display.Graphics","readGraphicsData",0x877c6664,"openfl.display.Graphics.readGraphicsData","openfl/display/Graphics.hx",659,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_668___calculateBezierCubicPoint,"openfl.display.Graphics","__calculateBezierCubicPoint",0xb6679552,"openfl.display.Graphics.__calculateBezierCubicPoint","openfl/display/Graphics.hx",668,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_676___calculateBezierQuadPoint,"openfl.display.Graphics","__calculateBezierQuadPoint",0x2414b8dd,"openfl.display.Graphics.__calculateBezierQuadPoint","openfl/display/Graphics.hx",676,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_684___cleanup,"openfl.display.Graphics","__cleanup",0x9445428b,"openfl.display.Graphics.__cleanup","openfl/display/Graphics.hx",684,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_705___getBounds,"openfl.display.Graphics","__getBounds",0x7b7eedd2,"openfl.display.Graphics.__getBounds","openfl/display/Graphics.hx",705,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_717___hitTest,"openfl.display.Graphics","__hitTest",0xcb8296ac,"openfl.display.Graphics.__hitTest","openfl/display/Graphics.hx",717,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_745___inflateBounds,"openfl.display.Graphics","__inflateBounds",0x7eaeb403,"openfl.display.Graphics.__inflateBounds","openfl/display/Graphics.hx",745,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_786___readGraphicsData,"openfl.display.Graphics","__readGraphicsData",0xf8dcc1c4,"openfl.display.Graphics.__readGraphicsData","openfl/display/Graphics.hx",786,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_920___update,"openfl.display.Graphics","__update",0x711b5982,"openfl.display.Graphics.__update","openfl/display/Graphics.hx",920,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1022_set___dirty,"openfl.display.Graphics","set___dirty",0x3f74a55c,"openfl.display.Graphics.set___dirty","openfl/display/Graphics.hx",1022,0x8d299ce7)
namespace openfl{
namespace display{

void Graphics_obj::__construct( ::openfl::display::DisplayObject owner){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_41_new)
HXLINE(  46)		this->_hx___dirty = true;
HXLINE(  72)		this->_hx___owner = owner;
HXLINE(  74)		this->_hx___commands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
HXLINE(  75)		this->_hx___strokePadding = (int)0;
HXLINE(  76)		this->_hx___positionX = (int)0;
HXLINE(  77)		this->_hx___positionY = (int)0;
HXLINE(  78)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  79)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  80)		this->_hx___width = (int)0;
HXLINE(  81)		this->_hx___height = (int)0;
            	}

Dynamic Graphics_obj::__CreateEmpty() { return new Graphics_obj; }

void *Graphics_obj::_hx_vtable = 0;

Dynamic Graphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b098f39;
}

void Graphics_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_90_beginBitmapFill)
HXLINE(  92)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN(  92)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN(  92)		if (hx::IsNotNull( matrix )) {
HXLINE(  92)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXLINE(  92)			_hx_tmp1 = null();
            		}
HXDLIN(  92)		_hx_tmp->beginBitmapFill(bitmap,_hx_tmp1,repeat,smooth);
HXLINE(  94)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,beginBitmapFill,(void))

void Graphics_obj::beginFill(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_99_beginFill)
HXLINE( 101)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 101)		_hx_tmp->beginFill(((int)color & (int)(int)16777215),alpha);
HXLINE( 103)		if ((alpha > (int)0)) {
HXLINE( 103)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginFill,(void))

void Graphics_obj::beginGradientFill( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_108_beginGradientFill)
HXLINE( 110)		this->_hx___commands->beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
HXLINE( 112)		{
HXLINE( 112)			int _g = (int)0;
HXDLIN( 112)			while((_g < alphas->length)){
HXLINE( 112)				Float alpha = alphas->__get(_g);
HXDLIN( 112)				_g = (_g + (int)1);
HXLINE( 114)				if ((alpha > (int)0)) {
HXLINE( 116)					this->_hx___visible = true;
HXLINE( 117)					goto _hx_goto_3;
            				}
            			}
            			_hx_goto_3:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,beginGradientFill,(void))

void Graphics_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_126_clear)
HXLINE( 128)		this->_hx___commands->clear();
HXLINE( 129)		this->_hx___strokePadding = (int)0;
HXLINE( 131)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 133)			this->set___dirty(true);
HXLINE( 134)			this->_hx___transformDirty = true;
HXLINE( 135)			this->_hx___bounds = null();
            		}
HXLINE( 139)		this->_hx___visible = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,clear,(void))

void Graphics_obj::copyFrom( ::openfl::display::Graphics sourceGraphics){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_148_copyFrom)
HXLINE( 150)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 150)		if (hx::IsNotNull( sourceGraphics->_hx___bounds )) {
HXLINE( 150)			_hx_tmp = sourceGraphics->_hx___bounds->clone();
            		}
            		else {
HXLINE( 150)			_hx_tmp = null();
            		}
HXDLIN( 150)		this->_hx___bounds = _hx_tmp;
HXLINE( 151)		this->_hx___commands = sourceGraphics->_hx___commands->copy();
HXLINE( 152)		this->set___dirty(true);
HXLINE( 153)		this->_hx___strokePadding = sourceGraphics->_hx___strokePadding;
HXLINE( 154)		this->_hx___positionX = sourceGraphics->_hx___positionX;
HXLINE( 155)		this->_hx___positionY = sourceGraphics->_hx___positionY;
HXLINE( 156)		this->_hx___transformDirty = true;
HXLINE( 157)		this->_hx___visible = sourceGraphics->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,copyFrom,(void))

void Graphics_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_162_cubicCurveTo)
HXLINE( 164)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 164)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 165)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 165)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 167)		Float ix1;
HXDLIN( 167)		Float iy1;
HXDLIN( 167)		Float ix2;
HXDLIN( 167)		Float iy2;
HXLINE( 169)		ix1 = anchorX;
HXLINE( 170)		ix2 = anchorX;
HXLINE( 172)		bool _hx_tmp2;
HXDLIN( 172)		bool _hx_tmp3;
HXDLIN( 172)		bool _hx_tmp4;
HXDLIN( 172)		if ((controlX1 < anchorX)) {
HXLINE( 172)			_hx_tmp4 = (controlX1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 172)			_hx_tmp4 = false;
            		}
HXDLIN( 172)		if (!(_hx_tmp4)) {
HXLINE( 172)			if ((controlX1 > anchorX)) {
HXLINE( 172)				_hx_tmp3 = (controlX1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 172)				_hx_tmp3 = false;
            			}
            		}
            		else {
HXLINE( 172)			_hx_tmp3 = true;
            		}
HXDLIN( 172)		if (_hx_tmp3) {
HXLINE( 172)			bool _hx_tmp5;
HXDLIN( 172)			if ((controlX2 < anchorX)) {
HXLINE( 172)				_hx_tmp5 = (controlX2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 172)				_hx_tmp5 = false;
            			}
HXDLIN( 172)			if (!(_hx_tmp5)) {
HXLINE( 172)				if ((controlX2 > anchorX)) {
HXLINE( 172)					_hx_tmp2 = (controlX2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 172)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 172)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 172)			_hx_tmp2 = false;
            		}
HXDLIN( 172)		if (!(_hx_tmp2)) {
HXLINE( 174)			Float u = ((int)2 * this->_hx___positionX);
HXDLIN( 174)			Float u1 = (u - ((int)4 * controlX1));
HXDLIN( 174)			Float u2 = (u1 + ((int)2 * controlX2));
HXLINE( 175)			Float v = (controlX1 - this->_hx___positionX);
HXLINE( 176)			Float w = -(this->_hx___positionX);
HXDLIN( 176)			Float w1 = ((w + ((int)3 * controlX1)) + anchorX);
HXDLIN( 176)			Float w2 = (w1 - ((int)3 * controlX2));
HXLINE( 178)			Float t1 = (-(u2) + ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 178)			Float t11 = ((Float)t1 / (Float)((int)2 * w2));
HXLINE( 179)			Float t2 = (-(u2) - ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 179)			Float t21 = ((Float)t2 / (Float)((int)2 * w2));
HXLINE( 181)			bool _hx_tmp6;
HXDLIN( 181)			if ((t11 > (int)0)) {
HXLINE( 181)				_hx_tmp6 = (t11 < (int)1);
            			}
            			else {
HXLINE( 181)				_hx_tmp6 = false;
            			}
HXDLIN( 181)			if (_hx_tmp6) {
HXLINE( 183)				ix1 = this->_hx___calculateBezierCubicPoint(t11,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
HXLINE( 187)			bool _hx_tmp7;
HXDLIN( 187)			if ((t21 > (int)0)) {
HXLINE( 187)				_hx_tmp7 = (t21 < (int)1);
            			}
            			else {
HXLINE( 187)				_hx_tmp7 = false;
            			}
HXDLIN( 187)			if (_hx_tmp7) {
HXLINE( 189)				ix2 = this->_hx___calculateBezierCubicPoint(t21,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
            		}
HXLINE( 195)		iy1 = anchorY;
HXLINE( 196)		iy2 = anchorY;
HXLINE( 198)		bool _hx_tmp8;
HXDLIN( 198)		bool _hx_tmp9;
HXDLIN( 198)		bool _hx_tmp10;
HXDLIN( 198)		if ((controlY1 < anchorY)) {
HXLINE( 198)			_hx_tmp10 = (controlY1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 198)			_hx_tmp10 = false;
            		}
HXDLIN( 198)		if (!(_hx_tmp10)) {
HXLINE( 198)			if ((controlY1 > anchorY)) {
HXLINE( 198)				_hx_tmp9 = (controlY1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 198)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 198)			_hx_tmp9 = true;
            		}
HXDLIN( 198)		if (_hx_tmp9) {
HXLINE( 198)			bool _hx_tmp11;
HXDLIN( 198)			if ((controlY2 < anchorY)) {
HXLINE( 198)				_hx_tmp11 = (controlY2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 198)				_hx_tmp11 = false;
            			}
HXDLIN( 198)			if (!(_hx_tmp11)) {
HXLINE( 198)				if ((controlY2 > anchorY)) {
HXLINE( 198)					_hx_tmp8 = (controlY2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 198)					_hx_tmp8 = false;
            				}
            			}
            			else {
HXLINE( 198)				_hx_tmp8 = true;
            			}
            		}
            		else {
HXLINE( 198)			_hx_tmp8 = false;
            		}
HXDLIN( 198)		if (!(_hx_tmp8)) {
HXLINE( 200)			Float u3 = ((int)2 * this->_hx___positionX);
HXDLIN( 200)			Float u4 = (u3 - ((int)4 * controlY1));
HXDLIN( 200)			Float u5 = (u4 + ((int)2 * controlY2));
HXLINE( 201)			Float v1 = (controlY1 - this->_hx___positionX);
HXLINE( 202)			Float w3 = -(this->_hx___positionX);
HXDLIN( 202)			Float w4 = ((w3 + ((int)3 * controlY1)) + anchorY);
HXDLIN( 202)			Float w5 = (w4 - ((int)3 * controlY2));
HXLINE( 204)			Float t12 = (-(u5) + ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 204)			Float t13 = ((Float)t12 / (Float)((int)2 * w5));
HXLINE( 205)			Float t22 = (-(u5) - ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 205)			Float t23 = ((Float)t22 / (Float)((int)2 * w5));
HXLINE( 207)			bool _hx_tmp12;
HXDLIN( 207)			if ((t13 > (int)0)) {
HXLINE( 207)				_hx_tmp12 = (t13 < (int)1);
            			}
            			else {
HXLINE( 207)				_hx_tmp12 = false;
            			}
HXDLIN( 207)			if (_hx_tmp12) {
HXLINE( 209)				iy1 = this->_hx___calculateBezierCubicPoint(t13,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
HXLINE( 213)			bool _hx_tmp13;
HXDLIN( 213)			if ((t23 > (int)0)) {
HXLINE( 213)				_hx_tmp13 = (t23 < (int)1);
            			}
            			else {
HXLINE( 213)				_hx_tmp13 = false;
            			}
HXDLIN( 213)			if (_hx_tmp13) {
HXLINE( 215)				iy2 = this->_hx___calculateBezierCubicPoint(t23,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
            		}
HXLINE( 221)		Float _hx_tmp14 = (ix1 - this->_hx___strokePadding);
HXDLIN( 221)		this->_hx___inflateBounds(_hx_tmp14,(iy1 - this->_hx___strokePadding));
HXLINE( 222)		Float _hx_tmp15 = (ix1 + this->_hx___strokePadding);
HXDLIN( 222)		this->_hx___inflateBounds(_hx_tmp15,(iy1 + this->_hx___strokePadding));
HXLINE( 223)		Float _hx_tmp16 = (ix2 - this->_hx___strokePadding);
HXDLIN( 223)		this->_hx___inflateBounds(_hx_tmp16,(iy2 - this->_hx___strokePadding));
HXLINE( 224)		Float _hx_tmp17 = (ix2 + this->_hx___strokePadding);
HXDLIN( 224)		this->_hx___inflateBounds(_hx_tmp17,(iy2 + this->_hx___strokePadding));
HXLINE( 226)		this->_hx___positionX = anchorX;
HXLINE( 227)		this->_hx___positionY = anchorY;
HXLINE( 229)		Float _hx_tmp18 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 229)		this->_hx___inflateBounds(_hx_tmp18,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 230)		Float _hx_tmp19 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 230)		this->_hx___inflateBounds(_hx_tmp19,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 232)		this->_hx___commands->cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
HXLINE( 234)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,cubicCurveTo,(void))

void Graphics_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_239_curveTo)
HXLINE( 241)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 241)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 242)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 242)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 244)		Float ix;
HXDLIN( 244)		Float iy;
HXLINE( 246)		bool _hx_tmp2;
HXDLIN( 246)		bool _hx_tmp3;
HXDLIN( 246)		if ((controlX < anchorX)) {
HXLINE( 246)			_hx_tmp3 = (controlX > this->_hx___positionX);
            		}
            		else {
HXLINE( 246)			_hx_tmp3 = false;
            		}
HXDLIN( 246)		if (!(_hx_tmp3)) {
HXLINE( 246)			if ((controlX > anchorX)) {
HXLINE( 246)				_hx_tmp2 = (controlX < this->_hx___positionX);
            			}
            			else {
HXLINE( 246)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 246)			_hx_tmp2 = true;
            		}
HXDLIN( 246)		if (_hx_tmp2) {
HXLINE( 248)			ix = anchorX;
            		}
            		else {
HXLINE( 252)			Float tx = (this->_hx___positionX - controlX);
HXDLIN( 252)			Float tx1 = this->_hx___positionX;
HXDLIN( 252)			Float tx2 = ((Float)tx / (Float)((tx1 - ((int)2 * controlX)) + anchorX));
HXLINE( 253)			ix = this->_hx___calculateBezierQuadPoint(tx2,this->_hx___positionX,controlX,anchorX);
            		}
HXLINE( 257)		bool _hx_tmp4;
HXDLIN( 257)		bool _hx_tmp5;
HXDLIN( 257)		if ((controlY < anchorY)) {
HXLINE( 257)			_hx_tmp5 = (controlY > this->_hx___positionY);
            		}
            		else {
HXLINE( 257)			_hx_tmp5 = false;
            		}
HXDLIN( 257)		if (!(_hx_tmp5)) {
HXLINE( 257)			if ((controlY > anchorY)) {
HXLINE( 257)				_hx_tmp4 = (controlY < this->_hx___positionY);
            			}
            			else {
HXLINE( 257)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 257)			_hx_tmp4 = true;
            		}
HXDLIN( 257)		if (_hx_tmp4) {
HXLINE( 259)			iy = anchorY;
            		}
            		else {
HXLINE( 263)			Float ty = (this->_hx___positionY - controlY);
HXDLIN( 263)			Float ty1 = this->_hx___positionY;
HXDLIN( 263)			Float ty2 = ((Float)ty / (Float)((ty1 - ((int)2 * controlY)) + anchorY));
HXLINE( 264)			iy = this->_hx___calculateBezierQuadPoint(ty2,this->_hx___positionY,controlY,anchorY);
            		}
HXLINE( 268)		Float _hx_tmp6 = (ix - this->_hx___strokePadding);
HXDLIN( 268)		this->_hx___inflateBounds(_hx_tmp6,(iy - this->_hx___strokePadding));
HXLINE( 269)		Float _hx_tmp7 = (ix + this->_hx___strokePadding);
HXDLIN( 269)		this->_hx___inflateBounds(_hx_tmp7,(iy + this->_hx___strokePadding));
HXLINE( 271)		this->_hx___positionX = anchorX;
HXLINE( 272)		this->_hx___positionY = anchorY;
HXLINE( 274)		this->_hx___commands->curveTo(controlX,controlY,anchorX,anchorY);
HXLINE( 276)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,curveTo,(void))

void Graphics_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_281_drawCircle)
HXLINE( 283)		if ((radius <= (int)0)) {
HXLINE( 283)			return;
            		}
HXLINE( 285)		Float _hx_tmp = ((x - radius) - this->_hx___strokePadding);
HXDLIN( 285)		this->_hx___inflateBounds(_hx_tmp,((y - radius) - this->_hx___strokePadding));
HXLINE( 286)		Float _hx_tmp1 = ((x + radius) + this->_hx___strokePadding);
HXDLIN( 286)		this->_hx___inflateBounds(_hx_tmp1,((y + radius) + this->_hx___strokePadding));
HXLINE( 288)		this->_hx___commands->drawCircle(x,y,radius);
HXLINE( 290)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawCircle,(void))

void Graphics_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_295_drawEllipse)
HXLINE( 297)		bool _hx_tmp;
HXDLIN( 297)		if (!((width <= (int)0))) {
HXLINE( 297)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 297)			_hx_tmp = true;
            		}
HXDLIN( 297)		if (_hx_tmp) {
HXLINE( 297)			return;
            		}
HXLINE( 299)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 299)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 300)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 300)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 302)		this->_hx___commands->drawEllipse(x,y,width,height);
HXLINE( 304)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawEllipse,(void))

void Graphics_obj::drawGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_309_drawGraphicsData)
HXLINE( 311)		 ::openfl::display::GraphicsSolidFill fill;
HXLINE( 312)		 ::openfl::display::GraphicsBitmapFill bitmapFill;
HXLINE( 313)		 ::openfl::display::GraphicsGradientFill gradientFill;
HXLINE( 314)		 ::openfl::display::GraphicsStroke stroke;
HXLINE( 315)		 ::openfl::display::GraphicsPath path;
HXLINE( 316)		 ::openfl::display::GraphicsTrianglePath trianglePath;
HXLINE( 318)		{
HXLINE( 318)			int _g = (int)0;
HXDLIN( 318)			while((_g < graphicsData->get_length())){
HXLINE( 318)				::Dynamic graphics = graphicsData->get(_g);
HXDLIN( 318)				_g = (_g + (int)1);
HXLINE( 320)				{
HXLINE( 320)					 ::openfl::display::GraphicsDataType _g1 = graphics->__Field(HX_("__graphicsDataType",0f,5d,4d,46),hx::paccDynamic);
HXDLIN( 320)					 ::openfl::display::GraphicsDataType _hx_switch_0 = _g1;
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::STROKE_dyn()) ){
HXLINE( 339)						stroke = ( ( ::openfl::display::GraphicsStroke)(graphics) );
HXLINE( 341)						if (hx::IsNotNull( stroke->fill )) {
HXLINE( 343)							 ::Dynamic thickness = stroke->thickness;
HXLINE( 345)							if (::Math_obj::isNaN(thickness)) {
HXLINE( 347)								thickness = null();
            							}
HXLINE( 351)							{
HXLINE( 351)								 ::openfl::display::GraphicsFillType _g11 = stroke->fill->__Field(HX_("__graphicsFillType",e8,75,eb,27),hx::paccDynamic);
HXDLIN( 351)								 ::openfl::display::GraphicsFillType _hx_switch_1 = _g11;
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::SOLID_FILL_dyn()) ){
HXLINE( 355)									fill = ( ( ::openfl::display::GraphicsSolidFill)(stroke->fill) );
HXLINE( 356)									this->lineStyle(thickness,fill->color,fill->alpha,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 353)									goto _hx_goto_13;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::GRADIENT_FILL_dyn()) ){
HXLINE( 366)									gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(stroke->fill) );
HXLINE( 367)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 368)									this->lineGradientStyle(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 364)									goto _hx_goto_13;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::BITMAP_FILL_dyn()) ){
HXLINE( 360)									bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(stroke->fill) );
HXLINE( 361)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 362)									this->lineBitmapStyle(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 358)									goto _hx_goto_13;
            								}
            								/* default */{
            								}
            								_hx_goto_13:;
            							}
            						}
            						else {
HXLINE( 376)							this->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            						}
HXLINE( 337)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::SOLID_dyn()) ){
HXLINE( 324)						fill = ( ( ::openfl::display::GraphicsSolidFill)(graphics) );
HXLINE( 325)						this->beginFill(fill->color,fill->alpha);
HXLINE( 322)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::GRADIENT_dyn()) ){
HXLINE( 334)						gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(graphics) );
HXLINE( 335)						this->beginGradientFill(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 332)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::PATH_dyn()) ){
HXLINE( 382)						path = ( ( ::openfl::display::GraphicsPath)(graphics) );
HXLINE( 383)						this->drawPath(path->commands,path->data,path->winding);
HXLINE( 380)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::BITMAP_dyn()) ){
HXLINE( 329)						bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(graphics) );
HXLINE( 330)						this->beginBitmapFill(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 327)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::END_dyn()) ){
HXLINE( 392)						this->endFill();
HXDLIN( 392)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::TRIANGLE_PATH_dyn()) ){
HXLINE( 387)						trianglePath = ( ( ::openfl::display::GraphicsTrianglePath)(graphics) );
HXLINE( 388)						this->drawTriangles(trianglePath->vertices,trianglePath->indices,trianglePath->uvtData,trianglePath->culling);
HXLINE( 385)						goto _hx_goto_12;
            					}
            					_hx_goto_12:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,drawGraphicsData,(void))

void Graphics_obj::drawPath( ::openfl::_Vector::IntVector commands, ::openfl::_Vector::FloatVector data, ::Dynamic __o_winding){
 ::Dynamic winding = __o_winding.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_401_drawPath)
HXLINE( 403)		int dataIndex = (int)0;
HXLINE( 405)		{
HXLINE( 405)			int _g = (int)0;
HXDLIN( 405)			while((_g < commands->get_length())){
HXLINE( 405)				int command = commands->get(_g);
HXDLIN( 405)				_g = (_g + (int)1);
HXLINE( 407)				switch((int)(command)){
            					case (int)1: {
HXLINE( 411)						Float _hx_tmp = data->get(dataIndex);
HXDLIN( 411)						this->moveTo(_hx_tmp,data->get((dataIndex + (int)1)));
HXLINE( 412)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)2: {
HXLINE( 416)						Float _hx_tmp1 = data->get(dataIndex);
HXDLIN( 416)						this->lineTo(_hx_tmp1,data->get((dataIndex + (int)1)));
HXLINE( 417)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)3: {
HXLINE( 431)						Float _hx_tmp2 = data->get(dataIndex);
HXDLIN( 431)						Float _hx_tmp3 = data->get((dataIndex + (int)1));
HXDLIN( 431)						Float _hx_tmp4 = data->get((dataIndex + (int)2));
HXDLIN( 431)						this->curveTo(_hx_tmp2,_hx_tmp3,_hx_tmp4,data->get((dataIndex + (int)3)));
HXLINE( 432)						dataIndex = (dataIndex + (int)4);
            					}
            					break;
            					case (int)4: {
HXLINE( 421)						Float _hx_tmp5 = data->get((dataIndex + (int)2));
HXDLIN( 421)						this->moveTo(_hx_tmp5,data->get((dataIndex + (int)3)));
HXDLIN( 421)						goto _hx_goto_15;
            					}
            					break;
            					case (int)5: {
HXLINE( 426)						Float _hx_tmp6 = data->get((dataIndex + (int)2));
HXDLIN( 426)						this->lineTo(_hx_tmp6,data->get((dataIndex + (int)3)));
HXDLIN( 426)						goto _hx_goto_15;
            					}
            					break;
            					case (int)6: {
HXLINE( 436)						Float _hx_tmp7 = data->get(dataIndex);
HXDLIN( 436)						Float _hx_tmp8 = data->get((dataIndex + (int)1));
HXDLIN( 436)						Float _hx_tmp9 = data->get((dataIndex + (int)2));
HXDLIN( 436)						Float _hx_tmp10 = data->get((dataIndex + (int)3));
HXDLIN( 436)						Float _hx_tmp11 = data->get((dataIndex + (int)4));
HXDLIN( 436)						this->cubicCurveTo(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,data->get((dataIndex + (int)5)));
HXLINE( 437)						dataIndex = (dataIndex + (int)6);
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			_hx_goto_15:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawPath,(void))

void Graphics_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_448_drawRect)
HXLINE( 450)		bool _hx_tmp;
HXDLIN( 450)		if (!((width <= (int)0))) {
HXLINE( 450)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 450)			_hx_tmp = true;
            		}
HXDLIN( 450)		if (_hx_tmp) {
HXLINE( 450)			return;
            		}
HXLINE( 452)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 452)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 453)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 453)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 455)		this->_hx___commands->drawRect(x,y,width,height);
HXLINE( 457)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawRect,(void))

void Graphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_462_drawRoundRect)
HXLINE( 464)		bool _hx_tmp;
HXDLIN( 464)		if (!((width <= (int)0))) {
HXLINE( 464)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 464)			_hx_tmp = true;
            		}
HXDLIN( 464)		if (_hx_tmp) {
HXLINE( 464)			return;
            		}
HXLINE( 466)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 466)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 467)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 467)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 469)		this->_hx___commands->drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
HXLINE( 471)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,drawRoundRect,(void))

void Graphics_obj::drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_476_drawRoundRectComplex)
HXLINE( 478)		bool _hx_tmp;
HXDLIN( 478)		if (!((width <= (int)0))) {
HXLINE( 478)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 478)			_hx_tmp = true;
            		}
HXDLIN( 478)		if (_hx_tmp) {
HXLINE( 478)			return;
            		}
HXLINE( 480)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 480)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 481)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 481)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 483)		Float xw = (x + width);
HXLINE( 484)		Float yh = (y + height);
HXLINE( 485)		Float minSize;
HXDLIN( 485)		if ((width < height)) {
HXLINE( 485)			minSize = (width * (int)2);
            		}
            		else {
HXLINE( 485)			minSize = (height * (int)2);
            		}
HXLINE( 486)		if ((topLeftRadius < minSize)) {
HXLINE( 486)			topLeftRadius = topLeftRadius;
            		}
            		else {
HXLINE( 486)			topLeftRadius = minSize;
            		}
HXLINE( 487)		if ((topRightRadius < minSize)) {
HXLINE( 487)			topRightRadius = topRightRadius;
            		}
            		else {
HXLINE( 487)			topRightRadius = minSize;
            		}
HXLINE( 488)		if ((bottomLeftRadius < minSize)) {
HXLINE( 488)			bottomLeftRadius = bottomLeftRadius;
            		}
            		else {
HXLINE( 488)			bottomLeftRadius = minSize;
            		}
HXLINE( 489)		if ((bottomRightRadius < minSize)) {
HXLINE( 489)			bottomRightRadius = bottomRightRadius;
            		}
            		else {
HXLINE( 489)			bottomRightRadius = minSize;
            		}
HXLINE( 491)		Float anchor = ((int)1 - ::Math_obj::sin(((int)45 * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE( 492)		Float control = ((int)1 - ::Math_obj::tan((((Float)22.5) * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE( 494)		Float a = (bottomRightRadius * anchor);
HXLINE( 495)		Float s = (bottomRightRadius * control);
HXLINE( 496)		this->moveTo(xw,(yh - bottomRightRadius));
HXLINE( 497)		this->curveTo(xw,(yh - s),(xw - a),(yh - a));
HXLINE( 498)		this->curveTo((xw - s),yh,(xw - bottomRightRadius),yh);
HXLINE( 500)		a = (bottomLeftRadius * anchor);
HXLINE( 501)		s = (bottomLeftRadius * control);
HXLINE( 502)		this->lineTo((x + bottomLeftRadius),yh);
HXLINE( 503)		this->curveTo((x + s),yh,(x + a),(yh - a));
HXLINE( 504)		this->curveTo(x,(yh - s),x,(yh - bottomLeftRadius));
HXLINE( 506)		a = (topLeftRadius * anchor);
HXLINE( 507)		s = (topLeftRadius * control);
HXLINE( 508)		this->lineTo(x,(y + topLeftRadius));
HXLINE( 509)		this->curveTo(x,(y + s),(x + a),(y + a));
HXLINE( 510)		this->curveTo((x + s),y,(x + topLeftRadius),y);
HXLINE( 512)		a = (topRightRadius * anchor);
HXLINE( 513)		s = (topRightRadius * control);
HXLINE( 514)		this->lineTo((xw - topRightRadius),y);
HXLINE( 515)		this->curveTo((xw - s),y,(xw - a),(y + a));
HXLINE( 516)		this->curveTo(xw,(y + s),xw,(y + topRightRadius));
HXLINE( 517)		this->lineTo(xw,(yh - bottomRightRadius));
HXLINE( 519)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,drawRoundRectComplex,(void))

void Graphics_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic __o_culling){
 ::Dynamic culling = __o_culling.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_524_drawTriangles)
HXLINE( 526)		bool _hx_tmp;
HXDLIN( 526)		bool _hx_tmp1;
HXDLIN( 526)		if (hx::IsNotNull( vertices )) {
HXLINE( 526)			_hx_tmp1 = hx::IsNull( indices );
            		}
            		else {
HXLINE( 526)			_hx_tmp1 = true;
            		}
HXDLIN( 526)		if (!(_hx_tmp1)) {
HXLINE( 526)			_hx_tmp = hx::IsNull( uvtData );
            		}
            		else {
HXLINE( 526)			_hx_tmp = true;
            		}
HXDLIN( 526)		if (_hx_tmp) {
HXLINE( 526)			return;
            		}
HXLINE( 528)		int vlen = ::Std_obj::_hx_int(((Float)vertices->get_length() / (Float)(int)2));
HXLINE( 530)		if (hx::IsNull( culling )) {
HXLINE( 532)			culling = (int)1;
            		}
HXLINE( 536)		if (hx::IsNull( indices )) {
HXLINE( 538)			if ((hx::Mod(vlen,(int)3) != (int)0)) {
HXLINE( 540)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Not enough vertices to close a triangle.",fe,c6,58,0d)));
            			}
HXLINE( 544)			int length = null();
HXDLIN( 544)			bool fixed = null();
HXDLIN( 544)			indices =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 546)			{
HXLINE( 546)				int _g1 = (int)0;
HXDLIN( 546)				int _g = vlen;
HXDLIN( 546)				while((_g1 < _g)){
HXLINE( 546)					_g1 = (_g1 + (int)1);
HXDLIN( 546)					int i = (_g1 - (int)1);
HXLINE( 548)					indices->push(i);
            				}
            			}
            		}
HXLINE( 554)		this->_hx___inflateBounds((int)0,(int)0);
HXLINE( 556)		Float tmpx = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 557)		Float tmpy = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 558)		Float maxX = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 559)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 561)		{
HXLINE( 561)			int _g11 = (int)0;
HXDLIN( 561)			int _g2 = vlen;
HXDLIN( 561)			while((_g11 < _g2)){
HXLINE( 561)				_g11 = (_g11 + (int)1);
HXDLIN( 561)				int i1 = (_g11 - (int)1);
HXLINE( 563)				tmpx = vertices->get((i1 * (int)2));
HXLINE( 564)				tmpy = vertices->get(((i1 * (int)2) + (int)1));
HXLINE( 565)				if ((maxX < tmpx)) {
HXLINE( 565)					maxX = tmpx;
            				}
HXLINE( 566)				if ((maxY < tmpy)) {
HXLINE( 566)					maxY = tmpy;
            				}
            			}
            		}
HXLINE( 570)		this->_hx___inflateBounds(maxX,maxY);
HXLINE( 571)		this->_hx___commands->drawTriangles(vertices,indices,uvtData,culling);
HXLINE( 573)		this->set___dirty(true);
HXLINE( 574)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawTriangles,(void))

void Graphics_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_581_endFill)
HXLINE( 581)		this->_hx___commands->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,endFill,(void))

void Graphics_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_588_lineBitmapStyle)
HXLINE( 588)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 588)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN( 588)		if (hx::IsNotNull( matrix )) {
HXLINE( 588)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXLINE( 588)			_hx_tmp1 = null();
            		}
HXDLIN( 588)		_hx_tmp->lineBitmapStyle(bitmap,_hx_tmp1,repeat,smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,lineBitmapStyle,(void))

void Graphics_obj::lineGradientStyle( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_595_lineGradientStyle)
HXLINE( 595)		this->_hx___commands->lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineGradientStyle,(void))

void Graphics_obj::lineStyle( ::Dynamic thickness,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< bool >  __o_pixelHinting, ::Dynamic __o_scaleMode, ::Dynamic caps, ::Dynamic joints,hx::Null< Float >  __o_miterLimit){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
bool pixelHinting = __o_pixelHinting.Default(false);
 ::Dynamic scaleMode = __o_scaleMode.Default(2);
Float miterLimit = __o_miterLimit.Default(3);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_600_lineStyle)
HXLINE( 602)		if (hx::IsNotNull( thickness )) {
HXLINE( 604)			if (hx::IsEq( joints,(int)1 )) {
HXLINE( 606)				if (hx::IsGreater( thickness,this->_hx___strokePadding )) {
HXLINE( 606)					this->_hx___strokePadding = thickness;
            				}
            			}
            			else {
HXLINE( 610)				if ((((Float)thickness / (Float)(int)2) > this->_hx___strokePadding)) {
HXLINE( 610)					this->_hx___strokePadding = ((Float)thickness / (Float)(int)2);
            				}
            			}
            		}
HXLINE( 616)		this->_hx___commands->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
HXLINE( 618)		if (hx::IsNotNull( thickness )) {
HXLINE( 618)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineStyle,(void))

void Graphics_obj::lineTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_623_lineTo)
HXLINE( 625)		bool _hx_tmp;
HXDLIN( 625)		if (!(!(::Math_obj::isFinite(x)))) {
HXLINE( 625)			_hx_tmp = !(::Math_obj::isFinite(y));
            		}
            		else {
HXLINE( 625)			_hx_tmp = true;
            		}
HXDLIN( 625)		if (_hx_tmp) {
HXLINE( 627)			return;
            		}
HXLINE( 633)		Float _hx_tmp1 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 633)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 634)		Float _hx_tmp2 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 634)		this->_hx___inflateBounds(_hx_tmp2,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 636)		this->_hx___positionX = x;
HXLINE( 637)		this->_hx___positionY = y;
HXLINE( 639)		Float _hx_tmp3 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 639)		this->_hx___inflateBounds(_hx_tmp3,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 640)		Float _hx_tmp4 = this->_hx___positionX;
HXDLIN( 640)		Float _hx_tmp5 = (_hx_tmp4 + (this->_hx___strokePadding * (int)2));
HXDLIN( 640)		this->_hx___inflateBounds(_hx_tmp5,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 642)		this->_hx___commands->lineTo(x,y);
HXLINE( 644)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,lineTo,(void))

void Graphics_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_649_moveTo)
HXLINE( 651)		this->_hx___positionX = x;
HXLINE( 652)		this->_hx___positionY = y;
HXLINE( 654)		this->_hx___commands->moveTo(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,moveTo,(void))

 ::openfl::_Vector::ObjectVector Graphics_obj::readGraphicsData(hx::Null< bool >  __o_recurse){
bool recurse = __o_recurse.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_659_readGraphicsData)
HXLINE( 661)		int length = null();
HXDLIN( 661)		bool fixed = null();
HXDLIN( 661)		 ::openfl::_Vector::ObjectVector graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 662)		this->_hx___owner->_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 663)		return graphicsData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,readGraphicsData,return )

Float Graphics_obj::_hx___calculateBezierCubicPoint(Float t,Float p1,Float p2,Float p3,Float p4){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_668___calculateBezierCubicPoint)
HXLINE( 670)		Float iT = ((int)1 - t);
HXLINE( 671)		return ((((p1 * ((iT * iT) * iT)) + ((((int)3 * p2) * t) * (iT * iT))) + ((((int)3 * p3) * iT) * (t * t))) + (p4 * ((t * t) * t)));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,_hx___calculateBezierCubicPoint,return )

Float Graphics_obj::_hx___calculateBezierQuadPoint(Float t,Float p1,Float p2,Float p3){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_676___calculateBezierQuadPoint)
HXLINE( 678)		Float iT = ((int)1 - t);
HXLINE( 679)		return ((((iT * iT) * p1) + ((((int)2 * iT) * t) * p2)) + ((t * t) * p3));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___calculateBezierQuadPoint,return )

void Graphics_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_684___cleanup)
HXLINE( 686)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 688)			this->set___dirty(true);
HXLINE( 689)			this->_hx___transformDirty = true;
            		}
HXLINE( 693)		this->_hx___bitmap = null();
HXLINE( 699)		this->_hx___cairo = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___cleanup,(void))

void Graphics_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_705___getBounds)
HXLINE( 707)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 707)			return;
            		}
HXLINE( 709)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 710)		this->_hx___bounds->_hx___transform(bounds,matrix);
HXLINE( 711)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE( 712)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___getBounds,(void))

bool Graphics_obj::_hx___hitTest(Float x,Float y,bool shapeFlag, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_717___hitTest)
HXLINE( 719)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 719)			return false;
            		}
HXLINE( 721)		Float norm = (matrix->a * matrix->d);
HXDLIN( 721)		Float norm1 = (norm - (matrix->b * matrix->c));
HXDLIN( 721)		Float px;
HXDLIN( 721)		if ((norm1 == (int)0)) {
HXLINE( 721)			px = -(matrix->tx);
            		}
            		else {
HXLINE( 721)			Float matrix1 = matrix->c;
HXDLIN( 721)			Float px1 = (matrix1 * (matrix->ty - y));
HXDLIN( 721)			Float matrix2 = matrix->d;
HXDLIN( 721)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (matrix2 * (x - matrix->tx))));
            		}
HXLINE( 722)		Float norm2 = (matrix->a * matrix->d);
HXDLIN( 722)		Float norm3 = (norm2 - (matrix->b * matrix->c));
HXDLIN( 722)		Float py;
HXDLIN( 722)		if ((norm3 == (int)0)) {
HXLINE( 722)			py = -(matrix->ty);
            		}
            		else {
HXLINE( 722)			Float matrix3 = matrix->a;
HXDLIN( 722)			Float py1 = (matrix3 * (y - matrix->ty));
HXDLIN( 722)			Float matrix4 = matrix->b;
HXDLIN( 722)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (matrix4 * (matrix->tx - x))));
            		}
HXLINE( 724)		bool _hx_tmp;
HXDLIN( 724)		bool _hx_tmp1;
HXDLIN( 724)		if ((px > this->_hx___bounds->x)) {
HXLINE( 724)			_hx_tmp1 = (py > this->_hx___bounds->y);
            		}
            		else {
HXLINE( 724)			_hx_tmp1 = false;
            		}
HXDLIN( 724)		if (_hx_tmp1) {
HXLINE( 724)			_hx_tmp = this->_hx___bounds->contains(px,py);
            		}
            		else {
HXLINE( 724)			_hx_tmp = false;
            		}
HXDLIN( 724)		if (_hx_tmp) {
HXLINE( 726)			if (shapeFlag) {
HXLINE( 731)				return ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTest(hx::ObjectPtr<OBJ_>(this),px,py);
            			}
HXLINE( 736)			return true;
            		}
HXLINE( 740)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___hitTest,return )

void Graphics_obj::_hx___inflateBounds(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_745___inflateBounds)
HXLINE( 747)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 749)			this->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,y,(int)0,(int)0);
HXLINE( 750)			this->_hx___transformDirty = true;
HXLINE( 751)			return;
            		}
HXLINE( 755)		if ((x < this->_hx___bounds->x)) {
HXLINE( 757)			 ::openfl::geom::Rectangle _hx_tmp = this->_hx___bounds;
HXDLIN( 757)			_hx_tmp->width = (_hx_tmp->width + (this->_hx___bounds->x - x));
HXLINE( 758)			this->_hx___bounds->x = x;
HXLINE( 759)			this->_hx___transformDirty = true;
            		}
HXLINE( 763)		if ((y < this->_hx___bounds->y)) {
HXLINE( 765)			 ::openfl::geom::Rectangle _hx_tmp1 = this->_hx___bounds;
HXDLIN( 765)			_hx_tmp1->height = (_hx_tmp1->height + (this->_hx___bounds->y - y));
HXLINE( 766)			this->_hx___bounds->y = y;
HXLINE( 767)			this->_hx___transformDirty = true;
            		}
HXLINE( 771)		if ((x > (this->_hx___bounds->x + this->_hx___bounds->width))) {
HXLINE( 773)			this->_hx___bounds->width = (x - this->_hx___bounds->x);
            		}
HXLINE( 777)		if ((y > (this->_hx___bounds->y + this->_hx___bounds->height))) {
HXLINE( 779)			this->_hx___bounds->height = (y - this->_hx___bounds->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___inflateBounds,(void))

void Graphics_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_786___readGraphicsData)
HXLINE( 788)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,this->_hx___commands);
HXLINE( 789)		 ::openfl::display::GraphicsPath path = null();
HXDLIN( 789)		 ::openfl::display::GraphicsStroke stroke;
HXLINE( 791)		{
HXLINE( 791)			int _g = (int)0;
HXDLIN( 791)			::Array< ::Dynamic> _g1 = this->_hx___commands->types;
HXDLIN( 791)			while((_g < _g1->length)){
HXLINE( 791)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 791)				_g = (_g + (int)1);
HXLINE( 793)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)3: case (int)4: case (int)5: case (int)6: case (int)7: case (int)8: case (int)15: case (int)16: {
HXLINE( 797)						if (hx::IsNull( path )) {
HXLINE( 799)							path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
            					}
            					break;
            					default:{
HXLINE( 805)						if (hx::IsNotNull( path )) {
HXLINE( 807)							graphicsData->push(path);
HXLINE( 808)							path = null();
            						}
            					}
            				}
HXLINE( 814)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE( 889)						{
HXLINE( 889)							 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN( 889)							switch((int)(_hx_getEnumValueIndex(_g2))){
            								case (int)0: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 889)									data1->oPos = (data1->oPos + (int)2);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 889)									data2->bPos = (data2->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 889)									data3->iPos = (data3->iPos + (int)1);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 889)									data4->fPos = (data4->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN( 889)									data5->oPos = (data5->oPos + (int)4);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN( 889)									data6->iiPos = (data6->iiPos + (int)2);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN( 889)									data7->ffPos = (data7->ffPos + (int)1);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN( 889)									data8->fPos = (data8->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN( 889)									data9->fPos = (data9->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN( 889)									data10->fPos = (data10->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN( 889)									data11->fPos = (data11->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN( 889)									data12->fPos = (data12->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN( 889)									data13->fPos = (data13->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN( 889)									data14->fPos = (data14->fPos + (int)5);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN( 889)									data15->oPos = (data15->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN( 889)									data16->oPos = (data16->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN( 889)									data17->oPos = (data17->oPos + (int)2);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN( 889)									data18->bPos = (data18->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN( 889)									data19->oPos = (data19->oPos + (int)4);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN( 889)									data20->iiPos = (data20->iiPos + (int)2);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN( 889)									data21->ffPos = (data21->ffPos + (int)1);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN( 889)									data22->fPos = (data22->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN( 889)									data23->oPos = (data23->oPos + (int)4);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN( 889)									data24->iPos = (data24->iPos + (int)1);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN( 889)									data25->fPos = (data25->fPos + (int)2);
HXDLIN( 889)									 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN( 889)									data26->bPos = (data26->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN( 889)									data27->fPos = (data27->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN( 889)									data28->fPos = (data28->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 889)									 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN( 889)									data29->oPos = (data29->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 889)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 889)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 889)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 890)						{
HXLINE( 890)							 ::openfl::display::BitmapData c1 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 890)							::cpp::VirtualArray c2 = c->buffer->o;
HXDLIN( 890)							 ::openfl::geom::Matrix c3 = ( ( ::openfl::geom::Matrix)(c2->__get((c->oPos + (int)1))) );
HXDLIN( 890)							bool c4 = c->buffer->b->__get(c->bPos);
HXDLIN( 890)							::Array< bool > c5 = c->buffer->b;
HXDLIN( 890)							graphicsData->push( ::openfl::display::GraphicsBitmapFill_obj::__alloc( HX_CTX ,c1,c3,c4,c5->__get((c->bPos + (int)1))));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 894)						{
HXLINE( 894)							 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN( 894)							switch((int)(_hx_getEnumValueIndex(_g3))){
            								case (int)0: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN( 894)									data30->oPos = (data30->oPos + (int)2);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN( 894)									data31->bPos = (data31->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN( 894)									data32->iPos = (data32->iPos + (int)1);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN( 894)									data33->fPos = (data33->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN( 894)									data34->oPos = (data34->oPos + (int)4);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN( 894)									data35->iiPos = (data35->iiPos + (int)2);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN( 894)									data36->ffPos = (data36->ffPos + (int)1);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN( 894)									data37->fPos = (data37->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN( 894)									data38->fPos = (data38->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN( 894)									data39->fPos = (data39->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN( 894)									data40->fPos = (data40->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN( 894)									data41->fPos = (data41->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN( 894)									data42->fPos = (data42->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN( 894)									data43->fPos = (data43->fPos + (int)5);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN( 894)									data44->oPos = (data44->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN( 894)									data45->oPos = (data45->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN( 894)									data46->oPos = (data46->oPos + (int)2);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN( 894)									data47->bPos = (data47->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN( 894)									data48->oPos = (data48->oPos + (int)4);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN( 894)									data49->iiPos = (data49->iiPos + (int)2);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN( 894)									data50->ffPos = (data50->ffPos + (int)1);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN( 894)									data51->fPos = (data51->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN( 894)									data52->oPos = (data52->oPos + (int)4);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN( 894)									data53->iPos = (data53->iPos + (int)1);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN( 894)									data54->fPos = (data54->fPos + (int)2);
HXDLIN( 894)									 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN( 894)									data55->bPos = (data55->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN( 894)									data56->fPos = (data56->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN( 894)									data57->fPos = (data57->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 894)									 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN( 894)									data58->oPos = (data58->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 894)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 894)						 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN( 894)						 ::openfl::_internal::renderer::DrawCommandReader c6 = this2;
HXLINE( 895)						graphicsData->push( ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c6->buffer->i->__get(c6->iPos),(int)1));
            					}
            					break;
            					case (int)2: {
HXLINE( 899)						{
HXLINE( 899)							 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN( 899)							switch((int)(_hx_getEnumValueIndex(_g4))){
            								case (int)0: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN( 899)									data59->oPos = (data59->oPos + (int)2);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN( 899)									data60->bPos = (data60->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN( 899)									data61->iPos = (data61->iPos + (int)1);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN( 899)									data62->fPos = (data62->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN( 899)									data63->oPos = (data63->oPos + (int)4);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN( 899)									data64->iiPos = (data64->iiPos + (int)2);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN( 899)									data65->ffPos = (data65->ffPos + (int)1);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN( 899)									data66->fPos = (data66->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN( 899)									data67->fPos = (data67->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN( 899)									data68->fPos = (data68->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN( 899)									data69->fPos = (data69->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN( 899)									data70->fPos = (data70->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN( 899)									data71->fPos = (data71->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN( 899)									data72->fPos = (data72->fPos + (int)5);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN( 899)									data73->oPos = (data73->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN( 899)									data74->oPos = (data74->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN( 899)									data75->oPos = (data75->oPos + (int)2);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN( 899)									data76->bPos = (data76->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN( 899)									data77->oPos = (data77->oPos + (int)4);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN( 899)									data78->iiPos = (data78->iiPos + (int)2);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN( 899)									data79->ffPos = (data79->ffPos + (int)1);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN( 899)									data80->fPos = (data80->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN( 899)									data81->oPos = (data81->oPos + (int)4);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN( 899)									data82->iPos = (data82->iPos + (int)1);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN( 899)									data83->fPos = (data83->fPos + (int)2);
HXDLIN( 899)									 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN( 899)									data84->bPos = (data84->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN( 899)									data85->fPos = (data85->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN( 899)									data86->fPos = (data86->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 899)									 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN( 899)									data87->oPos = (data87->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 899)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 899)						 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN( 899)						 ::openfl::_internal::renderer::DrawCommandReader c7 = this3;
HXLINE( 900)						{
HXLINE( 900)							::Array< ::Dynamic> c8 = c7->buffer->ii;
HXDLIN( 900)							::cpp::VirtualArray c9 = c7->buffer->o;
HXDLIN( 900)							::cpp::VirtualArray c10 = c7->buffer->o;
HXDLIN( 900)							::cpp::VirtualArray c11 = c7->buffer->o;
HXDLIN( 900)							graphicsData->push( ::openfl::display::GraphicsGradientFill_obj::__alloc( HX_CTX ,c7->buffer->o->__get(c7->oPos),c7->buffer->ii->__get(c7->iiPos).StaticCast< ::Array< int > >(),c7->buffer->ff->__get(c7->ffPos).StaticCast< ::Array< Float > >(),c8->__get((c7->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c9->__get((c7->oPos + (int)1))) ),c10->__get((c7->oPos + (int)2)),c11->__get((c7->oPos + (int)3)),c7->buffer->f->__get(c7->fPos)));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 818)						{
HXLINE( 818)							 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN( 818)							switch((int)(_hx_getEnumValueIndex(_g5))){
            								case (int)0: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN( 818)									data88->oPos = (data88->oPos + (int)2);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN( 818)									data89->bPos = (data89->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN( 818)									data90->iPos = (data90->iPos + (int)1);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN( 818)									data91->fPos = (data91->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN( 818)									data92->oPos = (data92->oPos + (int)4);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN( 818)									data93->iiPos = (data93->iiPos + (int)2);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 818)									data94->ffPos = (data94->ffPos + (int)1);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 818)									data95->fPos = (data95->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 818)									data96->fPos = (data96->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 818)									data97->fPos = (data97->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 818)									data98->fPos = (data98->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 818)									data99->fPos = (data99->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 818)									data100->fPos = (data100->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 818)									data101->fPos = (data101->fPos + (int)5);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 818)									data102->oPos = (data102->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 818)									data103->oPos = (data103->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 818)									data104->oPos = (data104->oPos + (int)2);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 818)									data105->bPos = (data105->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 818)									data106->oPos = (data106->oPos + (int)4);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 818)									data107->iiPos = (data107->iiPos + (int)2);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 818)									data108->ffPos = (data108->ffPos + (int)1);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 818)									data109->fPos = (data109->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 818)									data110->oPos = (data110->oPos + (int)4);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 818)									data111->iPos = (data111->iPos + (int)1);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 818)									data112->fPos = (data112->fPos + (int)2);
HXDLIN( 818)									 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 818)									data113->bPos = (data113->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 818)									data114->fPos = (data114->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 818)									data115->fPos = (data115->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 818)									 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 818)									data116->oPos = (data116->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 818)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 818)						 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN( 818)						 ::openfl::_internal::renderer::DrawCommandReader c12 = this4;
HXLINE( 819)						Float c13 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 819)						::Array< Float > c14 = c12->buffer->f;
HXDLIN( 819)						Float c15 = c14->__get((c12->fPos + (int)1));
HXDLIN( 819)						::Array< Float > c16 = c12->buffer->f;
HXDLIN( 819)						Float c17 = c16->__get((c12->fPos + (int)2));
HXDLIN( 819)						::Array< Float > c18 = c12->buffer->f;
HXDLIN( 819)						Float c19 = c18->__get((c12->fPos + (int)3));
HXDLIN( 819)						::Array< Float > c20 = c12->buffer->f;
HXDLIN( 819)						Float c21 = c20->__get((c12->fPos + (int)4));
HXDLIN( 819)						::Array< Float > c22 = c12->buffer->f;
HXDLIN( 819)						path->cubicCurveTo(c13,c15,c17,c19,c21,c22->__get((c12->fPos + (int)5)));
            					}
            					break;
            					case (int)4: {
HXLINE( 823)						{
HXLINE( 823)							 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN( 823)							switch((int)(_hx_getEnumValueIndex(_g6))){
            								case (int)0: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 823)									data117->oPos = (data117->oPos + (int)2);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 823)									data118->bPos = (data118->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 823)									data119->iPos = (data119->iPos + (int)1);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 823)									data120->fPos = (data120->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 823)									data121->oPos = (data121->oPos + (int)4);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 823)									data122->iiPos = (data122->iiPos + (int)2);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 823)									data123->ffPos = (data123->ffPos + (int)1);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 823)									data124->fPos = (data124->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 823)									data125->fPos = (data125->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 823)									data126->fPos = (data126->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 823)									data127->fPos = (data127->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 823)									data128->fPos = (data128->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 823)									data129->fPos = (data129->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 823)									data130->fPos = (data130->fPos + (int)5);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 823)									data131->oPos = (data131->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 823)									data132->oPos = (data132->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 823)									data133->oPos = (data133->oPos + (int)2);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 823)									data134->bPos = (data134->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 823)									data135->oPos = (data135->oPos + (int)4);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 823)									data136->iiPos = (data136->iiPos + (int)2);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 823)									data137->ffPos = (data137->ffPos + (int)1);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 823)									data138->fPos = (data138->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 823)									data139->oPos = (data139->oPos + (int)4);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 823)									data140->iPos = (data140->iPos + (int)1);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 823)									data141->fPos = (data141->fPos + (int)2);
HXDLIN( 823)									 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 823)									data142->bPos = (data142->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 823)									data143->fPos = (data143->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 823)									data144->fPos = (data144->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 823)									 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 823)									data145->oPos = (data145->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 823)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 823)						 ::openfl::_internal::renderer::DrawCommandReader this5 = data;
HXDLIN( 823)						 ::openfl::_internal::renderer::DrawCommandReader c23 = this5;
HXLINE( 824)						Float c24 = c23->buffer->f->__get(c23->fPos);
HXDLIN( 824)						::Array< Float > c25 = c23->buffer->f;
HXDLIN( 824)						Float c26 = c25->__get((c23->fPos + (int)1));
HXDLIN( 824)						::Array< Float > c27 = c23->buffer->f;
HXDLIN( 824)						Float c28 = c27->__get((c23->fPos + (int)2));
HXDLIN( 824)						::Array< Float > c29 = c23->buffer->f;
HXDLIN( 824)						path->curveTo(c24,c26,c28,c29->__get((c23->fPos + (int)3)));
            					}
            					break;
            					case (int)5: {
HXLINE( 838)						{
HXLINE( 838)							 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN( 838)							switch((int)(_hx_getEnumValueIndex(_g7))){
            								case (int)0: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 838)									data146->oPos = (data146->oPos + (int)2);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 838)									data147->bPos = (data147->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 838)									data148->iPos = (data148->iPos + (int)1);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 838)									data149->fPos = (data149->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 838)									data150->oPos = (data150->oPos + (int)4);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 838)									data151->iiPos = (data151->iiPos + (int)2);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 838)									data152->ffPos = (data152->ffPos + (int)1);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 838)									data153->fPos = (data153->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 838)									data154->fPos = (data154->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 838)									data155->fPos = (data155->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 838)									data156->fPos = (data156->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 838)									data157->fPos = (data157->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 838)									data158->fPos = (data158->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 838)									data159->fPos = (data159->fPos + (int)5);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 838)									data160->oPos = (data160->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 838)									data161->oPos = (data161->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 838)									data162->oPos = (data162->oPos + (int)2);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 838)									data163->bPos = (data163->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 838)									data164->oPos = (data164->oPos + (int)4);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 838)									data165->iiPos = (data165->iiPos + (int)2);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 838)									data166->ffPos = (data166->ffPos + (int)1);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 838)									data167->fPos = (data167->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 838)									data168->oPos = (data168->oPos + (int)4);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 838)									data169->iPos = (data169->iPos + (int)1);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 838)									data170->fPos = (data170->fPos + (int)2);
HXDLIN( 838)									 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 838)									data171->bPos = (data171->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 838)									data172->fPos = (data172->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 838)									data173->fPos = (data173->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 838)									 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 838)									data174->oPos = (data174->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 838)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 838)						 ::openfl::_internal::renderer::DrawCommandReader this6 = data;
HXDLIN( 838)						 ::openfl::_internal::renderer::DrawCommandReader c30 = this6;
HXLINE( 839)						Float c31 = c30->buffer->f->__get(c30->fPos);
HXDLIN( 839)						::Array< Float > c32 = c30->buffer->f;
HXDLIN( 839)						Float c33 = c32->__get((c30->fPos + (int)1));
HXDLIN( 839)						::Array< Float > c34 = c30->buffer->f;
HXDLIN( 839)						path->_hx___drawCircle(c31,c33,c34->__get((c30->fPos + (int)2)));
            					}
            					break;
            					case (int)6: {
HXLINE( 843)						{
HXLINE( 843)							 ::openfl::_internal::renderer::DrawCommandType _g8 = data->prev;
HXDLIN( 843)							switch((int)(_hx_getEnumValueIndex(_g8))){
            								case (int)0: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 843)									data175->oPos = (data175->oPos + (int)2);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 843)									data176->bPos = (data176->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 843)									data177->iPos = (data177->iPos + (int)1);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 843)									data178->fPos = (data178->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 843)									data179->oPos = (data179->oPos + (int)4);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 843)									data180->iiPos = (data180->iiPos + (int)2);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 843)									data181->ffPos = (data181->ffPos + (int)1);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 843)									data182->fPos = (data182->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 843)									data183->fPos = (data183->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 843)									data184->fPos = (data184->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 843)									data185->fPos = (data185->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 843)									data186->fPos = (data186->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 843)									data187->fPos = (data187->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 843)									data188->fPos = (data188->fPos + (int)5);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 843)									data189->oPos = (data189->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 843)									data190->oPos = (data190->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 843)									data191->oPos = (data191->oPos + (int)2);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 843)									data192->bPos = (data192->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN( 843)									data193->oPos = (data193->oPos + (int)4);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN( 843)									data194->iiPos = (data194->iiPos + (int)2);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN( 843)									data195->ffPos = (data195->ffPos + (int)1);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN( 843)									data196->fPos = (data196->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN( 843)									data197->oPos = (data197->oPos + (int)4);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN( 843)									data198->iPos = (data198->iPos + (int)1);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN( 843)									data199->fPos = (data199->fPos + (int)2);
HXDLIN( 843)									 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN( 843)									data200->bPos = (data200->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN( 843)									data201->fPos = (data201->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN( 843)									data202->fPos = (data202->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 843)									 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN( 843)									data203->oPos = (data203->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 843)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 843)						 ::openfl::_internal::renderer::DrawCommandReader this7 = data;
HXDLIN( 843)						 ::openfl::_internal::renderer::DrawCommandReader c35 = this7;
HXLINE( 844)						Float c36 = c35->buffer->f->__get(c35->fPos);
HXDLIN( 844)						::Array< Float > c37 = c35->buffer->f;
HXDLIN( 844)						Float c38 = c37->__get((c35->fPos + (int)1));
HXDLIN( 844)						::Array< Float > c39 = c35->buffer->f;
HXDLIN( 844)						Float c40 = c39->__get((c35->fPos + (int)2));
HXDLIN( 844)						::Array< Float > c41 = c35->buffer->f;
HXDLIN( 844)						path->_hx___drawEllipse(c36,c38,c40,c41->__get((c35->fPos + (int)3)));
            					}
            					break;
            					case (int)7: {
HXLINE( 848)						{
HXLINE( 848)							 ::openfl::_internal::renderer::DrawCommandType _g9 = data->prev;
HXDLIN( 848)							switch((int)(_hx_getEnumValueIndex(_g9))){
            								case (int)0: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN( 848)									data204->oPos = (data204->oPos + (int)2);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN( 848)									data205->bPos = (data205->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN( 848)									data206->iPos = (data206->iPos + (int)1);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN( 848)									data207->fPos = (data207->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN( 848)									data208->oPos = (data208->oPos + (int)4);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN( 848)									data209->iiPos = (data209->iiPos + (int)2);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN( 848)									data210->ffPos = (data210->ffPos + (int)1);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN( 848)									data211->fPos = (data211->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN( 848)									data212->fPos = (data212->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN( 848)									data213->fPos = (data213->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN( 848)									data214->fPos = (data214->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN( 848)									data215->fPos = (data215->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN( 848)									data216->fPos = (data216->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN( 848)									data217->fPos = (data217->fPos + (int)5);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN( 848)									data218->oPos = (data218->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN( 848)									data219->oPos = (data219->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN( 848)									data220->oPos = (data220->oPos + (int)2);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN( 848)									data221->bPos = (data221->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN( 848)									data222->oPos = (data222->oPos + (int)4);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN( 848)									data223->iiPos = (data223->iiPos + (int)2);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN( 848)									data224->ffPos = (data224->ffPos + (int)1);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN( 848)									data225->fPos = (data225->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN( 848)									data226->oPos = (data226->oPos + (int)4);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN( 848)									data227->iPos = (data227->iPos + (int)1);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN( 848)									data228->fPos = (data228->fPos + (int)2);
HXDLIN( 848)									 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN( 848)									data229->bPos = (data229->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN( 848)									data230->fPos = (data230->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN( 848)									data231->fPos = (data231->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 848)									 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN( 848)									data232->oPos = (data232->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 848)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 848)						 ::openfl::_internal::renderer::DrawCommandReader this8 = data;
HXDLIN( 848)						 ::openfl::_internal::renderer::DrawCommandReader c42 = this8;
HXLINE( 849)						Float c43 = c42->buffer->f->__get(c42->fPos);
HXDLIN( 849)						::Array< Float > c44 = c42->buffer->f;
HXDLIN( 849)						Float c45 = c44->__get((c42->fPos + (int)1));
HXDLIN( 849)						::Array< Float > c46 = c42->buffer->f;
HXDLIN( 849)						Float c47 = c46->__get((c42->fPos + (int)2));
HXDLIN( 849)						::Array< Float > c48 = c42->buffer->f;
HXDLIN( 849)						path->_hx___drawRect(c43,c45,c47,c48->__get((c42->fPos + (int)3)));
            					}
            					break;
            					case (int)8: {
HXLINE( 853)						{
HXLINE( 853)							 ::openfl::_internal::renderer::DrawCommandType _g10 = data->prev;
HXDLIN( 853)							switch((int)(_hx_getEnumValueIndex(_g10))){
            								case (int)0: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN( 853)									data233->oPos = (data233->oPos + (int)2);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN( 853)									data234->bPos = (data234->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN( 853)									data235->iPos = (data235->iPos + (int)1);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN( 853)									data236->fPos = (data236->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN( 853)									data237->oPos = (data237->oPos + (int)4);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN( 853)									data238->iiPos = (data238->iiPos + (int)2);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN( 853)									data239->ffPos = (data239->ffPos + (int)1);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN( 853)									data240->fPos = (data240->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN( 853)									data241->fPos = (data241->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN( 853)									data242->fPos = (data242->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN( 853)									data243->fPos = (data243->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN( 853)									data244->fPos = (data244->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN( 853)									data245->fPos = (data245->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN( 853)									data246->fPos = (data246->fPos + (int)5);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN( 853)									data247->oPos = (data247->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN( 853)									data248->oPos = (data248->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN( 853)									data249->oPos = (data249->oPos + (int)2);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN( 853)									data250->bPos = (data250->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN( 853)									data251->oPos = (data251->oPos + (int)4);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN( 853)									data252->iiPos = (data252->iiPos + (int)2);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN( 853)									data253->ffPos = (data253->ffPos + (int)1);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN( 853)									data254->fPos = (data254->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN( 853)									data255->oPos = (data255->oPos + (int)4);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN( 853)									data256->iPos = (data256->iPos + (int)1);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN( 853)									data257->fPos = (data257->fPos + (int)2);
HXDLIN( 853)									 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN( 853)									data258->bPos = (data258->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN( 853)									data259->fPos = (data259->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN( 853)									data260->fPos = (data260->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 853)									 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN( 853)									data261->oPos = (data261->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 853)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 853)						 ::openfl::_internal::renderer::DrawCommandReader this9 = data;
HXDLIN( 853)						 ::openfl::_internal::renderer::DrawCommandReader c49 = this9;
HXLINE( 854)						Float c50 = c49->buffer->f->__get(c49->fPos);
HXDLIN( 854)						::Array< Float > c51 = c49->buffer->f;
HXDLIN( 854)						Float c52 = c51->__get((c49->fPos + (int)1));
HXDLIN( 854)						::Array< Float > c53 = c49->buffer->f;
HXDLIN( 854)						Float c54 = c53->__get((c49->fPos + (int)2));
HXDLIN( 854)						::Array< Float > c55 = c49->buffer->f;
HXDLIN( 854)						Float c56 = c55->__get((c49->fPos + (int)3));
HXDLIN( 854)						::Array< Float > c57 = c49->buffer->f;
HXDLIN( 854)						Float _hx_tmp;
HXDLIN( 854)						if (hx::IsNotNull( c49->buffer->o->__get(c49->oPos) )) {
HXLINE( 854)							_hx_tmp = ( (Float)(c49->buffer->o->__get(c49->oPos)) );
            						}
            						else {
HXLINE( 854)							::Array< Float > c58 = c49->buffer->f;
HXDLIN( 854)							_hx_tmp = c58->__get((c49->fPos + (int)4));
            						}
HXDLIN( 854)						path->_hx___drawRoundRect(c50,c52,c54,c56,c57->__get((c49->fPos + (int)4)),_hx_tmp);
            					}
            					break;
            					case (int)11: {
HXLINE( 884)						{
HXLINE( 884)							{
HXLINE( 884)								 ::openfl::_internal::renderer::DrawCommandType _g11 = data->prev;
HXDLIN( 884)								switch((int)(_hx_getEnumValueIndex(_g11))){
            									case (int)0: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN( 884)										data262->oPos = (data262->oPos + (int)2);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN( 884)										data263->bPos = (data263->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN( 884)										data264->iPos = (data264->iPos + (int)1);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN( 884)										data265->fPos = (data265->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN( 884)										data266->oPos = (data266->oPos + (int)4);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN( 884)										data267->iiPos = (data267->iiPos + (int)2);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN( 884)										data268->ffPos = (data268->ffPos + (int)1);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN( 884)										data269->fPos = (data269->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN( 884)										data270->fPos = (data270->fPos + (int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN( 884)										data271->fPos = (data271->fPos + (int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN( 884)										data272->fPos = (data272->fPos + (int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN( 884)										data273->fPos = (data273->fPos + (int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN( 884)										data274->fPos = (data274->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN( 884)										data275->fPos = (data275->fPos + (int)5);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN( 884)										data276->oPos = (data276->oPos + (int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN( 884)										data277->oPos = (data277->oPos + (int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN( 884)										data278->oPos = (data278->oPos + (int)2);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN( 884)										data279->bPos = (data279->bPos + (int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data280 = data;
HXDLIN( 884)										data280->oPos = (data280->oPos + (int)4);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data281 = data;
HXDLIN( 884)										data281->iiPos = (data281->iiPos + (int)2);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data282 = data;
HXDLIN( 884)										data282->ffPos = (data282->ffPos + (int)1);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data283 = data;
HXDLIN( 884)										data283->fPos = (data283->fPos + (int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data284 = data;
HXDLIN( 884)										data284->oPos = (data284->oPos + (int)4);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data285 = data;
HXDLIN( 884)										data285->iPos = (data285->iPos + (int)1);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data286 = data;
HXDLIN( 884)										data286->fPos = (data286->fPos + (int)2);
HXDLIN( 884)										 ::openfl::_internal::renderer::DrawCommandReader data287 = data;
HXDLIN( 884)										data287->bPos = (data287->bPos + (int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data288 = data;
HXDLIN( 884)										data288->fPos = (data288->fPos + (int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data289 = data;
HXDLIN( 884)										data289->fPos = (data289->fPos + (int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 884)										 ::openfl::_internal::renderer::DrawCommandReader data290 = data;
HXDLIN( 884)										data290->oPos = (data290->oPos + (int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 884)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN( 884)							 ::openfl::_internal::renderer::DrawCommandReader this10 = data;
            						}
HXLINE( 885)						graphicsData->push( ::openfl::display::GraphicsEndFill_obj::__alloc( HX_CTX ));
            					}
            					break;
            					case (int)12: {
HXLINE( 869)						{
HXLINE( 869)							 ::openfl::_internal::renderer::DrawCommandType _g12 = data->prev;
HXDLIN( 869)							switch((int)(_hx_getEnumValueIndex(_g12))){
            								case (int)0: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data291 = data;
HXDLIN( 869)									data291->oPos = (data291->oPos + (int)2);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data292 = data;
HXDLIN( 869)									data292->bPos = (data292->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data293 = data;
HXDLIN( 869)									data293->iPos = (data293->iPos + (int)1);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data294 = data;
HXDLIN( 869)									data294->fPos = (data294->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data295 = data;
HXDLIN( 869)									data295->oPos = (data295->oPos + (int)4);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data296 = data;
HXDLIN( 869)									data296->iiPos = (data296->iiPos + (int)2);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data297 = data;
HXDLIN( 869)									data297->ffPos = (data297->ffPos + (int)1);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data298 = data;
HXDLIN( 869)									data298->fPos = (data298->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data299 = data;
HXDLIN( 869)									data299->fPos = (data299->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data300 = data;
HXDLIN( 869)									data300->fPos = (data300->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data301 = data;
HXDLIN( 869)									data301->fPos = (data301->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data302 = data;
HXDLIN( 869)									data302->fPos = (data302->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data303 = data;
HXDLIN( 869)									data303->fPos = (data303->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data304 = data;
HXDLIN( 869)									data304->fPos = (data304->fPos + (int)5);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data305 = data;
HXDLIN( 869)									data305->oPos = (data305->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data306 = data;
HXDLIN( 869)									data306->oPos = (data306->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data307 = data;
HXDLIN( 869)									data307->oPos = (data307->oPos + (int)2);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data308 = data;
HXDLIN( 869)									data308->bPos = (data308->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data309 = data;
HXDLIN( 869)									data309->oPos = (data309->oPos + (int)4);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data310 = data;
HXDLIN( 869)									data310->iiPos = (data310->iiPos + (int)2);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data311 = data;
HXDLIN( 869)									data311->ffPos = (data311->ffPos + (int)1);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data312 = data;
HXDLIN( 869)									data312->fPos = (data312->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data313 = data;
HXDLIN( 869)									data313->oPos = (data313->oPos + (int)4);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data314 = data;
HXDLIN( 869)									data314->iPos = (data314->iPos + (int)1);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data315 = data;
HXDLIN( 869)									data315->fPos = (data315->fPos + (int)2);
HXDLIN( 869)									 ::openfl::_internal::renderer::DrawCommandReader data316 = data;
HXDLIN( 869)									data316->bPos = (data316->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data317 = data;
HXDLIN( 869)									data317->fPos = (data317->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data318 = data;
HXDLIN( 869)									data318->fPos = (data318->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 869)									 ::openfl::_internal::renderer::DrawCommandReader data319 = data;
HXDLIN( 869)									data319->oPos = (data319->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 869)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 869)						 ::openfl::_internal::renderer::DrawCommandReader this11 = data;
HXDLIN( 869)						 ::openfl::_internal::renderer::DrawCommandReader c59 = this11;
HXLINE( 870)						path = null();
            					}
            					break;
            					case (int)13: {
HXLINE( 860)						{
HXLINE( 860)							 ::openfl::_internal::renderer::DrawCommandType _g13 = data->prev;
HXDLIN( 860)							switch((int)(_hx_getEnumValueIndex(_g13))){
            								case (int)0: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data320 = data;
HXDLIN( 860)									data320->oPos = (data320->oPos + (int)2);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data321 = data;
HXDLIN( 860)									data321->bPos = (data321->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data322 = data;
HXDLIN( 860)									data322->iPos = (data322->iPos + (int)1);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data323 = data;
HXDLIN( 860)									data323->fPos = (data323->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data324 = data;
HXDLIN( 860)									data324->oPos = (data324->oPos + (int)4);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data325 = data;
HXDLIN( 860)									data325->iiPos = (data325->iiPos + (int)2);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data326 = data;
HXDLIN( 860)									data326->ffPos = (data326->ffPos + (int)1);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data327 = data;
HXDLIN( 860)									data327->fPos = (data327->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data328 = data;
HXDLIN( 860)									data328->fPos = (data328->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data329 = data;
HXDLIN( 860)									data329->fPos = (data329->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data330 = data;
HXDLIN( 860)									data330->fPos = (data330->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data331 = data;
HXDLIN( 860)									data331->fPos = (data331->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data332 = data;
HXDLIN( 860)									data332->fPos = (data332->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data333 = data;
HXDLIN( 860)									data333->fPos = (data333->fPos + (int)5);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data334 = data;
HXDLIN( 860)									data334->oPos = (data334->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data335 = data;
HXDLIN( 860)									data335->oPos = (data335->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data336 = data;
HXDLIN( 860)									data336->oPos = (data336->oPos + (int)2);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data337 = data;
HXDLIN( 860)									data337->bPos = (data337->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data338 = data;
HXDLIN( 860)									data338->oPos = (data338->oPos + (int)4);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data339 = data;
HXDLIN( 860)									data339->iiPos = (data339->iiPos + (int)2);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data340 = data;
HXDLIN( 860)									data340->ffPos = (data340->ffPos + (int)1);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data341 = data;
HXDLIN( 860)									data341->fPos = (data341->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data342 = data;
HXDLIN( 860)									data342->oPos = (data342->oPos + (int)4);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data343 = data;
HXDLIN( 860)									data343->iPos = (data343->iPos + (int)1);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data344 = data;
HXDLIN( 860)									data344->fPos = (data344->fPos + (int)2);
HXDLIN( 860)									 ::openfl::_internal::renderer::DrawCommandReader data345 = data;
HXDLIN( 860)									data345->bPos = (data345->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data346 = data;
HXDLIN( 860)									data346->fPos = (data346->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data347 = data;
HXDLIN( 860)									data347->fPos = (data347->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 860)									 ::openfl::_internal::renderer::DrawCommandReader data348 = data;
HXDLIN( 860)									data348->oPos = (data348->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 860)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 860)						 ::openfl::_internal::renderer::DrawCommandReader this12 = data;
HXDLIN( 860)						 ::openfl::_internal::renderer::DrawCommandReader c60 = this12;
            					}
            					break;
            					case (int)14: {
HXLINE( 877)						{
HXLINE( 877)							 ::openfl::_internal::renderer::DrawCommandType _g14 = data->prev;
HXDLIN( 877)							switch((int)(_hx_getEnumValueIndex(_g14))){
            								case (int)0: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data349 = data;
HXDLIN( 877)									data349->oPos = (data349->oPos + (int)2);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data350 = data;
HXDLIN( 877)									data350->bPos = (data350->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data351 = data;
HXDLIN( 877)									data351->iPos = (data351->iPos + (int)1);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data352 = data;
HXDLIN( 877)									data352->fPos = (data352->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data353 = data;
HXDLIN( 877)									data353->oPos = (data353->oPos + (int)4);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data354 = data;
HXDLIN( 877)									data354->iiPos = (data354->iiPos + (int)2);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data355 = data;
HXDLIN( 877)									data355->ffPos = (data355->ffPos + (int)1);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data356 = data;
HXDLIN( 877)									data356->fPos = (data356->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data357 = data;
HXDLIN( 877)									data357->fPos = (data357->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data358 = data;
HXDLIN( 877)									data358->fPos = (data358->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data359 = data;
HXDLIN( 877)									data359->fPos = (data359->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data360 = data;
HXDLIN( 877)									data360->fPos = (data360->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data361 = data;
HXDLIN( 877)									data361->fPos = (data361->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data362 = data;
HXDLIN( 877)									data362->fPos = (data362->fPos + (int)5);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data363 = data;
HXDLIN( 877)									data363->oPos = (data363->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data364 = data;
HXDLIN( 877)									data364->oPos = (data364->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data365 = data;
HXDLIN( 877)									data365->oPos = (data365->oPos + (int)2);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data366 = data;
HXDLIN( 877)									data366->bPos = (data366->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data367 = data;
HXDLIN( 877)									data367->oPos = (data367->oPos + (int)4);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data368 = data;
HXDLIN( 877)									data368->iiPos = (data368->iiPos + (int)2);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data369 = data;
HXDLIN( 877)									data369->ffPos = (data369->ffPos + (int)1);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data370 = data;
HXDLIN( 877)									data370->fPos = (data370->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data371 = data;
HXDLIN( 877)									data371->oPos = (data371->oPos + (int)4);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data372 = data;
HXDLIN( 877)									data372->iPos = (data372->iPos + (int)1);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data373 = data;
HXDLIN( 877)									data373->fPos = (data373->fPos + (int)2);
HXDLIN( 877)									 ::openfl::_internal::renderer::DrawCommandReader data374 = data;
HXDLIN( 877)									data374->bPos = (data374->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data375 = data;
HXDLIN( 877)									data375->fPos = (data375->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data376 = data;
HXDLIN( 877)									data376->fPos = (data376->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 877)									 ::openfl::_internal::renderer::DrawCommandReader data377 = data;
HXDLIN( 877)									data377->oPos = (data377->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 877)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 877)						 ::openfl::_internal::renderer::DrawCommandReader this13 = data;
HXDLIN( 877)						 ::openfl::_internal::renderer::DrawCommandReader c61 = this13;
HXLINE( 878)						::cpp::VirtualArray c62 = c61->buffer->o;
HXDLIN( 878)						::cpp::VirtualArray c63 = c61->buffer->o;
HXDLIN( 878)						::cpp::VirtualArray c64 = c61->buffer->o;
HXDLIN( 878)						::Array< Float > c65 = c61->buffer->f;
HXDLIN( 878)						stroke =  ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,c61->buffer->o->__get(c61->oPos),c61->buffer->b->__get(c61->bPos),c62->__get((c61->oPos + (int)1)),c63->__get((c61->oPos + (int)2)),c64->__get((c61->oPos + (int)3)),c65->__get((c61->fPos + (int)1)),null());
HXLINE( 879)						stroke->fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c61->buffer->i->__get(c61->iPos),c61->buffer->f->__get(c61->fPos));
HXLINE( 880)						graphicsData->push(stroke);
            					}
            					break;
            					case (int)15: {
HXLINE( 828)						{
HXLINE( 828)							 ::openfl::_internal::renderer::DrawCommandType _g15 = data->prev;
HXDLIN( 828)							switch((int)(_hx_getEnumValueIndex(_g15))){
            								case (int)0: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data378 = data;
HXDLIN( 828)									data378->oPos = (data378->oPos + (int)2);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data379 = data;
HXDLIN( 828)									data379->bPos = (data379->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data380 = data;
HXDLIN( 828)									data380->iPos = (data380->iPos + (int)1);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data381 = data;
HXDLIN( 828)									data381->fPos = (data381->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data382 = data;
HXDLIN( 828)									data382->oPos = (data382->oPos + (int)4);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data383 = data;
HXDLIN( 828)									data383->iiPos = (data383->iiPos + (int)2);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data384 = data;
HXDLIN( 828)									data384->ffPos = (data384->ffPos + (int)1);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data385 = data;
HXDLIN( 828)									data385->fPos = (data385->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data386 = data;
HXDLIN( 828)									data386->fPos = (data386->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data387 = data;
HXDLIN( 828)									data387->fPos = (data387->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data388 = data;
HXDLIN( 828)									data388->fPos = (data388->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data389 = data;
HXDLIN( 828)									data389->fPos = (data389->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data390 = data;
HXDLIN( 828)									data390->fPos = (data390->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data391 = data;
HXDLIN( 828)									data391->fPos = (data391->fPos + (int)5);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data392 = data;
HXDLIN( 828)									data392->oPos = (data392->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data393 = data;
HXDLIN( 828)									data393->oPos = (data393->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data394 = data;
HXDLIN( 828)									data394->oPos = (data394->oPos + (int)2);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data395 = data;
HXDLIN( 828)									data395->bPos = (data395->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data396 = data;
HXDLIN( 828)									data396->oPos = (data396->oPos + (int)4);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data397 = data;
HXDLIN( 828)									data397->iiPos = (data397->iiPos + (int)2);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data398 = data;
HXDLIN( 828)									data398->ffPos = (data398->ffPos + (int)1);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data399 = data;
HXDLIN( 828)									data399->fPos = (data399->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data400 = data;
HXDLIN( 828)									data400->oPos = (data400->oPos + (int)4);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data401 = data;
HXDLIN( 828)									data401->iPos = (data401->iPos + (int)1);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data402 = data;
HXDLIN( 828)									data402->fPos = (data402->fPos + (int)2);
HXDLIN( 828)									 ::openfl::_internal::renderer::DrawCommandReader data403 = data;
HXDLIN( 828)									data403->bPos = (data403->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data404 = data;
HXDLIN( 828)									data404->fPos = (data404->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data405 = data;
HXDLIN( 828)									data405->fPos = (data405->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 828)									 ::openfl::_internal::renderer::DrawCommandReader data406 = data;
HXDLIN( 828)									data406->oPos = (data406->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 828)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 828)						 ::openfl::_internal::renderer::DrawCommandReader this14 = data;
HXDLIN( 828)						 ::openfl::_internal::renderer::DrawCommandReader c66 = this14;
HXLINE( 829)						Float c67 = c66->buffer->f->__get(c66->fPos);
HXDLIN( 829)						::Array< Float > c68 = c66->buffer->f;
HXDLIN( 829)						path->lineTo(c67,c68->__get((c66->fPos + (int)1)));
            					}
            					break;
            					case (int)16: {
HXLINE( 833)						{
HXLINE( 833)							 ::openfl::_internal::renderer::DrawCommandType _g16 = data->prev;
HXDLIN( 833)							switch((int)(_hx_getEnumValueIndex(_g16))){
            								case (int)0: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data407 = data;
HXDLIN( 833)									data407->oPos = (data407->oPos + (int)2);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data408 = data;
HXDLIN( 833)									data408->bPos = (data408->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data409 = data;
HXDLIN( 833)									data409->iPos = (data409->iPos + (int)1);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data410 = data;
HXDLIN( 833)									data410->fPos = (data410->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data411 = data;
HXDLIN( 833)									data411->oPos = (data411->oPos + (int)4);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data412 = data;
HXDLIN( 833)									data412->iiPos = (data412->iiPos + (int)2);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data413 = data;
HXDLIN( 833)									data413->ffPos = (data413->ffPos + (int)1);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data414 = data;
HXDLIN( 833)									data414->fPos = (data414->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data415 = data;
HXDLIN( 833)									data415->fPos = (data415->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data416 = data;
HXDLIN( 833)									data416->fPos = (data416->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data417 = data;
HXDLIN( 833)									data417->fPos = (data417->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data418 = data;
HXDLIN( 833)									data418->fPos = (data418->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data419 = data;
HXDLIN( 833)									data419->fPos = (data419->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data420 = data;
HXDLIN( 833)									data420->fPos = (data420->fPos + (int)5);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data421 = data;
HXDLIN( 833)									data421->oPos = (data421->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data422 = data;
HXDLIN( 833)									data422->oPos = (data422->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data423 = data;
HXDLIN( 833)									data423->oPos = (data423->oPos + (int)2);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data424 = data;
HXDLIN( 833)									data424->bPos = (data424->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data425 = data;
HXDLIN( 833)									data425->oPos = (data425->oPos + (int)4);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data426 = data;
HXDLIN( 833)									data426->iiPos = (data426->iiPos + (int)2);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data427 = data;
HXDLIN( 833)									data427->ffPos = (data427->ffPos + (int)1);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data428 = data;
HXDLIN( 833)									data428->fPos = (data428->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data429 = data;
HXDLIN( 833)									data429->oPos = (data429->oPos + (int)4);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data430 = data;
HXDLIN( 833)									data430->iPos = (data430->iPos + (int)1);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data431 = data;
HXDLIN( 833)									data431->fPos = (data431->fPos + (int)2);
HXDLIN( 833)									 ::openfl::_internal::renderer::DrawCommandReader data432 = data;
HXDLIN( 833)									data432->bPos = (data432->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data433 = data;
HXDLIN( 833)									data433->fPos = (data433->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data434 = data;
HXDLIN( 833)									data434->fPos = (data434->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 833)									 ::openfl::_internal::renderer::DrawCommandReader data435 = data;
HXDLIN( 833)									data435->oPos = (data435->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 833)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 833)						 ::openfl::_internal::renderer::DrawCommandReader this15 = data;
HXDLIN( 833)						 ::openfl::_internal::renderer::DrawCommandReader c69 = this15;
HXLINE( 834)						Float c70 = c69->buffer->f->__get(c69->fPos);
HXDLIN( 834)						::Array< Float > c71 = c69->buffer->f;
HXDLIN( 834)						path->moveTo(c70,c71->__get((c69->fPos + (int)1)));
            					}
            					break;
            					default:{
HXLINE( 905)						{
HXLINE( 905)							 ::openfl::_internal::renderer::DrawCommandType _g17 = data->prev;
HXDLIN( 905)							switch((int)(_hx_getEnumValueIndex(_g17))){
            								case (int)0: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data436 = data;
HXDLIN( 905)									data436->oPos = (data436->oPos + (int)2);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data437 = data;
HXDLIN( 905)									data437->bPos = (data437->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data438 = data;
HXDLIN( 905)									data438->iPos = (data438->iPos + (int)1);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data439 = data;
HXDLIN( 905)									data439->fPos = (data439->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data440 = data;
HXDLIN( 905)									data440->oPos = (data440->oPos + (int)4);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data441 = data;
HXDLIN( 905)									data441->iiPos = (data441->iiPos + (int)2);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data442 = data;
HXDLIN( 905)									data442->ffPos = (data442->ffPos + (int)1);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data443 = data;
HXDLIN( 905)									data443->fPos = (data443->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data444 = data;
HXDLIN( 905)									data444->fPos = (data444->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data445 = data;
HXDLIN( 905)									data445->fPos = (data445->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data446 = data;
HXDLIN( 905)									data446->fPos = (data446->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data447 = data;
HXDLIN( 905)									data447->fPos = (data447->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data448 = data;
HXDLIN( 905)									data448->fPos = (data448->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data449 = data;
HXDLIN( 905)									data449->fPos = (data449->fPos + (int)5);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data450 = data;
HXDLIN( 905)									data450->oPos = (data450->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data451 = data;
HXDLIN( 905)									data451->oPos = (data451->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data452 = data;
HXDLIN( 905)									data452->oPos = (data452->oPos + (int)2);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data453 = data;
HXDLIN( 905)									data453->bPos = (data453->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data454 = data;
HXDLIN( 905)									data454->oPos = (data454->oPos + (int)4);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data455 = data;
HXDLIN( 905)									data455->iiPos = (data455->iiPos + (int)2);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data456 = data;
HXDLIN( 905)									data456->ffPos = (data456->ffPos + (int)1);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data457 = data;
HXDLIN( 905)									data457->fPos = (data457->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data458 = data;
HXDLIN( 905)									data458->oPos = (data458->oPos + (int)4);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data459 = data;
HXDLIN( 905)									data459->iPos = (data459->iPos + (int)1);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data460 = data;
HXDLIN( 905)									data460->fPos = (data460->fPos + (int)2);
HXDLIN( 905)									 ::openfl::_internal::renderer::DrawCommandReader data461 = data;
HXDLIN( 905)									data461->bPos = (data461->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data462 = data;
HXDLIN( 905)									data462->fPos = (data462->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data463 = data;
HXDLIN( 905)									data463->fPos = (data463->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 905)									 ::openfl::_internal::renderer::DrawCommandReader data464 = data;
HXDLIN( 905)									data464->oPos = (data464->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 905)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE( 911)		if (hx::IsNotNull( path )) {
HXLINE( 913)			graphicsData->push(path);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___readGraphicsData,(void))

void Graphics_obj::_hx___update(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_920___update)
HXLINE( 922)		bool _hx_tmp;
HXDLIN( 922)		bool _hx_tmp1;
HXDLIN( 922)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 922)			_hx_tmp1 = (this->_hx___bounds->width <= (int)0);
            		}
            		else {
HXLINE( 922)			_hx_tmp1 = true;
            		}
HXDLIN( 922)		if (!(_hx_tmp1)) {
HXLINE( 922)			_hx_tmp = (this->_hx___bounds->height <= (int)0);
            		}
            		else {
HXLINE( 922)			_hx_tmp = true;
            		}
HXDLIN( 922)		if (_hx_tmp) {
HXLINE( 922)			return;
            		}
HXLINE( 924)		 ::openfl::geom::Matrix parentTransform = this->_hx___owner->_hx___renderTransform;
HXLINE( 925)		Float scaleX = ((Float)1.0);
HXDLIN( 925)		Float scaleY = ((Float)1.0);
HXLINE( 927)		if (hx::IsNotNull( parentTransform )) {
HXLINE( 929)			if ((parentTransform->b == (int)0)) {
HXLINE( 931)				scaleX = ::Math_obj::abs(parentTransform->a);
            			}
            			else {
HXLINE( 935)				Float scaleX1 = (parentTransform->a * parentTransform->a);
HXDLIN( 935)				scaleX = ::Math_obj::sqrt((scaleX1 + (parentTransform->b * parentTransform->b)));
            			}
HXLINE( 939)			if ((parentTransform->c == (int)0)) {
HXLINE( 941)				scaleY = ::Math_obj::abs(parentTransform->d);
            			}
            			else {
HXLINE( 945)				Float scaleY1 = (parentTransform->c * parentTransform->c);
HXDLIN( 945)				scaleY = ::Math_obj::sqrt((scaleY1 + (parentTransform->d * parentTransform->d)));
            			}
            		}
            		else {
HXLINE( 951)			return;
            		}
HXLINE( 960)		Float width = (this->_hx___bounds->width * scaleX);
HXLINE( 961)		Float height = (this->_hx___bounds->height * scaleY);
HXLINE( 963)		bool _hx_tmp2;
HXDLIN( 963)		if (!((width < (int)1))) {
HXLINE( 963)			_hx_tmp2 = (height < (int)1);
            		}
            		else {
HXLINE( 963)			_hx_tmp2 = true;
            		}
HXDLIN( 963)		if (_hx_tmp2) {
HXLINE( 965)			bool _hx_tmp3;
HXDLIN( 965)			if ((this->_hx___width < (int)1)) {
HXLINE( 965)				_hx_tmp3 = (this->_hx___height >= (int)1);
            			}
            			else {
HXLINE( 965)				_hx_tmp3 = true;
            			}
HXDLIN( 965)			if (_hx_tmp3) {
HXLINE( 965)				this->set___dirty(true);
            			}
HXLINE( 966)			this->_hx___width = (int)0;
HXLINE( 967)			this->_hx___height = (int)0;
HXLINE( 968)			return;
            		}
HXLINE( 972)		this->_hx___renderTransform->a = ((Float)width / (Float)this->_hx___bounds->width);
HXLINE( 973)		this->_hx___renderTransform->d = ((Float)height / (Float)this->_hx___bounds->height);
HXLINE( 974)		Float inverseA = ((Float)(int)1 / (Float)this->_hx___renderTransform->a);
HXLINE( 975)		Float inverseD = ((Float)(int)1 / (Float)this->_hx___renderTransform->d);
HXLINE( 978)		this->_hx___worldTransform->a = (inverseA * parentTransform->a);
HXLINE( 979)		this->_hx___worldTransform->b = (inverseA * parentTransform->b);
HXLINE( 980)		this->_hx___worldTransform->c = (inverseD * parentTransform->c);
HXLINE( 981)		this->_hx___worldTransform->d = (inverseD * parentTransform->d);
HXLINE( 983)		Float x = this->_hx___bounds->x;
HXLINE( 984)		Float y = this->_hx___bounds->y;
HXLINE( 985)		Float tx = (x * parentTransform->a);
HXDLIN( 985)		Float tx1 = ((tx + (y * parentTransform->c)) + parentTransform->tx);
HXLINE( 986)		Float ty = (x * parentTransform->b);
HXDLIN( 986)		Float ty1 = ((ty + (y * parentTransform->d)) + parentTransform->ty);
HXLINE( 989)		this->_hx___worldTransform->tx = ::Math_obj::ffloor(tx1);
HXLINE( 990)		this->_hx___worldTransform->ty = ::Math_obj::ffloor(ty1);
HXLINE( 993)		 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 993)		Float norm = (_this->a * _this->d);
HXDLIN( 993)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 993)		Float _hx_tmp4;
HXDLIN( 993)		if ((norm1 == (int)0)) {
HXLINE( 993)			_hx_tmp4 = -(_this->tx);
            		}
            		else {
HXLINE( 993)			Float _this1 = _this->c;
HXDLIN( 993)			Float _hx_tmp5 = (_this1 * (_this->ty - ty1));
HXDLIN( 993)			Float _this2 = _this->d;
HXDLIN( 993)			_hx_tmp4 = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp5 + (_this2 * (tx1 - _this->tx))));
            		}
HXDLIN( 993)		this->_hx___renderTransform->tx = _hx_tmp4;
HXLINE( 994)		 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN( 994)		Float norm2 = (_this3->a * _this3->d);
HXDLIN( 994)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN( 994)		Float _hx_tmp6;
HXDLIN( 994)		if ((norm3 == (int)0)) {
HXLINE( 994)			_hx_tmp6 = -(_this3->ty);
            		}
            		else {
HXLINE( 994)			Float _this4 = _this3->a;
HXDLIN( 994)			Float _hx_tmp7 = (_this4 * (ty1 - _this3->ty));
HXDLIN( 994)			Float _this5 = _this3->b;
HXDLIN( 994)			_hx_tmp6 = (((Float)((Float)1.0) / (Float)norm3) * (_hx_tmp7 + (_this5 * (_this3->tx - tx1))));
            		}
HXDLIN( 994)		this->_hx___renderTransform->ty = _hx_tmp6;
HXLINE( 997)		int newWidth = ::Math_obj::ceil((width + this->_hx___renderTransform->tx));
HXLINE( 998)		int newHeight = ::Math_obj::ceil((height + this->_hx___renderTransform->ty));
HXLINE(1001)		bool _hx_tmp8;
HXDLIN(1001)		if ((newWidth == this->_hx___width)) {
HXLINE(1001)			_hx_tmp8 = (newHeight != this->_hx___height);
            		}
            		else {
HXLINE(1001)			_hx_tmp8 = true;
            		}
HXDLIN(1001)		if (_hx_tmp8) {
HXLINE(1004)			this->set___dirty(true);
            		}
HXLINE(1009)		this->_hx___width = newWidth;
HXLINE(1010)		this->_hx___height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___update,(void))

bool Graphics_obj::set___dirty(bool value){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1022_set___dirty)
HXLINE(1024)		bool _hx_tmp;
HXDLIN(1024)		if (value) {
HXLINE(1024)			_hx_tmp = hx::IsNotNull( this->_hx___owner );
            		}
            		else {
HXLINE(1024)			_hx_tmp = false;
            		}
HXDLIN(1024)		if (_hx_tmp) {
HXLINE(1026)			 ::openfl::display::DisplayObject _this = this->_hx___owner;
HXDLIN(1026)			if (!(_this->_hx___renderDirty)) {
HXLINE(1026)				_this->_hx___renderDirty = true;
HXDLIN(1026)				_this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1030)		return (this->_hx___dirty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,set___dirty,return )


hx::ObjectPtr< Graphics_obj > Graphics_obj::__new( ::openfl::display::DisplayObject owner) {
	hx::ObjectPtr< Graphics_obj > __this = new Graphics_obj();
	__this->__construct(owner);
	return __this;
}

hx::ObjectPtr< Graphics_obj > Graphics_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject owner) {
	Graphics_obj *__this = (Graphics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics_obj), true, "openfl.display.Graphics"));
	*(void **)__this = Graphics_obj::_hx_vtable;
	__this->__construct(owner);
	return __this;
}

Graphics_obj::Graphics_obj()
{
}

void Graphics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___commands,"__commands");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___managed,"__managed");
	HX_MARK_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_MARK_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___owner,"__owner");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_END_CLASS();
}

void Graphics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___commands,"__commands");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___managed,"__managed");
	HX_VISIT_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_VISIT_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___owner,"__owner");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
}

hx::Val Graphics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		if (HX_FIELD_EQ(inName,"__owner") ) { return hx::Val( _hx___owner); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height); }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"drawPath") ) { return hx::Val( drawPath_dyn()); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { return hx::Val( _hx___managed); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible); }
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { return hx::Val( _hx___commands); }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { return hx::Val( _hx___positionX); }
		if (HX_FIELD_EQ(inName,"__positionY") ) { return hx::Val( _hx___positionY); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"set___dirty") ) { return hx::Val( set___dirty_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { return hx::Val( _hx___strokePadding); }
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"__inflateBounds") ) { return hx::Val( _hx___inflateBounds_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"drawGraphicsData") ) { return hx::Val( drawGraphicsData_dyn()); }
		if (HX_FIELD_EQ(inName,"readGraphicsData") ) { return hx::Val( readGraphicsData_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform); }
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"drawRoundRectComplex") ) { return hx::Val( drawRoundRectComplex_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__calculateBezierQuadPoint") ) { return hx::Val( _hx___calculateBezierQuadPoint_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__calculateBezierCubicPoint") ) { return hx::Val( _hx___calculateBezierCubicPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Graphics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___dirty(inValue) );_hx___dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__owner") ) { _hx___owner=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { _hx___managed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { _hx___commands=inValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { _hx___positionX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionY") ) { _hx___positionY=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { _hx___strokePadding=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Graphics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"));
	outFields->push(HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Graphics_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(int)offsetof(Graphics_obj,_hx___commands),HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___managed),HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionX),HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionY),HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___strokePadding),HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Graphics_obj,_hx___owner),HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(Graphics_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Graphics_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Graphics_obj_sStaticStorageInfo = 0;
#endif

static ::String Graphics_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"),
	HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawGraphicsData","\xb9","\xaa","\x6e","\x60"),
	HX_HCSTRING("drawPath","\xc9","\x8f","\xbb","\x5e"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawRoundRectComplex","\xe2","\x43","\x2c","\x11"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("readGraphicsData","\x0b","\x7d","\x00","\x87"),
	HX_HCSTRING("__calculateBezierCubicPoint","\x0b","\xc2","\xaf","\xf4"),
	HX_HCSTRING("__calculateBezierQuadPoint","\x44","\x46","\xe8","\x5e"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__inflateBounds","\x3c","\x6f","\xee","\xb6"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("set___dirty","\x15","\x10","\x96","\xd4"),
	::String(null()) };

static void Graphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#endif

hx::Class Graphics_obj::__mClass;

void Graphics_obj::__register()
{
	hx::Object *dummy = new Graphics_obj;
	Graphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Graphics","\x35","\x67","\x20","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Graphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
