// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Point
#include <lime/utils/ObjectPool_openfl_geom_Point.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractFilterManager
#include <openfl/_internal/renderer/AbstractFilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_40_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",40,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_55_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",55,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_60_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",60,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_130_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",130,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_135_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",135,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_148_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",148,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_161_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",161,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_175_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",175,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_188_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",188,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_198_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",198,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_235_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",235,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_248_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",248,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_283_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",283,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_304_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",304,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_316_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",316,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_323_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",323,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_338_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",338,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_349___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",349,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_374___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",374,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_383___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",383,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_413___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",413,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_452___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",452,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_548___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",548,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_567___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",567,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_584___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",584,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_634___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",634,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_653___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",653,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_705___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",705,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_728___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",728,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_778___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",778,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_828___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",828,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_847___setTransformDirty,"openfl.display.DisplayObjectContainer","__setTransformDirty",0xfd09a304,"openfl.display.DisplayObjectContainer.__setTransformDirty","openfl/display/DisplayObjectContainer.hx",847,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_868___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",868,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_877___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",877,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_894___updateChildren,"openfl.display.DisplayObjectContainer","__updateChildren",0x0e3ace2c,"openfl.display.DisplayObjectContainer.__updateChildren","openfl/display/DisplayObjectContainer.hx",894,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_916_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",916,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_40_new)
HXLINE(  42)		super::__construct();
HXLINE(  44)		this->mouseChildren = true;
HXLINE(  46)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE(  47)		int length = null();
HXDLIN(  47)		bool fixed = null();
HXDLIN(  47)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE(  48)		int length1 = null();
HXDLIN(  48)		bool fixed1 = null();
HXDLIN(  48)		this->_hx___tempStack =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17120186;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_55_addChild)
HXLINE(  55)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_60_addChildAt)
HXLINE(  62)		if (hx::IsNull( child )) {
HXLINE(  64)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE(  65)			error->errorID = (int)2007;
HXLINE(  66)			HX_STACK_DO_THROW(error);
            		}
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		if ((index <= this->_hx___children->length)) {
HXLINE(  70)			_hx_tmp = (index < (int)0);
            		}
            		else {
HXLINE(  70)			_hx_tmp = true;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  72)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE(  76)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  78)			if (hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE(  80)				this->_hx___children->remove(child);
HXLINE(  81)				this->_hx___children->insert(index,child);
HXLINE(  83)				if (!(this->_hx___renderDirty)) {
HXLINE(  83)					this->_hx___renderDirty = true;
HXDLIN(  83)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE(  89)			if (hx::IsNotNull( child->parent )) {
HXLINE(  91)				child->parent->removeChild(child);
            			}
HXLINE(  95)			this->_hx___children->insert(index,child);
HXLINE(  96)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  98)			bool addedToStage;
HXDLIN(  98)			if (hx::IsNotNull( this->stage )) {
HXLINE(  98)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE(  98)				addedToStage = false;
            			}
HXLINE( 100)			if (addedToStage) {
HXLINE( 102)				this->_hx___setStageReference(this->stage);
            			}
HXLINE( 106)			child->_hx___setTransformDirty();
HXLINE( 107)			if (!(child->_hx___renderDirty)) {
HXLINE( 107)				child->_hx___renderDirty = true;
HXDLIN( 107)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 108)			if (!(this->_hx___renderDirty)) {
HXLINE( 108)				this->_hx___renderDirty = true;
HXDLIN( 108)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 110)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),true,null());
HXLINE( 111)			event->target = child;
HXLINE( 112)			child->_hx___dispatchEvent(event);
HXLINE( 114)			if (addedToStage) {
HXLINE( 116)				child->_hx___dispatchChildren( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false),this->_hx___tempStack);
HXLINE( 117)				this->_hx___tempStack->set_length((int)0);
            			}
            		}
HXLINE( 123)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_130_areInaccessibleObjectsUnderPoint)
HXLINE( 130)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_135_contains)
HXLINE( 137)		while(true){
HXLINE( 137)			bool _hx_tmp;
HXDLIN( 137)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 137)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 137)				_hx_tmp = false;
            			}
HXDLIN( 137)			if (!(_hx_tmp)) {
HXLINE( 137)				goto _hx_goto_4;
            			}
HXLINE( 139)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 143)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_148_getChildAt)
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		if ((index >= (int)0)) {
HXLINE( 150)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 150)			_hx_tmp = false;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 152)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_161_getChildByName)
HXLINE( 163)		{
HXLINE( 163)			int _g = (int)0;
HXDLIN( 163)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 163)				_g = (_g + (int)1);
HXLINE( 165)				if ((child->get_name() == name)) {
HXLINE( 165)					return child;
            				}
            			}
            		}
HXLINE( 169)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_175_getChildIndex)
HXLINE( 177)		{
HXLINE( 177)			int _g1 = (int)0;
HXDLIN( 177)			int _g = this->_hx___children->length;
HXDLIN( 177)			while((_g1 < _g)){
HXLINE( 177)				_g1 = (_g1 + (int)1);
HXDLIN( 177)				int i = (_g1 - (int)1);
HXLINE( 179)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 179)					return i;
            				}
            			}
            		}
HXLINE( 183)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_188_getObjectsUnderPoint)
HXLINE( 190)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 191)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 192)		stack->reverse();
HXLINE( 193)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_198_removeChild)
HXLINE( 200)		bool _hx_tmp;
HXDLIN( 200)		if (hx::IsNotNull( child )) {
HXLINE( 200)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 200)			_hx_tmp = false;
            		}
HXDLIN( 200)		if (_hx_tmp) {
HXLINE( 202)			child->_hx___setTransformDirty();
HXLINE( 203)			if (!(child->_hx___renderDirty)) {
HXLINE( 203)				child->_hx___renderDirty = true;
HXDLIN( 203)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 204)			if (!(this->_hx___renderDirty)) {
HXLINE( 204)				this->_hx___renderDirty = true;
HXDLIN( 204)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 206)			child->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null()));
HXLINE( 208)			if (hx::IsNotNull( this->stage )) {
HXLINE( 210)				bool _hx_tmp1;
HXDLIN( 210)				if (hx::IsNotNull( child->stage )) {
HXLINE( 210)					_hx_tmp1 = hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 210)					_hx_tmp1 = false;
            				}
HXDLIN( 210)				if (_hx_tmp1) {
HXLINE( 212)					this->stage->set_focus(null());
            				}
HXLINE( 216)				child->_hx___dispatchChildren( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false),this->_hx___tempStack);
HXLINE( 217)				this->_hx___tempStack->set_length((int)0);
HXLINE( 219)				child->_hx___setStageReference(null());
            			}
HXLINE( 223)			child->parent = null();
HXLINE( 224)			this->_hx___children->remove(child);
HXLINE( 225)			this->_hx___removedChildren->push(child);
HXLINE( 226)			child->_hx___setTransformDirty();
            		}
HXLINE( 230)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_235_removeChildAt)
HXLINE( 237)		bool _hx_tmp;
HXDLIN( 237)		if ((index >= (int)0)) {
HXLINE( 237)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 237)			_hx_tmp = false;
            		}
HXDLIN( 237)		if (_hx_tmp) {
HXLINE( 239)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 243)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_248_removeChildren)
HXLINE( 250)		if ((endIndex == (int)2147483647)) {
HXLINE( 252)			endIndex = (this->_hx___children->length - (int)1);
HXLINE( 254)			if ((endIndex < (int)0)) {
HXLINE( 256)				return;
            			}
            		}
HXLINE( 262)		if ((beginIndex > (this->_hx___children->length - (int)1))) {
HXLINE( 264)			return;
            		}
            		else {
HXLINE( 266)			bool _hx_tmp;
HXDLIN( 266)			bool _hx_tmp1;
HXDLIN( 266)			if ((endIndex >= beginIndex)) {
HXLINE( 266)				_hx_tmp1 = (beginIndex < (int)0);
            			}
            			else {
HXLINE( 266)				_hx_tmp1 = true;
            			}
HXDLIN( 266)			if (!(_hx_tmp1)) {
HXLINE( 266)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 266)				_hx_tmp = true;
            			}
HXDLIN( 266)			if (_hx_tmp) {
HXLINE( 268)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 272)		int numRemovals = (endIndex - beginIndex);
HXLINE( 273)		while((numRemovals >= (int)0)){
HXLINE( 275)			this->removeChildAt(beginIndex);
HXLINE( 276)			numRemovals = (numRemovals - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_283_resolve)
HXLINE( 285)		if (hx::IsNull( this->_hx___children )) {
HXLINE( 285)			return null();
            		}
HXLINE( 287)		{
HXLINE( 287)			int _g = (int)0;
HXDLIN( 287)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 287)			while((_g < _g1->length)){
HXLINE( 287)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 287)				_g = (_g + (int)1);
HXLINE( 289)				if ((child->get_name() == fieldName)) {
HXLINE( 291)					return child;
            				}
            			}
            		}
HXLINE( 297)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_304_setChildIndex)
HXLINE( 304)		bool _hx_tmp;
HXDLIN( 304)		bool _hx_tmp1;
HXDLIN( 304)		if ((index >= (int)0)) {
HXLINE( 304)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXLINE( 304)			_hx_tmp1 = false;
            		}
HXDLIN( 304)		if (_hx_tmp1) {
HXLINE( 304)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 304)			_hx_tmp = false;
            		}
HXDLIN( 304)		if (_hx_tmp) {
HXLINE( 306)			this->_hx___children->remove(child);
HXLINE( 307)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_316_stopAllMovieClips)
HXLINE( 316)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_323_swapChildren)
HXLINE( 323)		bool _hx_tmp;
HXDLIN( 323)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 323)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 323)			_hx_tmp = false;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 325)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 326)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 328)			this->_hx___children[index1] = child2;
HXLINE( 329)			this->_hx___children[index2] = child1;
HXLINE( 331)			if (!(this->_hx___renderDirty)) {
HXLINE( 331)				this->_hx___renderDirty = true;
HXDLIN( 331)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_338_swapChildrenAt)
HXLINE( 340)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 341)		::Array< ::Dynamic> _hx_tmp = this->_hx___children;
HXDLIN( 341)		_hx_tmp[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 342)		this->_hx___children[index2] = swap;
HXLINE( 343)		swap = null();
HXLINE( 344)		if (!(this->_hx___renderDirty)) {
HXLINE( 344)			this->_hx___renderDirty = true;
HXDLIN( 344)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

bool DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event, ::openfl::_Vector::ObjectVector stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_349___dispatchChildren)
HXLINE( 351)		bool success = this->super::_hx___dispatchChildren(event,stack);
HXLINE( 353)		bool _hx_tmp;
HXDLIN( 353)		if (success) {
HXLINE( 353)			_hx_tmp = hx::IsNotNull( this->_hx___children );
            		}
            		else {
HXLINE( 353)			_hx_tmp = false;
            		}
HXDLIN( 353)		if (_hx_tmp) {
HXLINE( 355)			int _g = (int)0;
HXDLIN( 355)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 355)			while((_g < _g1->length)){
HXLINE( 355)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 355)				_g = (_g + (int)1);
HXLINE( 357)				if (!(child->_hx___dispatchChildren(event,stack))) {
HXLINE( 359)					return false;
            				}
            			}
            		}
HXLINE( 367)		return success;
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_374___enterFrame)
HXLINE( 374)		int _g = (int)0;
HXDLIN( 374)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 374)		while((_g < _g1->length)){
HXLINE( 374)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 374)			_g = (_g + (int)1);
HXLINE( 376)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_383___getBounds)
HXLINE( 385)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 387)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 387)			return;
            		}
HXLINE( 389)		if (hx::IsNotNull( matrix )) {
HXLINE( 391)			this->_hx___updateTransforms(matrix);
HXLINE( 392)			this->_hx___updateChildren(true);
            		}
HXLINE( 396)		{
HXLINE( 396)			int _g = (int)0;
HXDLIN( 396)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 396)			while((_g < _g1->length)){
HXLINE( 396)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 396)				_g = (_g + (int)1);
HXLINE( 398)				bool _hx_tmp;
HXDLIN( 398)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 398)					_hx_tmp = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 398)					_hx_tmp = true;
            				}
HXDLIN( 398)				if (_hx_tmp) {
HXLINE( 398)					continue;
            				}
HXLINE( 399)				child->_hx___getBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 403)		if (hx::IsNotNull( matrix )) {
HXLINE( 405)			this->_hx___updateTransforms(null());
HXLINE( 406)			this->_hx___updateChildren(true);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_413___getRenderBounds)
HXLINE( 415)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 417)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 418)			return;
            		}
            		else {
HXLINE( 422)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 426)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 426)			return;
            		}
HXLINE( 428)		if (hx::IsNotNull( matrix )) {
HXLINE( 430)			this->_hx___updateTransforms(matrix);
HXLINE( 431)			this->_hx___updateChildren(true);
            		}
HXLINE( 435)		{
HXLINE( 435)			int _g = (int)0;
HXDLIN( 435)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 435)			while((_g < _g1->length)){
HXLINE( 435)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 435)				_g = (_g + (int)1);
HXLINE( 437)				bool _hx_tmp;
HXDLIN( 437)				bool _hx_tmp1;
HXDLIN( 437)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 437)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 437)					_hx_tmp1 = true;
            				}
HXDLIN( 437)				if (!(_hx_tmp1)) {
HXLINE( 437)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 437)					_hx_tmp = true;
            				}
HXDLIN( 437)				if (_hx_tmp) {
HXLINE( 437)					continue;
            				}
HXLINE( 438)				child->_hx___getRenderBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 442)		if (hx::IsNotNull( matrix )) {
HXLINE( 444)			this->_hx___updateTransforms(null());
HXLINE( 445)			this->_hx___updateChildren(true);
            		}
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_452___hitTest)
HXLINE( 454)		bool _hx_tmp;
HXDLIN( 454)		bool _hx_tmp1;
HXDLIN( 454)		if (!(!(hitObject->get_visible()))) {
HXLINE( 454)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 454)			_hx_tmp1 = true;
            		}
HXDLIN( 454)		if (!(_hx_tmp1)) {
HXLINE( 454)			bool _hx_tmp2;
HXDLIN( 454)			if (interactiveOnly) {
HXLINE( 454)				_hx_tmp2 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 454)				_hx_tmp2 = false;
            			}
HXDLIN( 454)			if (_hx_tmp2) {
HXLINE( 454)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 454)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 454)			_hx_tmp = true;
            		}
HXDLIN( 454)		if (_hx_tmp) {
HXLINE( 454)			return false;
            		}
HXLINE( 455)		bool _hx_tmp3;
HXDLIN( 455)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 455)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 455)			_hx_tmp3 = false;
            		}
HXDLIN( 455)		if (_hx_tmp3) {
HXLINE( 455)			return false;
            		}
HXLINE( 457)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 459)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE( 460)			point->setTo(x,y);
HXLINE( 461)			{
HXLINE( 461)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 461)				Float norm = (_this->a * _this->d);
HXDLIN( 461)				Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 461)				if ((norm1 == (int)0)) {
HXLINE( 461)					point->x = -(_this->tx);
HXDLIN( 461)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 461)					Float _this1 = _this->c;
HXDLIN( 461)					Float px = (_this1 * (_this->ty - point->y));
HXDLIN( 461)					Float _this2 = _this->d;
HXDLIN( 461)					Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (point->x - _this->tx))));
HXDLIN( 461)					Float _this3 = _this->a;
HXDLIN( 461)					Float _hx_tmp4 = (_this3 * (point->y - _this->ty));
HXDLIN( 461)					Float _this4 = _this->b;
HXDLIN( 461)					point->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp4 + (_this4 * (_this->tx - point->x))));
HXDLIN( 461)					point->x = px1;
            				}
            			}
HXLINE( 463)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 465)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 466)				return false;
            			}
HXLINE( 470)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 474)		int i = this->_hx___children->length;
HXLINE( 475)		if (interactiveOnly) {
HXLINE( 477)			bool _hx_tmp5;
HXDLIN( 477)			if (hx::IsNotNull( stack )) {
HXLINE( 477)				_hx_tmp5 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 477)				_hx_tmp5 = true;
            			}
HXDLIN( 477)			if (_hx_tmp5) {
HXLINE( 479)				while(true){
HXLINE( 479)					i = (i - (int)1);
HXDLIN( 479)					if (!((i >= (int)0))) {
HXLINE( 479)						goto _hx_goto_30;
            					}
HXLINE( 481)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 483)						if (hx::IsNotNull( stack )) {
HXLINE( 485)							stack->push(hitObject);
            						}
HXLINE( 489)						return true;
            					}
            				}
            				_hx_goto_30:;
            			}
            			else {
HXLINE( 495)				if (hx::IsNotNull( stack )) {
HXLINE( 497)					int length = stack->length;
HXLINE( 499)					bool interactive = false;
HXLINE( 500)					bool hitTest = false;
HXLINE( 502)					while(true){
HXLINE( 502)						i = (i - (int)1);
HXDLIN( 502)						if (!((i >= (int)0))) {
HXLINE( 502)							goto _hx_goto_31;
            						}
HXLINE( 504)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 506)						bool _hx_tmp6;
HXDLIN( 506)						if (!(interactive)) {
HXLINE( 506)							if (this->mouseEnabled) {
HXLINE( 506)								_hx_tmp6 = !(hitTest);
            							}
            							else {
HXLINE( 506)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 506)							_hx_tmp6 = true;
            						}
HXDLIN( 506)						if (_hx_tmp6) {
HXLINE( 508)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 510)								hitTest = true;
HXLINE( 512)								if (interactive) {
HXLINE( 514)									goto _hx_goto_31;
            								}
            							}
            						}
            					}
            					_hx_goto_31:;
HXLINE( 524)					if (hitTest) {
HXLINE( 526)						stack->insert(length,hitObject);
HXLINE( 527)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 535)			while(true){
HXLINE( 535)				i = (i - (int)1);
HXDLIN( 535)				if (!((i >= (int)0))) {
HXLINE( 535)					goto _hx_goto_32;
            				}
HXLINE( 537)				this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
            			}
            			_hx_goto_32:;
            		}
HXLINE( 543)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_548___hitTestMask)
HXLINE( 550)		int i = this->_hx___children->length;
HXLINE( 552)		while(true){
HXLINE( 552)			i = (i - (int)1);
HXDLIN( 552)			if (!((i >= (int)0))) {
HXLINE( 552)				goto _hx_goto_34;
            			}
HXLINE( 554)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 556)				return true;
            			}
            		}
            		_hx_goto_34:;
HXLINE( 562)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_567___readGraphicsData)
HXLINE( 569)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 571)		if (recurse) {
HXLINE( 573)			int _g = (int)0;
HXDLIN( 573)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 573)			while((_g < _g1->length)){
HXLINE( 573)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 573)				_g = (_g + (int)1);
HXLINE( 575)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_584___renderCairo)
HXLINE( 587)		bool _hx_tmp;
HXDLIN( 587)		if (!(!(this->_hx___renderable))) {
HXLINE( 587)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 587)			_hx_tmp = true;
            		}
HXDLIN( 587)		if (_hx_tmp) {
HXLINE( 587)			return;
            		}
HXLINE( 589)		this->super::_hx___renderCairo(renderSession);
HXLINE( 591)		bool _hx_tmp1;
HXDLIN( 591)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 591)			_hx_tmp1 = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 591)			_hx_tmp1 = false;
            		}
HXDLIN( 591)		if (_hx_tmp1) {
HXLINE( 591)			return;
            		}
HXLINE( 593)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 595)		if (renderSession->clearDirtyFlags) {
HXLINE( 597)			{
HXLINE( 597)				int _g = (int)0;
HXDLIN( 597)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 597)				while((_g < _g1->length)){
HXLINE( 597)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 597)					_g = (_g + (int)1);
HXLINE( 599)					child->_hx___renderCairo(renderSession);
HXLINE( 600)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 604)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 608)			int _g2 = (int)0;
HXDLIN( 608)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 608)			while((_g2 < _g11->length)){
HXLINE( 608)				 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 608)				_g2 = (_g2 + (int)1);
HXLINE( 610)				child1->_hx___renderCairo(renderSession);
            			}
            		}
HXLINE( 616)		{
HXLINE( 616)			int _g3 = (int)0;
HXDLIN( 616)			 ::openfl::_Vector::ObjectVector _g12 = this->_hx___removedChildren;
HXDLIN( 616)			while((_g3 < _g12->get_length())){
HXLINE( 616)				 ::openfl::display::DisplayObject orphan = _g12->get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 616)				_g3 = (_g3 + (int)1);
HXLINE( 618)				if (hx::IsNull( orphan->stage )) {
HXLINE( 620)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 626)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 628)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_634___renderCairoMask)
HXLINE( 637)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 639)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 643)		{
HXLINE( 643)			int _g = (int)0;
HXDLIN( 643)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 643)			while((_g < _g1->length)){
HXLINE( 643)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 643)				_g = (_g + (int)1);
HXLINE( 645)				child->_hx___renderCairoMask(renderSession);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_653___renderCanvas)
HXLINE( 655)		bool _hx_tmp;
HXDLIN( 655)		bool _hx_tmp1;
HXDLIN( 655)		if (!(!(this->_hx___renderable))) {
HXLINE( 655)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 655)			_hx_tmp1 = true;
            		}
HXDLIN( 655)		if (!(_hx_tmp1)) {
HXLINE( 655)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 655)				if (!((this->get_mask()->get_width() <= (int)0))) {
HXLINE( 655)					_hx_tmp = (this->get_mask()->get_height() <= (int)0);
            				}
            				else {
HXLINE( 655)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 655)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 655)			_hx_tmp = true;
            		}
HXDLIN( 655)		if (_hx_tmp) {
HXLINE( 655)			return;
            		}
HXLINE( 659)		this->super::_hx___renderCanvas(renderSession);
HXLINE( 661)		bool _hx_tmp2;
HXDLIN( 661)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 661)			_hx_tmp2 = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 661)			_hx_tmp2 = false;
            		}
HXDLIN( 661)		if (_hx_tmp2) {
HXLINE( 661)			return;
            		}
HXLINE( 663)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 665)		if (renderSession->clearDirtyFlags) {
HXLINE( 667)			{
HXLINE( 667)				int _g = (int)0;
HXDLIN( 667)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 667)				while((_g < _g1->length)){
HXLINE( 667)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 667)					_g = (_g + (int)1);
HXLINE( 669)					child->_hx___renderCanvas(renderSession);
HXLINE( 670)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 674)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 678)			int _g2 = (int)0;
HXDLIN( 678)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 678)			while((_g2 < _g11->length)){
HXLINE( 678)				 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 678)				_g2 = (_g2 + (int)1);
HXLINE( 680)				child1->_hx___renderCanvas(renderSession);
            			}
            		}
HXLINE( 686)		{
HXLINE( 686)			int _g3 = (int)0;
HXDLIN( 686)			 ::openfl::_Vector::ObjectVector _g12 = this->_hx___removedChildren;
HXDLIN( 686)			while((_g3 < _g12->get_length())){
HXLINE( 686)				 ::openfl::display::DisplayObject orphan = _g12->get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 686)				_g3 = (_g3 + (int)1);
HXLINE( 688)				if (hx::IsNull( orphan->stage )) {
HXLINE( 690)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 696)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 698)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_705___renderCanvasMask)
HXLINE( 707)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 709)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 713)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 714)		this->_hx___getLocalBounds(bounds);
HXLINE( 716)		renderSession->context->rect((int)0,(int)0,bounds->width,bounds->height);
HXLINE( 718)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_728___renderDOM)
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_778___renderGL)
HXLINE( 780)		bool _hx_tmp;
HXDLIN( 780)		if (!(!(this->_hx___renderable))) {
HXLINE( 780)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 780)			_hx_tmp = true;
            		}
HXDLIN( 780)		if (_hx_tmp) {
HXLINE( 780)			return;
            		}
HXLINE( 782)		this->super::_hx___renderGL(renderSession);
HXLINE( 784)		bool _hx_tmp1;
HXDLIN( 784)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 784)			_hx_tmp1 = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 784)			_hx_tmp1 = false;
            		}
HXDLIN( 784)		if (_hx_tmp1) {
HXLINE( 784)			return;
            		}
HXLINE( 786)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 787)		renderSession->filterManager->pushObject(hx::ObjectPtr<OBJ_>(this));
HXLINE( 789)		if (renderSession->clearDirtyFlags) {
HXLINE( 791)			{
HXLINE( 791)				int _g = (int)0;
HXDLIN( 791)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 791)				while((_g < _g1->length)){
HXLINE( 791)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 791)					_g = (_g + (int)1);
HXLINE( 793)					child->_hx___renderGL(renderSession);
HXLINE( 794)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 798)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 802)			int _g2 = (int)0;
HXDLIN( 802)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 802)			while((_g2 < _g11->length)){
HXLINE( 802)				 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 802)				_g2 = (_g2 + (int)1);
HXLINE( 804)				child1->_hx___renderGL(renderSession);
            			}
            		}
HXLINE( 810)		{
HXLINE( 810)			int _g3 = (int)0;
HXDLIN( 810)			 ::openfl::_Vector::ObjectVector _g12 = this->_hx___removedChildren;
HXDLIN( 810)			while((_g3 < _g12->get_length())){
HXLINE( 810)				 ::openfl::display::DisplayObject orphan = _g12->get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 810)				_g3 = (_g3 + (int)1);
HXLINE( 812)				if (hx::IsNull( orphan->stage )) {
HXLINE( 814)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 820)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 822)		renderSession->filterManager->popObject(hx::ObjectPtr<OBJ_>(this));
HXLINE( 823)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_828___setStageReference)
HXLINE( 830)		this->super::_hx___setStageReference(stage);
HXLINE( 832)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 834)			int _g = (int)0;
HXDLIN( 834)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 834)			while((_g < _g1->length)){
HXLINE( 834)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 834)				_g = (_g + (int)1);
HXLINE( 836)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_847___setTransformDirty)
HXLINE( 847)		if (!(this->_hx___transformDirty)) {
HXLINE( 849)			this->super::_hx___setTransformDirty();
HXLINE( 851)			if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 853)				int _g = (int)0;
HXDLIN( 853)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 853)				while((_g < _g1->length)){
HXLINE( 853)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 853)					_g = (_g + (int)1);
HXLINE( 855)					child->_hx___setTransformDirty();
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_868___stopAllMovieClips)
HXLINE( 868)		int _g = (int)0;
HXDLIN( 868)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 868)		while((_g < _g1->length)){
HXLINE( 868)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 868)			_g = (_g + (int)1);
HXLINE( 870)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_877___update)
HXLINE( 879)		this->super::_hx___update(transformOnly,updateChildren,maskGraphics);
HXLINE( 881)		if (updateChildren) {
HXLINE( 883)			int _g = (int)0;
HXDLIN( 883)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 883)			while((_g < _g1->length)){
HXLINE( 883)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 883)				_g = (_g + (int)1);
HXLINE( 885)				child->_hx___update(transformOnly,true,maskGraphics);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_894___updateChildren)
HXLINE( 896)		this->super::_hx___updateChildren(transformOnly);
HXLINE( 898)		{
HXLINE( 898)			int _g = (int)0;
HXDLIN( 898)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 898)			while((_g < _g1->length)){
HXLINE( 898)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 898)				_g = (_g + (int)1);
HXLINE( 900)				child->_hx___update(transformOnly,true,null());
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_916_get_numChildren)
HXLINE( 916)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(tabChildren,"tabChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tempStack,"__tempStack");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(tabChildren,"tabChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tempStack,"__tempStack");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn()); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numChildren()); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { return hx::Val( tabChildren); }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { return hx::Val( _hx___tempStack); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn()); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn()); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { tabChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { _hx___tempStack=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"));
	outFields->push(HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"));
	outFields->push(HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,tabChildren),HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___tempStack),HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"),
	HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"),
	HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"),
	HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("areInaccessibleObjectsUnderPoint","\x3d","\x22","\x9b","\x1e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("getObjectsUnderPoint","\x96","\x10","\xd5","\x80"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("stopAllMovieClips","\xf2","\x60","\xf8","\xa0"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	hx::Object *dummy = new DisplayObjectContainer_obj;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObjectContainer","\x4a","\x52","\xef","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
