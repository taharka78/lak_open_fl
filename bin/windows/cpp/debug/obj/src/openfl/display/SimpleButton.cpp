// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_ButtonSymbol
#include <openfl/_internal/symbols/ButtonSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_10b8a2091f17fcad_49_new,"openfl.display.SimpleButton","new",0x26b2c720,"openfl.display.SimpleButton.new","openfl/display/SimpleButton.hx",49,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_84___fromSymbol,"openfl.display.SimpleButton","__fromSymbol",0x4fa160c2,"openfl.display.SimpleButton.__fromSymbol","openfl/display/SimpleButton.hx",84,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_115___getBounds,"openfl.display.SimpleButton","__getBounds",0xf4f40f4b,"openfl.display.SimpleButton.__getBounds","openfl/display/SimpleButton.hx",115,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_138___getRenderBounds,"openfl.display.SimpleButton","__getRenderBounds",0x52d157c1,"openfl.display.SimpleButton.__getRenderBounds","openfl/display/SimpleButton.hx",138,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_172___getCursor,"openfl.display.SimpleButton","__getCursor",0xcdbf17ac,"openfl.display.SimpleButton.__getCursor","openfl/display/SimpleButton.hx",172,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_177___hitTest,"openfl.display.SimpleButton","__hitTest",0x74e237e5,"openfl.display.SimpleButton.__hitTest","openfl/display/SimpleButton.hx",177,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_234___hitTestMask,"openfl.display.SimpleButton","__hitTestMask",0xa5bbfb71,"openfl.display.SimpleButton.__hitTestMask","openfl/display/SimpleButton.hx",234,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_249___renderCairo,"openfl.display.SimpleButton","__renderCairo",0xbf0184f2,"openfl.display.SimpleButton.__renderCairo","openfl/display/SimpleButton.hx",249,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_262___renderCairoMask,"openfl.display.SimpleButton","__renderCairoMask",0x423b52fe,"openfl.display.SimpleButton.__renderCairoMask","openfl/display/SimpleButton.hx",262,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_267___renderCanvas,"openfl.display.SimpleButton","__renderCanvas",0x65a3dd2e,"openfl.display.SimpleButton.__renderCanvas","openfl/display/SimpleButton.hx",267,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_282___renderCanvasMask,"openfl.display.SimpleButton","__renderCanvasMask",0xb0f4793a,"openfl.display.SimpleButton.__renderCanvasMask","openfl/display/SimpleButton.hx",282,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_295___renderDOM,"openfl.display.SimpleButton","__renderDOM",0xdfd7ac6c,"openfl.display.SimpleButton.__renderDOM","openfl/display/SimpleButton.hx",295,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_317___renderGL,"openfl.display.SimpleButton","__renderGL",0x36f57f5b,"openfl.display.SimpleButton.__renderGL","openfl/display/SimpleButton.hx",317,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_328___setStageReference,"openfl.display.SimpleButton","__setStageReference",0xb9ee5c0f,"openfl.display.SimpleButton.__setStageReference","openfl/display/SimpleButton.hx",328,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_347___setTransformDirty,"openfl.display.SimpleButton","__setTransformDirty",0x5e2c91e8,"openfl.display.SimpleButton.__setTransformDirty","openfl/display/SimpleButton.hx",347,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_366___update,"openfl.display.SimpleButton","__update",0xc35f8269,"openfl.display.SimpleButton.__update","openfl/display/SimpleButton.hx",366,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_389___updateChildren,"openfl.display.SimpleButton","__updateChildren",0x20d168c8,"openfl.display.SimpleButton.__updateChildren","openfl/display/SimpleButton.hx",389,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_408___updateTransforms,"openfl.display.SimpleButton","__updateTransforms",0xafb59550,"openfl.display.SimpleButton.__updateTransforms","openfl/display/SimpleButton.hx",408,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_434_set_downState,"openfl.display.SimpleButton","set_downState",0x0a49e6f2,"openfl.display.SimpleButton.set_downState","openfl/display/SimpleButton.hx",434,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_447_set_hitTestState,"openfl.display.SimpleButton","set_hitTestState",0x437c16c9,"openfl.display.SimpleButton.set_hitTestState","openfl/display/SimpleButton.hx",447,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_471_set_overState,"openfl.display.SimpleButton","set_overState",0x57f5a0c0,"openfl.display.SimpleButton.set_overState","openfl/display/SimpleButton.hx",471,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_484_get_soundTransform,"openfl.display.SimpleButton","get_soundTransform",0x1d7d70a6,"openfl.display.SimpleButton.get_soundTransform","openfl/display/SimpleButton.hx",484,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_497_set_soundTransform,"openfl.display.SimpleButton","set_soundTransform",0xfa2ca31a,"openfl.display.SimpleButton.set_soundTransform","openfl/display/SimpleButton.hx",497,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_505_set_upState,"openfl.display.SimpleButton","set_upState",0x553bb399,"openfl.display.SimpleButton.set_upState","openfl/display/SimpleButton.hx",505,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_518_set___currentState,"openfl.display.SimpleButton","set___currentState",0xc32592b5,"openfl.display.SimpleButton.set___currentState","openfl/display/SimpleButton.hx",518,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_581___this_onMouseDown,"openfl.display.SimpleButton","__this_onMouseDown",0x383f91c7,"openfl.display.SimpleButton.__this_onMouseDown","openfl/display/SimpleButton.hx",581,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_590___this_onMouseOut,"openfl.display.SimpleButton","__this_onMouseOut",0x6c31fac9,"openfl.display.SimpleButton.__this_onMouseOut","openfl/display/SimpleButton.hx",590,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_603___this_onMouseOver,"openfl.display.SimpleButton","__this_onMouseOver",0x3f8a2ab9,"openfl.display.SimpleButton.__this_onMouseOver","openfl/display/SimpleButton.hx",603,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_620___this_onMouseUp,"openfl.display.SimpleButton","__this_onMouseUp",0xd7286c80,"openfl.display.SimpleButton.__this_onMouseUp","openfl/display/SimpleButton.hx",620,0x4b6b858e)
namespace openfl{
namespace display{

void SimpleButton_obj::__construct( ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_49_new)
HXLINE(  51)		super::__construct();
HXLINE(  53)		this->enabled = true;
HXLINE(  54)		this->trackAsMenu = false;
HXLINE(  55)		this->useHandCursor = true;
HXLINE(  57)		 ::openfl::display::DisplayObject _hx_tmp;
HXDLIN(  57)		if (hx::IsNotNull( upState )) {
HXLINE(  57)			_hx_tmp = upState;
            		}
            		else {
HXLINE(  57)			_hx_tmp =  ::openfl::display::DisplayObject_obj::__alloc( HX_CTX );
            		}
HXDLIN(  57)		this->set_upState(_hx_tmp);
HXLINE(  58)		this->set_overState(overState);
HXLINE(  59)		this->set_downState(downState);
HXLINE(  60)		 ::openfl::display::DisplayObject _hx_tmp1;
HXDLIN(  60)		if (hx::IsNotNull( hitTestState )) {
HXLINE(  60)			_hx_tmp1 = hitTestState;
            		}
            		else {
HXLINE(  60)			_hx_tmp1 =  ::openfl::display::DisplayObject_obj::__alloc( HX_CTX );
            		}
HXDLIN(  60)		this->set_hitTestState(_hx_tmp1);
HXLINE(  62)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___this_onMouseDown_dyn(),null(),null(),null());
HXLINE(  63)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->_hx___this_onMouseOut_dyn(),null(),null(),null());
HXLINE(  64)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->_hx___this_onMouseOver_dyn(),null(),null(),null());
HXLINE(  65)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___this_onMouseUp_dyn(),null(),null(),null());
HXLINE(  67)		this->set___currentState(this->upState);
HXLINE(  69)		if (hx::IsNotNull( ::openfl::display::SimpleButton_obj::_hx___initSymbol )) {
HXLINE(  71)			 ::openfl::_internal::swf::SWFLite swf = ::openfl::display::SimpleButton_obj::_hx___initSWF;
HXLINE(  72)			this->_hx___symbol = ::openfl::display::SimpleButton_obj::_hx___initSymbol;
HXLINE(  74)			::openfl::display::SimpleButton_obj::_hx___initSWF = null();
HXLINE(  75)			::openfl::display::SimpleButton_obj::_hx___initSymbol = null();
HXLINE(  77)			this->_hx___fromSymbol(swf,this->_hx___symbol);
            		}
            	}

Dynamic SimpleButton_obj::__CreateEmpty() { return new SimpleButton_obj; }

void *SimpleButton_obj::_hx_vtable = 0;

Dynamic SimpleButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleButton_obj > _hx_result = new SimpleButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SimpleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3326e816 || inClassId==(int)0x3f2b00af;
	}
}

void SimpleButton_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::ButtonSymbol symbol){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_84___fromSymbol)
HXLINE(  86)		this->_hx___symbol = symbol;
HXLINE(  88)		if (hx::IsNotNull( symbol->downState )) {
HXLINE(  90)			this->set_downState(Dynamic( symbol->downState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE(  94)		if (hx::IsNotNull( symbol->hitState )) {
HXLINE(  96)			this->set_hitTestState(Dynamic( symbol->hitState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE( 100)		if (hx::IsNotNull( symbol->overState )) {
HXLINE( 102)			this->set_overState(Dynamic( symbol->overState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE( 106)		if (hx::IsNotNull( symbol->upState )) {
HXLINE( 108)			this->set_upState(Dynamic( symbol->upState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleButton_obj,_hx___fromSymbol,(void))

void SimpleButton_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_115___getBounds)
HXLINE( 117)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 119)		if (hx::IsNotNull( matrix )) {
HXLINE( 121)			this->_hx___updateTransforms(matrix);
HXLINE( 122)			this->_hx___updateChildren(true);
            		}
HXLINE( 126)		this->_hx___currentState->_hx___getBounds(rect,this->_hx___currentState->_hx___worldTransform);
HXLINE( 128)		if (hx::IsNotNull( matrix )) {
HXLINE( 130)			this->_hx___updateTransforms(null());
HXLINE( 131)			this->_hx___updateChildren(true);
            		}
            	}


void SimpleButton_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_138___getRenderBounds)
HXLINE( 140)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 142)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 143)			return;
            		}
            		else {
HXLINE( 147)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 151)		if (hx::IsNotNull( matrix )) {
HXLINE( 153)			this->_hx___updateTransforms(matrix);
HXLINE( 154)			this->_hx___updateChildren(true);
            		}
HXLINE( 158)		this->_hx___currentState->_hx___getRenderBounds(rect,this->_hx___currentState->_hx___worldTransform);
HXLINE( 160)		if (hx::IsNotNull( matrix )) {
HXLINE( 162)			this->_hx___updateTransforms(null());
HXLINE( 163)			this->_hx___updateChildren(true);
            		}
            	}


 ::lime::ui::MouseCursor SimpleButton_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_172___getCursor)
HXLINE( 172)		bool _hx_tmp;
HXDLIN( 172)		if (this->useHandCursor) {
HXLINE( 172)			_hx_tmp = !(this->_hx___ignoreEvent);
            		}
            		else {
HXLINE( 172)			_hx_tmp = false;
            		}
HXDLIN( 172)		if (_hx_tmp) {
HXLINE( 172)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE( 172)			return null();
            		}
HXDLIN( 172)		return null();
            	}


bool SimpleButton_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_177___hitTest)
HXLINE( 179)		bool hitTest = false;
HXLINE( 181)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 183)			if (this->hitTestState->_hx___hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
HXLINE( 185)				if (hx::IsNotNull( stack )) {
HXLINE( 187)					if ((stack->length == (int)0)) {
HXLINE( 189)						stack[(int)0] = hitObject;
            					}
            					else {
HXLINE( 193)						stack[(stack->length - (int)1)] = hitObject;
            					}
            				}
HXLINE( 199)				hitTest = true;
            			}
            		}
            		else {
HXLINE( 203)			if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 205)				bool _hx_tmp;
HXDLIN( 205)				bool _hx_tmp1;
HXDLIN( 205)				if (!(!(hitObject->get_visible()))) {
HXLINE( 205)					_hx_tmp1 = this->_hx___isMask;
            				}
            				else {
HXLINE( 205)					_hx_tmp1 = true;
            				}
HXDLIN( 205)				if (!(_hx_tmp1)) {
HXLINE( 205)					if (interactiveOnly) {
HXLINE( 205)						_hx_tmp = !(this->mouseEnabled);
            					}
            					else {
HXLINE( 205)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 205)					_hx_tmp = true;
            				}
HXDLIN( 205)				if (_hx_tmp) {
HXLINE( 205)					return false;
            				}
HXLINE( 206)				bool _hx_tmp2;
HXDLIN( 206)				if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 206)					_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            				}
            				else {
HXLINE( 206)					_hx_tmp2 = false;
            				}
HXDLIN( 206)				if (_hx_tmp2) {
HXLINE( 206)					return false;
            				}
HXLINE( 208)				if (this->_hx___currentState->_hx___hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
HXLINE( 210)					hitTest = interactiveOnly;
            				}
            			}
            		}
HXLINE( 219)		if (hx::IsNotNull( stack )) {
HXLINE( 221)			while(true){
HXLINE( 221)				bool _hx_tmp3;
HXDLIN( 221)				if ((stack->length > (int)1)) {
HXLINE( 221)					 ::openfl::display::DisplayObject stack1 = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 221)					_hx_tmp3 = hx::IsEq( stack1,stack->__get((stack->length - (int)2)).StaticCast<  ::openfl::display::DisplayObject >() );
            				}
            				else {
HXLINE( 221)					_hx_tmp3 = false;
            				}
HXDLIN( 221)				if (!(_hx_tmp3)) {
HXLINE( 221)					goto _hx_goto_5;
            				}
HXLINE( 223)				stack->pop().StaticCast<  ::openfl::display::DisplayObject >();
            			}
            			_hx_goto_5:;
            		}
HXLINE( 229)		return hitTest;
            	}


bool SimpleButton_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_234___hitTestMask)
HXLINE( 236)		bool hitTest = false;
HXLINE( 238)		if (this->_hx___currentState->_hx___hitTestMask(x,y)) {
HXLINE( 240)			hitTest = true;
            		}
HXLINE( 244)		return hitTest;
            	}


void SimpleButton_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_249___renderCairo)
HXLINE( 251)		bool _hx_tmp;
HXDLIN( 251)		if (!(!(this->_hx___renderable))) {
HXLINE( 251)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 251)			_hx_tmp = true;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 251)			return;
            		}
HXLINE( 253)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 254)		this->_hx___currentState->_hx___renderCairo(renderSession);
HXLINE( 255)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void SimpleButton_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_262___renderCairoMask)
HXLINE( 262)		this->_hx___currentState->_hx___renderCairoMask(renderSession);
            	}


void SimpleButton_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_267___renderCanvas)
HXLINE( 269)		bool _hx_tmp;
HXDLIN( 269)		if (!(!(this->_hx___renderable))) {
HXLINE( 269)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 269)			_hx_tmp = true;
            		}
HXDLIN( 269)		if (_hx_tmp) {
HXLINE( 269)			return;
            		}
HXLINE( 273)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 274)		this->_hx___currentState->_hx___renderCanvas(renderSession);
HXLINE( 275)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void SimpleButton_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_282___renderCanvasMask)
HXLINE( 284)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 285)		this->_hx___getLocalBounds(bounds);
HXLINE( 287)		renderSession->context->rect((int)0,(int)0,bounds->width,bounds->height);
HXLINE( 289)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE( 290)		this->_hx___currentState->_hx___renderCanvasMask(renderSession);
            	}


void SimpleButton_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_295___renderDOM)
HXLINE( 299)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 301)		{
HXLINE( 301)			int _g = (int)0;
HXDLIN( 301)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___previousStates;
HXDLIN( 301)			while((_g < _g1->get_length())){
HXLINE( 301)				 ::openfl::display::DisplayObject previousState = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 301)				_g = (_g + (int)1);
HXLINE( 303)				previousState->_hx___renderDOM(renderSession);
            			}
            		}
HXLINE( 307)		this->_hx___previousStates->set_length((int)0);
HXLINE( 308)		this->_hx___currentState->_hx___renderDOM(renderSession);
HXLINE( 310)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void SimpleButton_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_317___renderGL)
HXLINE( 319)		bool _hx_tmp;
HXDLIN( 319)		if (!(!(this->_hx___renderable))) {
HXLINE( 319)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 319)			_hx_tmp = true;
            		}
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 319)			return;
            		}
HXLINE( 321)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 322)		this->_hx___currentState->_hx___renderGL(renderSession);
HXLINE( 323)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void SimpleButton_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_328___setStageReference)
HXLINE( 330)		this->super::_hx___setStageReference(stage);
HXLINE( 332)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 334)			this->_hx___currentState->_hx___setStageReference(stage);
            		}
HXLINE( 338)		bool _hx_tmp;
HXDLIN( 338)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 338)			_hx_tmp = hx::IsNotEq( this->hitTestState,this->_hx___currentState );
            		}
            		else {
HXLINE( 338)			_hx_tmp = false;
            		}
HXDLIN( 338)		if (_hx_tmp) {
HXLINE( 340)			this->hitTestState->_hx___setStageReference(stage);
            		}
            	}


void SimpleButton_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_347___setTransformDirty)
HXLINE( 349)		this->super::_hx___setTransformDirty();
HXLINE( 351)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 353)			this->_hx___currentState->_hx___setTransformDirty();
            		}
HXLINE( 357)		bool _hx_tmp;
HXDLIN( 357)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 357)			_hx_tmp = hx::IsNotEq( this->hitTestState,this->_hx___currentState );
            		}
            		else {
HXLINE( 357)			_hx_tmp = false;
            		}
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 359)			this->hitTestState->_hx___setTransformDirty();
            		}
            	}


void SimpleButton_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_366___update)
HXLINE( 368)		this->super::_hx___update(transformOnly,updateChildren,maskGraphics);
HXLINE( 370)		if (updateChildren) {
HXLINE( 372)			if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 374)				this->_hx___currentState->_hx___update(transformOnly,true,maskGraphics);
            			}
HXLINE( 378)			bool _hx_tmp;
HXDLIN( 378)			if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 378)				_hx_tmp = hx::IsNotEq( this->hitTestState,this->_hx___currentState );
            			}
            			else {
HXLINE( 378)				_hx_tmp = false;
            			}
HXDLIN( 378)			if (_hx_tmp) {
HXLINE( 380)				this->hitTestState->_hx___update(transformOnly,true,maskGraphics);
            			}
            		}
            	}


void SimpleButton_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_389___updateChildren)
HXLINE( 391)		this->super::_hx___updateChildren(transformOnly);
HXLINE( 393)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 395)			this->_hx___currentState->_hx___updateChildren(transformOnly);
            		}
HXLINE( 399)		bool _hx_tmp;
HXDLIN( 399)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 399)			_hx_tmp = hx::IsNotEq( this->hitTestState,this->_hx___currentState );
            		}
            		else {
HXLINE( 399)			_hx_tmp = false;
            		}
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 401)			this->hitTestState->_hx___updateChildren(transformOnly);
            		}
            	}


void SimpleButton_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_408___updateTransforms)
HXLINE( 410)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE( 412)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 414)			this->_hx___currentState->_hx___updateTransforms(null());
            		}
HXLINE( 418)		bool _hx_tmp;
HXDLIN( 418)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 418)			_hx_tmp = hx::IsNotEq( this->hitTestState,this->_hx___currentState );
            		}
            		else {
HXLINE( 418)			_hx_tmp = false;
            		}
HXDLIN( 418)		if (_hx_tmp) {
HXLINE( 420)			this->hitTestState->_hx___updateTransforms(null());
            		}
            	}


 ::openfl::display::DisplayObject SimpleButton_obj::set_downState( ::openfl::display::DisplayObject downState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_434_set_downState)
HXLINE( 436)		bool _hx_tmp;
HXDLIN( 436)		if (hx::IsNotNull( this->downState )) {
HXLINE( 436)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->downState );
            		}
            		else {
HXLINE( 436)			_hx_tmp = false;
            		}
HXDLIN( 436)		if (_hx_tmp) {
HXLINE( 438)			this->set___currentState(downState);
            		}
HXLINE( 442)		return (this->downState = downState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_downState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_hitTestState( ::openfl::display::DisplayObject hitTestState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_447_set_hitTestState)
HXLINE( 449)		bool _hx_tmp;
HXDLIN( 449)		if (hx::IsNotNull( this->hitTestState )) {
HXLINE( 449)			_hx_tmp = hx::IsNotEq( this->hitTestState,hitTestState );
            		}
            		else {
HXLINE( 449)			_hx_tmp = false;
            		}
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 451)			bool _hx_tmp1;
HXDLIN( 451)			bool _hx_tmp2;
HXDLIN( 451)			if (hx::IsNotEq( this->hitTestState,this->downState )) {
HXLINE( 451)				_hx_tmp2 = hx::IsNotEq( this->hitTestState,this->upState );
            			}
            			else {
HXLINE( 451)				_hx_tmp2 = false;
            			}
HXDLIN( 451)			if (_hx_tmp2) {
HXLINE( 451)				_hx_tmp1 = hx::IsNotEq( this->hitTestState,this->overState );
            			}
            			else {
HXLINE( 451)				_hx_tmp1 = false;
            			}
HXDLIN( 451)			if (_hx_tmp1) {
HXLINE( 453)				this->hitTestState->_hx___renderParent = null();
            			}
            		}
HXLINE( 459)		if (hx::IsNotNull( hitTestState )) {
HXLINE( 461)			hitTestState->_hx___renderParent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 462)			if (!(hitTestState->_hx___renderDirty)) {
HXLINE( 462)				hitTestState->_hx___renderDirty = true;
HXDLIN( 462)				hitTestState->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 466)		return (this->hitTestState = hitTestState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_hitTestState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_overState( ::openfl::display::DisplayObject overState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_471_set_overState)
HXLINE( 473)		bool _hx_tmp;
HXDLIN( 473)		if (hx::IsNotNull( this->overState )) {
HXLINE( 473)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->overState );
            		}
            		else {
HXLINE( 473)			_hx_tmp = false;
            		}
HXDLIN( 473)		if (_hx_tmp) {
HXLINE( 475)			this->set___currentState(overState);
            		}
HXLINE( 479)		return (this->overState = overState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_overState,return )

 ::openfl::media::SoundTransform SimpleButton_obj::get_soundTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_484_get_soundTransform)
HXLINE( 486)		if (hx::IsNull( this->_hx___soundTransform )) {
HXLINE( 488)			this->_hx___soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 492)		return  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,this->_hx___soundTransform->volume,this->_hx___soundTransform->pan);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_soundTransform,return )

 ::openfl::media::SoundTransform SimpleButton_obj::set_soundTransform( ::openfl::media::SoundTransform value){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_497_set_soundTransform)
HXLINE( 499)		this->_hx___soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,value->volume,value->pan);
HXLINE( 500)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_soundTransform,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_upState( ::openfl::display::DisplayObject upState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_505_set_upState)
HXLINE( 507)		bool _hx_tmp;
HXDLIN( 507)		if (hx::IsNotNull( this->upState )) {
HXLINE( 507)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->upState );
            		}
            		else {
HXLINE( 507)			_hx_tmp = false;
            		}
HXDLIN( 507)		if (_hx_tmp) {
HXLINE( 509)			this->set___currentState(upState);
            		}
HXLINE( 513)		return (this->upState = upState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_upState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set___currentState( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_518_set___currentState)
HXLINE( 520)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 522)			this->_hx___currentState->_hx___renderParent = null();
            		}
HXLINE( 526)		if (hx::IsNotNull( value->parent )) {
HXLINE( 528)			value->parent->removeChild(value);
            		}
HXLINE( 540)		if (hx::IsNotEq( value,this->_hx___currentState )) {
HXLINE( 559)			value->_hx___renderParent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 560)			if (!(value->_hx___renderDirty)) {
HXLINE( 560)				value->_hx___renderDirty = true;
HXDLIN( 560)				value->_hx___setParentRenderDirty();
            			}
HXLINE( 561)			if (!(this->_hx___renderDirty)) {
HXLINE( 561)				this->_hx___renderDirty = true;
HXDLIN( 561)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 565)		this->_hx___currentState = value;
HXLINE( 567)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set___currentState,return )

void SimpleButton_obj::_hx___this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_581___this_onMouseDown)
HXLINE( 581)		if (hx::IsNotNull( this->downState )) {
HXLINE( 583)			this->set___currentState(this->downState);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseDown,(void))

void SimpleButton_obj::_hx___this_onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_590___this_onMouseOut)
HXLINE( 592)		this->_hx___ignoreEvent = false;
HXLINE( 594)		if (hx::IsNotEq( this->upState,this->_hx___currentState )) {
HXLINE( 596)			this->set___currentState(this->upState);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseOut,(void))

void SimpleButton_obj::_hx___this_onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_603___this_onMouseOver)
HXLINE( 605)		if (event->buttonDown) {
HXLINE( 607)			this->_hx___ignoreEvent = true;
            		}
HXLINE( 611)		bool _hx_tmp;
HXDLIN( 611)		bool _hx_tmp1;
HXDLIN( 611)		if (hx::IsNotEq( this->overState,this->_hx___currentState )) {
HXLINE( 611)			_hx_tmp1 = hx::IsNotNull( this->overState );
            		}
            		else {
HXLINE( 611)			_hx_tmp1 = false;
            		}
HXDLIN( 611)		if (_hx_tmp1) {
HXLINE( 611)			_hx_tmp = !(this->_hx___ignoreEvent);
            		}
            		else {
HXLINE( 611)			_hx_tmp = false;
            		}
HXDLIN( 611)		if (_hx_tmp) {
HXLINE( 613)			this->set___currentState(this->overState);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseOver,(void))

void SimpleButton_obj::_hx___this_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_620___this_onMouseUp)
HXLINE( 622)		this->_hx___ignoreEvent = false;
HXLINE( 624)		if (hx::IsNotNull( this->overState )) {
HXLINE( 626)			this->set___currentState(this->overState);
            		}
            		else {
HXLINE( 630)			this->set___currentState(this->upState);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseUp,(void))

 ::openfl::_internal::swf::SWFLite SimpleButton_obj::_hx___initSWF;

 ::openfl::_internal::symbols::ButtonSymbol SimpleButton_obj::_hx___initSymbol;


hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__new( ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState) {
	hx::ObjectPtr< SimpleButton_obj > __this = new SimpleButton_obj();
	__this->__construct(upState,overState,downState,hitTestState);
	return __this;
}

hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState) {
	SimpleButton_obj *__this = (SimpleButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleButton_obj), true, "openfl.display.SimpleButton"));
	*(void **)__this = SimpleButton_obj::_hx_vtable;
	__this->__construct(upState,overState,downState,hitTestState);
	return __this;
}

SimpleButton_obj::SimpleButton_obj()
{
}

void SimpleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleButton);
	HX_MARK_MEMBER_NAME(downState,"downState");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(hitTestState,"hitTestState");
	HX_MARK_MEMBER_NAME(overState,"overState");
	HX_MARK_MEMBER_NAME(trackAsMenu,"trackAsMenu");
	HX_MARK_MEMBER_NAME(upState,"upState");
	HX_MARK_MEMBER_NAME(useHandCursor,"useHandCursor");
	HX_MARK_MEMBER_NAME(_hx___currentState,"__currentState");
	HX_MARK_MEMBER_NAME(_hx___ignoreEvent,"__ignoreEvent");
	HX_MARK_MEMBER_NAME(_hx___previousStates,"__previousStates");
	HX_MARK_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(downState,"downState");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(hitTestState,"hitTestState");
	HX_VISIT_MEMBER_NAME(overState,"overState");
	HX_VISIT_MEMBER_NAME(trackAsMenu,"trackAsMenu");
	HX_VISIT_MEMBER_NAME(upState,"upState");
	HX_VISIT_MEMBER_NAME(useHandCursor,"useHandCursor");
	HX_VISIT_MEMBER_NAME(_hx___currentState,"__currentState");
	HX_VISIT_MEMBER_NAME(_hx___ignoreEvent,"__ignoreEvent");
	HX_VISIT_MEMBER_NAME(_hx___previousStates,"__previousStates");
	HX_VISIT_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled); }
		if (HX_FIELD_EQ(inName,"upState") ) { return hx::Val( upState); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { return hx::Val( downState); }
		if (HX_FIELD_EQ(inName,"overState") ) { return hx::Val( overState); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trackAsMenu") ) { return hx::Val( trackAsMenu); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"set_upState") ) { return hx::Val( set_upState_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hitTestState") ) { return hx::Val( hitTestState); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { return hx::Val( useHandCursor); }
		if (HX_FIELD_EQ(inName,"__ignoreEvent") ) { return hx::Val( _hx___ignoreEvent); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"set_downState") ) { return hx::Val( set_downState_dyn()); }
		if (HX_FIELD_EQ(inName,"set_overState") ) { return hx::Val( set_overState_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_soundTransform()); }
		if (HX_FIELD_EQ(inName,"__currentState") ) { return hx::Val( _hx___currentState); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__previousStates") ) { return hx::Val( _hx___previousStates); }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { return hx::Val( _hx___soundTransform); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"set_hitTestState") ) { return hx::Val( set_hitTestState_dyn()); }
		if (HX_FIELD_EQ(inName,"__this_onMouseUp") ) { return hx::Val( _hx___this_onMouseUp_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__this_onMouseOut") ) { return hx::Val( _hx___this_onMouseOut_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return hx::Val( get_soundTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return hx::Val( set_soundTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"set___currentState") ) { return hx::Val( set___currentState_dyn()); }
		if (HX_FIELD_EQ(inName,"__this_onMouseDown") ) { return hx::Val( _hx___this_onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"__this_onMouseOver") ) { return hx::Val( _hx___this_onMouseOver_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn()); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool SimpleButton_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = _hx___initSWF; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = _hx___initSymbol; return true; }
	}
	return false;
}

hx::Val SimpleButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_upState(inValue) );upState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::ButtonSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_downState(inValue) );downState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_overState(inValue) );overState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trackAsMenu") ) { trackAsMenu=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hitTestState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hitTestState(inValue) );hitTestState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { useHandCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ignoreEvent") ) { _hx___ignoreEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_soundTransform(inValue) ); }
		if (HX_FIELD_EQ(inName,"__currentState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___currentState(inValue) );_hx___currentState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__previousStates") ) { _hx___previousStates=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { _hx___soundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SimpleButton_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::ButtonSymbol >(); return true; }
	}
	return false;
}

void SimpleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("downState","\x4f","\x4a","\x21","\x9a"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("hitTestState","\x8c","\x6b","\x9d","\xa1"));
	outFields->push(HX_HCSTRING("overState","\x1d","\x04","\xcd","\xe7"));
	outFields->push(HX_HCSTRING("soundTransform","\x9d","\xee","\xde","\x22"));
	outFields->push(HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda"));
	outFields->push(HX_HCSTRING("upState","\xb6","\x95","\x80","\xe0"));
	outFields->push(HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"));
	outFields->push(HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb"));
	outFields->push(HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1"));
	outFields->push(HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28"));
	outFields->push(HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleButton_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,downState),HX_HCSTRING("downState","\x4f","\x4a","\x21","\x9a")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,hitTestState),HX_HCSTRING("hitTestState","\x8c","\x6b","\x9d","\xa1")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,overState),HX_HCSTRING("overState","\x1d","\x04","\xcd","\xe7")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,trackAsMenu),HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,upState),HX_HCSTRING("upState","\xb6","\x95","\x80","\xe0")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,useHandCursor),HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___currentState),HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,_hx___ignoreEvent),HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(SimpleButton_obj,_hx___previousStates),HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(SimpleButton_obj,_hx___soundTransform),HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57")},
	{hx::fsObject /*::openfl::_internal::symbols::ButtonSymbol*/ ,(int)offsetof(SimpleButton_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SimpleButton_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(void *) &SimpleButton_obj::_hx___initSWF,HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c")},
	{hx::fsObject /*::openfl::_internal::symbols::ButtonSymbol*/ ,(void *) &SimpleButton_obj::_hx___initSymbol,HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SimpleButton_obj_sMemberFields[] = {
	HX_HCSTRING("downState","\x4f","\x4a","\x21","\x9a"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("hitTestState","\x8c","\x6b","\x9d","\xa1"),
	HX_HCSTRING("overState","\x1d","\x04","\xcd","\xe7"),
	HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda"),
	HX_HCSTRING("upState","\xb6","\x95","\x80","\xe0"),
	HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"),
	HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb"),
	HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1"),
	HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28"),
	HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("set_downState","\x32","\x00","\x8b","\xa0"),
	HX_HCSTRING("set_hitTestState","\x89","\x45","\x7e","\xfc"),
	HX_HCSTRING("set_overState","\x00","\xba","\x36","\xee"),
	HX_HCSTRING("get_soundTransform","\x66","\xcf","\x78","\xbe"),
	HX_HCSTRING("set_soundTransform","\xda","\x01","\x28","\x9b"),
	HX_HCSTRING("set_upState","\xd9","\xfc","\xe7","\x70"),
	HX_HCSTRING("set___currentState","\x75","\xf1","\x20","\x64"),
	HX_HCSTRING("__this_onMouseDown","\x87","\xf0","\x3a","\xd9"),
	HX_HCSTRING("__this_onMouseOut","\x09","\xb4","\x18","\x95"),
	HX_HCSTRING("__this_onMouseOver","\x79","\x89","\x85","\xe0"),
	HX_HCSTRING("__this_onMouseUp","\x40","\x9b","\x2a","\x90"),
	::String(null()) };

static void SimpleButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SimpleButton_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(SimpleButton_obj::_hx___initSymbol,"__initSymbol");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::_hx___initSymbol,"__initSymbol");
};

#endif

hx::Class SimpleButton_obj::__mClass;

static ::String SimpleButton_obj_sStaticFields[] = {
	HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c"),
	HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b"),
	::String(null())
};

void SimpleButton_obj::__register()
{
	hx::Object *dummy = new SimpleButton_obj;
	SimpleButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.SimpleButton","\x2e","\xf7","\x40","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SimpleButton_obj::__GetStatic;
	__mClass->mSetStaticField = &SimpleButton_obj::__SetStatic;
	__mClass->mMarkFunc = SimpleButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SimpleButton_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
