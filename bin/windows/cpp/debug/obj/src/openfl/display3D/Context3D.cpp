// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_50_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",50,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_3[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_239_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",239,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_277_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",277,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_295_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",295,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_302_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",302,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_309_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",309,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_316_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",316,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_323_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",323,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_330_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",330,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_340_createVideoTexture,"openfl.display3D.Context3D","createVideoTexture",0x922f1723,"openfl.display3D.Context3D.createVideoTexture","openfl/display3D/Context3D.hx",340,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_346_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",346,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_353_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",353,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_371_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",371,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_396_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",396,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_412_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",412,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_427_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",427,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_434_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",434,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_468_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",468,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_515_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",515,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_543_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",543,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_575_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",575,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_637_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",637,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_672_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",672,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_697_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",697,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_839_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",839,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_960_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",960,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_968_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",968,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_977_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",977,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_990_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",990,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1002_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",1002,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1060___flushSamplerState,"openfl.display3D.Context3D","__flushSamplerState",0xbb488366,"openfl.display3D.Context3D.__flushSamplerState","openfl/display3D/Context3D.hx",1060,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1106___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",1106,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1125___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",1125,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1144___hasGLExtension,"openfl.display3D.Context3D","__hasGLExtension",0xeedeef47,"openfl.display3D.Context3D.__hasGLExtension","openfl/display3D/Context3D.hx",1144,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1149___setViewport,"openfl.display3D.Context3D","__setViewport",0x44998801,"openfl.display3D.Context3D.__setViewport","openfl/display3D/Context3D.hx",1149,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1163___statsAdd,"openfl.display3D.Context3D","__statsAdd",0x9eeb6dc9,"openfl.display3D.Context3D.__statsAdd","openfl/display3D/Context3D.hx",1163,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1173___statsClear,"openfl.display3D.Context3D","__statsClear",0xef112735,"openfl.display3D.Context3D.__statsClear","openfl/display3D/Context3D.hx",1173,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1180___statsDecrement,"openfl.display3D.Context3D","__statsDecrement",0xf8079fbb,"openfl.display3D.Context3D.__statsDecrement","openfl/display3D/Context3D.hx",1180,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1187___statsIncrement,"openfl.display3D.Context3D","__statsIncrement",0x1984afd7,"openfl.display3D.Context3D.__statsIncrement","openfl/display3D/Context3D.hx",1187,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1192___statsSendToTelemetry,"openfl.display3D.Context3D","__statsSendToTelemetry",0x95ec20be,"openfl.display3D.Context3D.__statsSendToTelemetry","openfl/display3D/Context3D.hx",1192,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1241___statsSubtract,"openfl.display3D.Context3D","__statsSubtract",0xc326b86c,"openfl.display3D.Context3D.__statsSubtract","openfl/display3D/Context3D.hx",1241,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1248___updateDepthAndStencilState,"openfl.display3D.Context3D","__updateDepthAndStencilState",0x7fba6d19,"openfl.display3D.Context3D.__updateDepthAndStencilState","openfl/display3D/Context3D.hx",1248,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1271___updateBlendFactors,"openfl.display3D.Context3D","__updateBlendFactors",0x00141f63,"openfl.display3D.Context3D.__updateBlendFactors","openfl/display3D/Context3D.hx",1271,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1319___updateScissorRectangle,"openfl.display3D.Context3D","__updateScissorRectangle",0x17db8763,"openfl.display3D.Context3D.__updateScissorRectangle","openfl/display3D/Context3D.hx",1319,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1364___updateBackbufferViewport,"openfl.display3D.Context3D","__updateBackbufferViewport",0x1ffcf0dd,"openfl.display3D.Context3D.__updateBackbufferViewport","openfl/display3D/Context3D.hx",1364,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1384_set_enableErrorChecking,"openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",1384,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_53_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",53,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_55_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",55,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_56_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",56,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_57_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",57,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_59_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",59,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_60_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",60,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_62_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",62,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_50_new)
HXLINE(  71)		this->totalGPUMemory = (int)0;
HXLINE(  70)		this->profile = (int)0;
HXLINE(  67)		this->enableErrorChecking = false;
HXLINE(  66)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE(  65)		this->backBufferWidth = (int)0;
HXLINE(  64)		this->backBufferHeight = (int)0;
HXLINE( 112)		super::__construct(null());
HXLINE( 114)		this->_hx___stage3D = stage3D;
HXLINE( 115)		this->_hx___renderSession = renderSession;
HXLINE( 117)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 117)		this->_hx___vertexConstants = this1;
HXLINE( 118)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 118)		this->_hx___fragmentConstants = this2;
HXLINE( 120)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_3,4);
HXDLIN( 120)		 ::lime::utils::ArrayBufferView this3;
HXDLIN( 120)		if (hx::IsNotNull( array )) {
HXLINE( 120)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 120)			_this->byteOffset = (int)0;
HXDLIN( 120)			_this->length = array->get_length();
HXDLIN( 120)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 120)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 120)			_this->buffer = this4;
HXDLIN( 120)			_this->copyFromArray(array,null());
HXDLIN( 120)			this3 = _this;
            		}
            		else {
HXLINE( 120)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 120)		this->_hx___positionScale = this3;
HXLINE( 121)		this->_hx___samplerDirty = (int)0;
HXLINE( 122)		bool fixed = null();
HXDLIN( 122)		this->_hx___samplerTextures =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null());
HXLINE( 123)		this->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 125)		{
HXLINE( 125)			int _g = (int)0;
HXDLIN( 125)			while((_g < (int)8)){
HXLINE( 125)				_g = (_g + (int)1);
HXDLIN( 125)				int i = (_g - (int)1);
HXLINE( 127)				::Array< ::Dynamic> _hx_tmp = this->_hx___samplerStates;
HXDLIN( 127)				_hx_tmp[i] =  ::openfl::_internal::stage3D::SamplerState_obj::__alloc( HX_CTX ,(int)9729,(int)9729,(int)33071,(int)33071,null(),null(),null(),null(),null());
            			}
            		}
HXLINE( 134)		this->maxBackBufferHeight = (this->maxBackBufferWidth = (int)16384);
HXLINE( 137)		this->_hx___backBufferAntiAlias = (int)0;
HXLINE( 138)		this->_hx___backBufferEnableDepthAndStencil = true;
HXLINE( 139)		this->_hx___backBufferWantsBestResolution = false;
HXLINE( 141)		this->_hx___frameCount = (int)0;
HXLINE( 142)		this->_hx___rttDepthAndStencil = false;
HXLINE( 143)		this->_hx___samplerDirty = (int)0;
HXLINE( 144)		this->_hx___stencilCompareMode = (int)0;
HXLINE( 145)		this->_hx___stencilRef = (int)0;
HXLINE( 146)		this->_hx___stencilReadMask = (int)255;
HXLINE( 148)		 ::Dynamic anisoExtension = ::lime::graphics::opengl::GL_obj::context->getExtension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXLINE( 162)		 ::Dynamic stencilExtension = ::lime::graphics::opengl::GL_obj::context->getExtension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXLINE( 164)		if (hx::IsNotNull( stencilExtension )) {
HXLINE( 166)			this->_hx___supportsPackedDepthStencil = true;
HXLINE( 167)			::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 171)			stencilExtension = ::lime::graphics::opengl::GL_obj::context->getExtension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXLINE( 173)			if (hx::IsNotNull( stencilExtension )) {
HXLINE( 175)				this->_hx___supportsPackedDepthStencil = true;
HXLINE( 176)				::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),hx::paccDynamic)) );
            			}
            		}
HXLINE( 184)		this->_hx___supportsAnisotropicFiltering = hx::IsNotNull( anisoExtension );
HXLINE( 186)		if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 188)			::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT = ( (int)(anisoExtension->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),hx::paccDynamic)) );
HXLINE( 190)			int maxAnisotropy = ( (int)(::lime::graphics::opengl::GL_obj::context->getParameter(( (int)(anisoExtension->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),hx::paccDynamic)) ))) );
HXLINE( 191)			this->_hx___maxAnisotropyTexture2D = maxAnisotropy;
HXLINE( 192)			this->_hx___maxAnisotropyTexture2D = maxAnisotropy;
            		}
HXLINE( 196)		bool fixed1 = null();
HXDLIN( 196)		this->_hx___stats =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed1,null());
HXLINE( 197)		bool fixed2 = null();
HXDLIN( 197)		this->_hx___statsCache =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed2,null());
HXLINE( 204)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 206)		::String vendor = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7936)) );
HXLINE( 207)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 209)		::String version = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE( 210)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 212)		::String renderer = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7937)) );
HXLINE( 213)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 215)		::String glslVersion = HX_("<unknown>",b0,91,d8,da);
HXLINE( 216)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 218)		this->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
HXLINE( 228)		{
HXLINE( 228)			int _g1 = (int)0;
HXDLIN( 228)			int _g2 = this->_hx___stats->get_length();
HXDLIN( 228)			while((_g1 < _g2)){
HXLINE( 228)				_g1 = (_g1 + (int)1);
HXDLIN( 228)				int i1 = (_g1 - (int)1);
HXLINE( 230)				this->_hx___stats->set(i1,(int)0);
            			}
            		}
HXLINE( 234)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x6271873d;
	}
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_239_clear)
HXLINE( 241)		int clearMask = (int)0;
HXLINE( 243)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 245)			clearMask = ((int)clearMask | (int)(int)16384);
HXLINE( 247)			::lime::graphics::opengl::GL_obj::context->clearColor(red,green,blue,alpha);
HXLINE( 248)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 252)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 254)			clearMask = ((int)clearMask | (int)(int)256);
HXLINE( 256)			::lime::graphics::opengl::GL_obj::context->depthMask(true);
HXLINE( 257)			::lime::graphics::opengl::GL_obj::context->clearDepthf(depth);
HXLINE( 258)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 262)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 264)			clearMask = ((int)clearMask | (int)(int)1024);
HXLINE( 266)			::lime::graphics::opengl::GL_obj::context->clearStencil(stencil);
HXLINE( 267)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 271)		::lime::graphics::opengl::GL_obj::context->clear(clearMask);
HXLINE( 272)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_277_configureBackBuffer)
HXLINE( 279)		this->_hx___updateBackbufferViewport();
HXLINE( 281)		this->backBufferWidth = width;
HXLINE( 282)		this->backBufferHeight = height;
HXLINE( 284)		this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 285)		this->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 286)		this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 288)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_295_createCubeTexture)
HXLINE( 295)		return  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_302_createIndexBuffer)
HXLINE( 302)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numIndices,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_309_createProgram)
HXLINE( 309)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_316_createRectangleTexture)
HXLINE( 316)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_323_createTexture)
HXLINE( 323)		return  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_330_createVertexBuffer)
HXLINE( 330)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

 ::openfl::display3D::textures::VideoTexture Context3D_obj::createVideoTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_340_createVideoTexture)
HXLINE( 340)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Video textures are not supported on this platform",02,cd,86,ca),null()));
HXDLIN( 340)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createVideoTexture,return )

void Context3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_346_dispose)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_353_drawToBitmapData)
HXLINE( 355)		if (hx::IsNull( destination )) {
HXLINE( 355)			return;
            		}
HXLINE( 357)		 ::lime::ui::Window window = this->_hx___stage3D->_hx___stage->window;
HXLINE( 359)		if (hx::IsNotNull( window )) {
HXLINE( 361)			 ::lime::graphics::Image image = window->renderer->readPixels(null());
HXLINE( 362)			 ::lime::graphics::Image destination1 = destination->image;
HXDLIN( 362)			 ::lime::math::Rectangle _hx_tmp = image->get_rect();
HXDLIN( 362)			destination1->copyPixels(image,_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_371_drawTriangles)
HXLINE( 373)		if (hx::IsNull( this->_hx___program )) {
HXLINE( 375)			return;
            		}
HXLINE( 379)		this->_hx___flushSamplerState();
HXLINE( 380)		this->_hx___program->_hx___flush();
HXLINE( 382)		int count;
HXDLIN( 382)		if ((numTriangles == (int)-1)) {
HXLINE( 382)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 382)			count = (numTriangles * (int)3);
            		}
HXLINE( 384)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34963,indexBuffer->_hx___id);
HXLINE( 385)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 387)		{
HXLINE( 387)			int type = indexBuffer->_hx___elementType;
HXDLIN( 387)			 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 387)			_hx_tmp->drawElements((int)4,count,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(firstIndex));
            		}
HXLINE( 388)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 390)		this->_hx___statsIncrement((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_396_present)
HXLINE( 398)		this->_hx___statsSendToTelemetry();
HXLINE( 405)		this->_hx___statsClear((int)0);
HXLINE( 407)		this->_hx___frameCount++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_412_setBlendFactors)
HXLINE( 414)		bool updateSrc = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 415)		bool updateDest = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 416)		bool _hx_tmp;
HXDLIN( 416)		if (!(updateSrc)) {
HXLINE( 416)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 416)			_hx_tmp = true;
            		}
HXDLIN( 416)		if (_hx_tmp) {
HXLINE( 418)			this->_hx___updateBlendFactors();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_427_setColorMask)
HXLINE( 427)		::lime::graphics::opengl::GL_obj::context->colorMask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_434_setCulling)
HXLINE( 434)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull)) {
HXLINE( 436)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 444)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 445)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1028);
HXLINE( 442)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 449)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 450)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1029);
HXLINE( 447)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 454)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 455)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1032);
HXLINE( 452)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 440)				::lime::graphics::opengl::GL_obj::context->disable((int)2884);
HXDLIN( 440)				goto _hx_goto_19;
            			}
            			/* default */{
HXLINE( 459)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_19:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_468_setDepthTest)
HXLINE( 470)		bool depthTestEnabled = this->_hx___backBufferEnableDepthAndStencil;
HXLINE( 472)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled)) {
HXLINE( 474)			if (depthTestEnabled) {
HXLINE( 476)				::lime::graphics::opengl::GL_obj::context->enable((int)2929);
            			}
            			else {
HXLINE( 480)				::lime::graphics::opengl::GL_obj::context->disable((int)2929);
            			}
            		}
HXLINE( 486)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask)) {
HXLINE( 488)			::lime::graphics::opengl::GL_obj::context->depthMask(depthMask);
            		}
HXLINE( 492)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode)) {
HXLINE( 494)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 496)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)519);
HXDLIN( 496)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 497)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)514);
HXDLIN( 497)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 498)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)516);
HXDLIN( 498)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 499)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)518);
HXDLIN( 499)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 500)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)513);
HXDLIN( 500)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 501)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)515);
HXDLIN( 501)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 502)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)512);
HXDLIN( 502)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 503)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)517);
HXDLIN( 503)				goto _hx_goto_21;
            			}
            			/* default */{
HXLINE( 506)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_21:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_515_setProgram)
HXLINE( 517)		if (hx::IsNull( program )) {
HXLINE( 519)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE( 523)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program)) {
HXLINE( 525)			program->_hx___use();
HXLINE( 526)			program->_hx___setPositionScale(this->_hx___positionScale);
HXLINE( 528)			this->_hx___program = program;
HXLINE( 530)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 530)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)this->_hx___program->_hx___samplerUsageMask);
HXLINE( 532)			{
HXLINE( 532)				int _g = (int)0;
HXDLIN( 532)				while((_g < (int)8)){
HXLINE( 532)					_g = (_g + (int)1);
HXDLIN( 532)					int i = (_g - (int)1);
HXLINE( 534)					 ::openfl::_internal::stage3D::SamplerState _hx_tmp1 = this->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 534)					_hx_tmp1->copyFrom(this->_hx___program->_hx___getSamplerState(i));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_543_setProgramConstantsFromByteArray)
HXLINE( 545)		if ((numRegisters == (int)0)) {
HXLINE( 545)			return;
            		}
HXLINE( 547)		if ((numRegisters == (int)-1)) {
HXLINE( 549)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 553)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 554)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 554)		if (isVertex) {
HXLINE( 554)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 554)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 556)		 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 556)		 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 556)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 556)		if (hx::IsNotNull( bytes )) {
HXLINE( 556)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 556)			int in_byteOffset = (int)0;
HXDLIN( 556)			if ((in_byteOffset < (int)0)) {
HXLINE( 556)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 556)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 556)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 556)			int bufferByteLength = bytes->length;
HXDLIN( 556)			int elementSize = _this->bytesPerElement;
HXDLIN( 556)			int newByteLength = bufferByteLength;
HXDLIN( 556)			if (hx::IsNull( len )) {
HXLINE( 556)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 556)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 556)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 556)				if ((newByteLength < (int)0)) {
HXLINE( 556)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 556)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 556)				int newRange = (in_byteOffset + newByteLength);
HXDLIN( 556)				if ((newRange > bufferByteLength)) {
HXLINE( 556)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 556)			_this->buffer = bytes;
HXDLIN( 556)			_this->byteOffset = in_byteOffset;
HXDLIN( 556)			_this->byteLength = newByteLength;
HXDLIN( 556)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 556)			this1 = _this;
            		}
            		else {
HXLINE( 556)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 556)		 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE( 557)		int outOffset = (firstRegister * (int)4);
HXLINE( 558)		int _hx_int = byteArrayOffset;
HXDLIN( 558)		Float inOffset;
HXDLIN( 558)		if ((_hx_int < (int)0)) {
HXLINE( 558)			inOffset = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 558)			inOffset = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 558)		int int1 = (int)4;
HXDLIN( 558)		Float inOffset1;
HXDLIN( 558)		if ((int1 < (int)0)) {
HXLINE( 558)			inOffset1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 558)			inOffset1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 558)		int inOffset2 = ::Std_obj::_hx_int(((Float)inOffset / (Float)inOffset1));
HXLINE( 560)		{
HXLINE( 560)			int _g1 = (int)0;
HXDLIN( 560)			int _g = (numRegisters * (int)4);
HXDLIN( 560)			while((_g1 < _g)){
HXLINE( 560)				_g1 = (_g1 + (int)1);
HXDLIN( 560)				int i = (_g1 - (int)1);
HXLINE( 562)				{
HXLINE( 562)					int floatData1 = floatData->byteOffset;
HXDLIN( 562)					Float val = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData1 + ((inOffset2 + i) * (int)4)));
HXDLIN( 562)					{
HXLINE( 562)						int dest1 = dest->byteOffset;
HXDLIN( 562)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((outOffset + i) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 566)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 568)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_575_setProgramConstantsFromMatrix)
HXLINE( 577)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 578)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 578)		if (isVertex) {
HXLINE( 578)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 578)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 579)		 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE( 580)		int i = (firstRegister * (int)4);
HXLINE( 582)		if (transposedMatrix) {
HXLINE( 584)			{
HXLINE( 584)				i = (i + (int)1);
HXDLIN( 584)				Float val = source->get((int)0);
HXDLIN( 584)				{
HXLINE( 584)					int dest1 = dest->byteOffset;
HXDLIN( 584)					::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((i - (int)1) * (int)4)),val);
            				}
            			}
HXLINE( 585)			{
HXLINE( 585)				i = (i + (int)1);
HXDLIN( 585)				Float val1 = source->get((int)4);
HXDLIN( 585)				{
HXLINE( 585)					int dest2 = dest->byteOffset;
HXDLIN( 585)					::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((i - (int)1) * (int)4)),val1);
            				}
            			}
HXLINE( 586)			{
HXLINE( 586)				i = (i + (int)1);
HXDLIN( 586)				Float val2 = source->get((int)8);
HXDLIN( 586)				{
HXLINE( 586)					int dest3 = dest->byteOffset;
HXDLIN( 586)					::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((i - (int)1) * (int)4)),val2);
            				}
            			}
HXLINE( 587)			{
HXLINE( 587)				i = (i + (int)1);
HXDLIN( 587)				Float val3 = source->get((int)12);
HXDLIN( 587)				{
HXLINE( 587)					int dest4 = dest->byteOffset;
HXDLIN( 587)					::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((i - (int)1) * (int)4)),val3);
            				}
            			}
HXLINE( 589)			{
HXLINE( 589)				i = (i + (int)1);
HXDLIN( 589)				Float val4 = source->get((int)1);
HXDLIN( 589)				{
HXLINE( 589)					int dest5 = dest->byteOffset;
HXDLIN( 589)					::__hxcpp_memory_set_float(dest->buffer->b,(dest5 + ((i - (int)1) * (int)4)),val4);
            				}
            			}
HXLINE( 590)			{
HXLINE( 590)				i = (i + (int)1);
HXDLIN( 590)				Float val5 = source->get((int)5);
HXDLIN( 590)				{
HXLINE( 590)					int dest6 = dest->byteOffset;
HXDLIN( 590)					::__hxcpp_memory_set_float(dest->buffer->b,(dest6 + ((i - (int)1) * (int)4)),val5);
            				}
            			}
HXLINE( 591)			{
HXLINE( 591)				i = (i + (int)1);
HXDLIN( 591)				Float val6 = source->get((int)9);
HXDLIN( 591)				{
HXLINE( 591)					int dest7 = dest->byteOffset;
HXDLIN( 591)					::__hxcpp_memory_set_float(dest->buffer->b,(dest7 + ((i - (int)1) * (int)4)),val6);
            				}
            			}
HXLINE( 592)			{
HXLINE( 592)				i = (i + (int)1);
HXDLIN( 592)				Float val7 = source->get((int)13);
HXDLIN( 592)				{
HXLINE( 592)					int dest8 = dest->byteOffset;
HXDLIN( 592)					::__hxcpp_memory_set_float(dest->buffer->b,(dest8 + ((i - (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 594)			{
HXLINE( 594)				i = (i + (int)1);
HXDLIN( 594)				Float val8 = source->get((int)2);
HXDLIN( 594)				{
HXLINE( 594)					int dest9 = dest->byteOffset;
HXDLIN( 594)					::__hxcpp_memory_set_float(dest->buffer->b,(dest9 + ((i - (int)1) * (int)4)),val8);
            				}
            			}
HXLINE( 595)			{
HXLINE( 595)				i = (i + (int)1);
HXDLIN( 595)				Float val9 = source->get((int)6);
HXDLIN( 595)				{
HXLINE( 595)					int dest10 = dest->byteOffset;
HXDLIN( 595)					::__hxcpp_memory_set_float(dest->buffer->b,(dest10 + ((i - (int)1) * (int)4)),val9);
            				}
            			}
HXLINE( 596)			{
HXLINE( 596)				i = (i + (int)1);
HXDLIN( 596)				Float val10 = source->get((int)10);
HXDLIN( 596)				{
HXLINE( 596)					int dest11 = dest->byteOffset;
HXDLIN( 596)					::__hxcpp_memory_set_float(dest->buffer->b,(dest11 + ((i - (int)1) * (int)4)),val10);
            				}
            			}
HXLINE( 597)			{
HXLINE( 597)				i = (i + (int)1);
HXDLIN( 597)				Float val11 = source->get((int)14);
HXDLIN( 597)				{
HXLINE( 597)					int dest12 = dest->byteOffset;
HXDLIN( 597)					::__hxcpp_memory_set_float(dest->buffer->b,(dest12 + ((i - (int)1) * (int)4)),val11);
            				}
            			}
HXLINE( 599)			{
HXLINE( 599)				i = (i + (int)1);
HXDLIN( 599)				Float val12 = source->get((int)3);
HXDLIN( 599)				{
HXLINE( 599)					int dest13 = dest->byteOffset;
HXDLIN( 599)					::__hxcpp_memory_set_float(dest->buffer->b,(dest13 + ((i - (int)1) * (int)4)),val12);
            				}
            			}
HXLINE( 600)			{
HXLINE( 600)				i = (i + (int)1);
HXDLIN( 600)				Float val13 = source->get((int)7);
HXDLIN( 600)				{
HXLINE( 600)					int dest14 = dest->byteOffset;
HXDLIN( 600)					::__hxcpp_memory_set_float(dest->buffer->b,(dest14 + ((i - (int)1) * (int)4)),val13);
            				}
            			}
HXLINE( 601)			{
HXLINE( 601)				i = (i + (int)1);
HXDLIN( 601)				Float val14 = source->get((int)11);
HXDLIN( 601)				{
HXLINE( 601)					int dest15 = dest->byteOffset;
HXDLIN( 601)					::__hxcpp_memory_set_float(dest->buffer->b,(dest15 + ((i - (int)1) * (int)4)),val14);
            				}
            			}
HXLINE( 602)			{
HXLINE( 602)				i = (i + (int)1);
HXDLIN( 602)				Float val15 = source->get((int)15);
HXDLIN( 602)				{
HXLINE( 602)					int dest16 = dest->byteOffset;
HXDLIN( 602)					::__hxcpp_memory_set_float(dest->buffer->b,(dest16 + ((i - (int)1) * (int)4)),val15);
            				}
            			}
            		}
            		else {
HXLINE( 606)			{
HXLINE( 606)				i = (i + (int)1);
HXDLIN( 606)				Float val16 = source->get((int)0);
HXDLIN( 606)				{
HXLINE( 606)					int dest17 = dest->byteOffset;
HXDLIN( 606)					::__hxcpp_memory_set_float(dest->buffer->b,(dest17 + ((i - (int)1) * (int)4)),val16);
            				}
            			}
HXLINE( 607)			{
HXLINE( 607)				i = (i + (int)1);
HXDLIN( 607)				Float val17 = source->get((int)1);
HXDLIN( 607)				{
HXLINE( 607)					int dest18 = dest->byteOffset;
HXDLIN( 607)					::__hxcpp_memory_set_float(dest->buffer->b,(dest18 + ((i - (int)1) * (int)4)),val17);
            				}
            			}
HXLINE( 608)			{
HXLINE( 608)				i = (i + (int)1);
HXDLIN( 608)				Float val18 = source->get((int)2);
HXDLIN( 608)				{
HXLINE( 608)					int dest19 = dest->byteOffset;
HXDLIN( 608)					::__hxcpp_memory_set_float(dest->buffer->b,(dest19 + ((i - (int)1) * (int)4)),val18);
            				}
            			}
HXLINE( 609)			{
HXLINE( 609)				i = (i + (int)1);
HXDLIN( 609)				Float val19 = source->get((int)3);
HXDLIN( 609)				{
HXLINE( 609)					int dest20 = dest->byteOffset;
HXDLIN( 609)					::__hxcpp_memory_set_float(dest->buffer->b,(dest20 + ((i - (int)1) * (int)4)),val19);
            				}
            			}
HXLINE( 611)			{
HXLINE( 611)				i = (i + (int)1);
HXDLIN( 611)				Float val20 = source->get((int)4);
HXDLIN( 611)				{
HXLINE( 611)					int dest21 = dest->byteOffset;
HXDLIN( 611)					::__hxcpp_memory_set_float(dest->buffer->b,(dest21 + ((i - (int)1) * (int)4)),val20);
            				}
            			}
HXLINE( 612)			{
HXLINE( 612)				i = (i + (int)1);
HXDLIN( 612)				Float val21 = source->get((int)5);
HXDLIN( 612)				{
HXLINE( 612)					int dest22 = dest->byteOffset;
HXDLIN( 612)					::__hxcpp_memory_set_float(dest->buffer->b,(dest22 + ((i - (int)1) * (int)4)),val21);
            				}
            			}
HXLINE( 613)			{
HXLINE( 613)				i = (i + (int)1);
HXDLIN( 613)				Float val22 = source->get((int)6);
HXDLIN( 613)				{
HXLINE( 613)					int dest23 = dest->byteOffset;
HXDLIN( 613)					::__hxcpp_memory_set_float(dest->buffer->b,(dest23 + ((i - (int)1) * (int)4)),val22);
            				}
            			}
HXLINE( 614)			{
HXLINE( 614)				i = (i + (int)1);
HXDLIN( 614)				Float val23 = source->get((int)7);
HXDLIN( 614)				{
HXLINE( 614)					int dest24 = dest->byteOffset;
HXDLIN( 614)					::__hxcpp_memory_set_float(dest->buffer->b,(dest24 + ((i - (int)1) * (int)4)),val23);
            				}
            			}
HXLINE( 616)			{
HXLINE( 616)				i = (i + (int)1);
HXDLIN( 616)				Float val24 = source->get((int)8);
HXDLIN( 616)				{
HXLINE( 616)					int dest25 = dest->byteOffset;
HXDLIN( 616)					::__hxcpp_memory_set_float(dest->buffer->b,(dest25 + ((i - (int)1) * (int)4)),val24);
            				}
            			}
HXLINE( 617)			{
HXLINE( 617)				i = (i + (int)1);
HXDLIN( 617)				Float val25 = source->get((int)9);
HXDLIN( 617)				{
HXLINE( 617)					int dest26 = dest->byteOffset;
HXDLIN( 617)					::__hxcpp_memory_set_float(dest->buffer->b,(dest26 + ((i - (int)1) * (int)4)),val25);
            				}
            			}
HXLINE( 618)			{
HXLINE( 618)				i = (i + (int)1);
HXDLIN( 618)				Float val26 = source->get((int)10);
HXDLIN( 618)				{
HXLINE( 618)					int dest27 = dest->byteOffset;
HXDLIN( 618)					::__hxcpp_memory_set_float(dest->buffer->b,(dest27 + ((i - (int)1) * (int)4)),val26);
            				}
            			}
HXLINE( 619)			{
HXLINE( 619)				i = (i + (int)1);
HXDLIN( 619)				Float val27 = source->get((int)11);
HXDLIN( 619)				{
HXLINE( 619)					int dest28 = dest->byteOffset;
HXDLIN( 619)					::__hxcpp_memory_set_float(dest->buffer->b,(dest28 + ((i - (int)1) * (int)4)),val27);
            				}
            			}
HXLINE( 621)			{
HXLINE( 621)				i = (i + (int)1);
HXDLIN( 621)				Float val28 = source->get((int)12);
HXDLIN( 621)				{
HXLINE( 621)					int dest29 = dest->byteOffset;
HXDLIN( 621)					::__hxcpp_memory_set_float(dest->buffer->b,(dest29 + ((i - (int)1) * (int)4)),val28);
            				}
            			}
HXLINE( 622)			{
HXLINE( 622)				i = (i + (int)1);
HXDLIN( 622)				Float val29 = source->get((int)13);
HXDLIN( 622)				{
HXLINE( 622)					int dest30 = dest->byteOffset;
HXDLIN( 622)					::__hxcpp_memory_set_float(dest->buffer->b,(dest30 + ((i - (int)1) * (int)4)),val29);
            				}
            			}
HXLINE( 623)			{
HXLINE( 623)				i = (i + (int)1);
HXDLIN( 623)				Float val30 = source->get((int)14);
HXDLIN( 623)				{
HXLINE( 623)					int dest31 = dest->byteOffset;
HXDLIN( 623)					::__hxcpp_memory_set_float(dest->buffer->b,(dest31 + ((i - (int)1) * (int)4)),val30);
            				}
            			}
HXLINE( 624)			{
HXLINE( 624)				i = (i + (int)1);
HXDLIN( 624)				Float val31 = source->get((int)15);
HXDLIN( 624)				{
HXLINE( 624)					int dest32 = dest->byteOffset;
HXDLIN( 624)					::__hxcpp_memory_set_float(dest->buffer->b,(dest32 + ((i - (int)1) * (int)4)),val31);
            				}
            			}
            		}
HXLINE( 628)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 630)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_637_setProgramConstantsFromVector)
HXLINE( 639)		if ((numRegisters == (int)0)) {
HXLINE( 639)			return;
            		}
HXLINE( 641)		if ((numRegisters == (int)-1)) {
HXLINE( 643)			numRegisters = ((int)data->get_length() >> (int)(int)2);
            		}
HXLINE( 647)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 648)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 648)		if (isVertex) {
HXLINE( 648)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 648)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 649)		 ::openfl::_Vector::FloatVector source = data;
HXLINE( 651)		int sourceIndex = (int)0;
HXLINE( 652)		int destIndex = (firstRegister * (int)4);
HXLINE( 654)		{
HXLINE( 654)			int _g1 = (int)0;
HXDLIN( 654)			int _g = numRegisters;
HXDLIN( 654)			while((_g1 < _g)){
HXLINE( 654)				_g1 = (_g1 + (int)1);
HXDLIN( 654)				int i = (_g1 - (int)1);
HXLINE( 656)				{
HXLINE( 656)					destIndex = (destIndex + (int)1);
HXDLIN( 656)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 656)					Float val = source->get((sourceIndex - (int)1));
HXDLIN( 656)					{
HXLINE( 656)						int dest1 = dest->byteOffset;
HXDLIN( 656)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((destIndex - (int)1) * (int)4)),val);
            					}
            				}
HXLINE( 657)				{
HXLINE( 657)					destIndex = (destIndex + (int)1);
HXDLIN( 657)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 657)					Float val1 = source->get((sourceIndex - (int)1));
HXDLIN( 657)					{
HXLINE( 657)						int dest2 = dest->byteOffset;
HXDLIN( 657)						::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((destIndex - (int)1) * (int)4)),val1);
            					}
            				}
HXLINE( 658)				{
HXLINE( 658)					destIndex = (destIndex + (int)1);
HXDLIN( 658)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 658)					Float val2 = source->get((sourceIndex - (int)1));
HXDLIN( 658)					{
HXLINE( 658)						int dest3 = dest->byteOffset;
HXDLIN( 658)						::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((destIndex - (int)1) * (int)4)),val2);
            					}
            				}
HXLINE( 659)				{
HXLINE( 659)					destIndex = (destIndex + (int)1);
HXDLIN( 659)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 659)					Float val3 = source->get((sourceIndex - (int)1));
HXDLIN( 659)					{
HXLINE( 659)						int dest4 = dest->byteOffset;
HXDLIN( 659)						::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((destIndex - (int)1) * (int)4)),val3);
            					}
            				}
            			}
            		}
HXLINE( 663)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 665)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_672_setRenderToBackBuffer)
HXLINE( 674)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,null());
HXLINE( 675)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 677)		::lime::graphics::opengl::GL_obj::context->frontFace((int)2305);
HXLINE( 678)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 680)		this->_hx___renderToTexture = null();
HXLINE( 681)		this->_hx___scissorRectangle = null();
HXLINE( 682)		this->_hx___updateBackbufferViewport();
HXLINE( 683)		this->_hx___updateScissorRectangle();
HXLINE( 684)		this->_hx___updateDepthAndStencilState();
HXLINE( 686)		{
HXLINE( 686)			 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN( 686)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)1.0));
            		}
HXLINE( 688)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 690)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_697_setRenderToTexture)
HXLINE( 699)		int width = (int)0;
HXLINE( 700)		int height = (int)0;
HXLINE( 702)		if (hx::IsNull( this->_hx___framebuffer )) {
HXLINE( 704)			this->_hx___framebuffer = ::lime::graphics::opengl::GL_obj::context->createFramebuffer();
HXLINE( 705)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 709)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,this->_hx___framebuffer);
HXLINE( 710)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 712)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 714)			 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 715)			width = texture2D->_hx___width;
HXLINE( 716)			height = texture2D->_hx___height;
HXLINE( 718)			::lime::graphics::opengl::GL_obj::context->framebufferTexture2D((int)36160,(int)36064,(int)3553,texture->_hx___textureID,(int)0);
HXLINE( 719)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE( 721)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 723)				 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 724)				width = rectTexture->_hx___width;
HXLINE( 725)				height = rectTexture->_hx___height;
HXLINE( 727)				::lime::graphics::opengl::GL_obj::context->framebufferTexture2D((int)36160,(int)36064,(int)3553,texture->_hx___textureID,(int)0);
HXLINE( 728)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 730)				if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE( 732)					 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(texture) );
HXLINE( 733)					width = cubeTexture->_hx___size;
HXLINE( 734)					height = cubeTexture->_hx___size;
HXLINE( 736)					{
HXLINE( 736)						int _g = (int)0;
HXDLIN( 736)						while((_g < (int)6)){
HXLINE( 736)							_g = (_g + (int)1);
HXDLIN( 736)							int i = (_g - (int)1);
HXLINE( 738)							{
HXLINE( 738)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 738)								_hx_tmp->framebufferTexture2D((int)36160,(int)36064,((int)34069 + i),texture->_hx___textureID,(int)0);
            							}
HXLINE( 739)							::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            						}
            					}
            				}
            				else {
HXLINE( 745)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Invalid texture",92,3e,59,9a),null()));
            				}
            			}
            		}
HXLINE( 749)		if (enableDepthAndStencil) {
HXLINE( 751)			if (this->_hx___supportsPackedDepthStencil) {
HXLINE( 753)				if (hx::IsNull( this->_hx___depthStencilRenderBuffer )) {
HXLINE( 755)					this->_hx___depthStencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 756)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 760)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 761)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 762)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,::openfl::display3D::Context3D_obj::DEPTH_STENCIL,width,height);
HXLINE( 763)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 765)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)33306,(int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 766)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 770)				if (hx::IsNull( this->_hx___depthRenderBuffer )) {
HXLINE( 772)					this->_hx___depthRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 773)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 777)				if (hx::IsNull( this->_hx___stencilRenderBuffer )) {
HXLINE( 779)					this->_hx___stencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 780)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 784)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthRenderBuffer);
HXLINE( 785)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 786)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)33189,width,height);
HXLINE( 787)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 788)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 789)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 790)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)36168,width,height);
HXLINE( 791)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 793)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36096,(int)36161,this->_hx___depthRenderBuffer);
HXLINE( 794)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 795)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36128,(int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 796)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 800)			::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,null());
HXLINE( 801)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 805)		this->_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 807)		if (this->enableErrorChecking) {
HXLINE( 809)			int code = ::lime::graphics::opengl::GL_obj::context->checkFramebufferStatus((int)36160);
HXLINE( 811)			if ((code != (int)36053)) {
HXLINE( 813)				::haxe::Log_obj::trace(HX_("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",55,db,0b,ac),hx::SourceInfo(HX_("Context3D.hx",7e,2e,cf,45),813,HX_("openfl.display3D.Context3D",a7,bf,a0,2f),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 819)		{
HXLINE( 819)			 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN( 819)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)-1.0));
            		}
HXLINE( 821)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 823)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
HXLINE( 827)		::lime::graphics::opengl::GL_obj::context->frontFace((int)2304);
HXLINE( 828)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 830)		this->_hx___renderToTexture = texture;
HXLINE( 831)		this->_hx___scissorRectangle = null();
HXLINE( 832)		this->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 833)		this->_hx___updateScissorRectangle();
HXLINE( 834)		this->_hx___updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_839_setSamplerStateAt)
HXLINE( 841)		bool _hx_tmp;
HXDLIN( 841)		if ((sampler >= (int)0)) {
HXLINE( 841)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 841)			_hx_tmp = true;
            		}
HXDLIN( 841)		if (_hx_tmp) {
HXLINE( 843)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 847)		 ::openfl::_internal::stage3D::SamplerState state = this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 849)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 853)			state->set_wrapModeS((int)33071);
HXLINE( 854)			state->set_wrapModeT((int)33071);
HXLINE( 851)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 858)			state->set_wrapModeS((int)33071);
HXLINE( 859)			state->set_wrapModeT((int)10497);
HXLINE( 856)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 863)			state->set_wrapModeS((int)10497);
HXLINE( 864)			state->set_wrapModeT((int)10497);
HXLINE( 861)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 868)			state->set_wrapModeS((int)10497);
HXLINE( 869)			state->set_wrapModeT((int)33071);
HXLINE( 866)			goto _hx_goto_33;
            		}
            		/* default */{
HXLINE( 873)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_33:;
HXLINE( 877)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 925)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 927)				Float _hx_tmp1;
HXDLIN( 927)				if ((this->_hx___maxAnisotropyTexture2D < (int)16)) {
HXLINE( 927)					_hx_tmp1 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 927)					_hx_tmp1 = (int)16;
            				}
HXDLIN( 927)				state->set_maxAniso(_hx_tmp1);
            			}
HXLINE( 925)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 901)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 903)				Float _hx_tmp2;
HXDLIN( 903)				if ((this->_hx___maxAnisotropyTexture2D < (int)2)) {
HXLINE( 903)					_hx_tmp2 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 903)					_hx_tmp2 = (int)2;
            				}
HXDLIN( 903)				state->set_maxAniso(_hx_tmp2);
            			}
HXLINE( 901)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 909)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 911)				Float _hx_tmp3;
HXDLIN( 911)				if ((this->_hx___maxAnisotropyTexture2D < (int)4)) {
HXLINE( 911)					_hx_tmp3 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 911)					_hx_tmp3 = (int)4;
            				}
HXDLIN( 911)				state->set_maxAniso(_hx_tmp3);
            			}
HXLINE( 909)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 917)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 919)				Float _hx_tmp4;
HXDLIN( 919)				if ((this->_hx___maxAnisotropyTexture2D < (int)8)) {
HXLINE( 919)					_hx_tmp4 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 919)					_hx_tmp4 = (int)8;
            				}
HXDLIN( 919)				state->set_maxAniso(_hx_tmp4);
            			}
HXLINE( 917)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 881)			state->set_magFilter((int)9729);
HXLINE( 883)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 885)				state->set_maxAniso((int)1);
            			}
HXLINE( 879)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 891)			state->set_magFilter((int)9728);
HXLINE( 893)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 895)				state->set_maxAniso((int)1);
            			}
HXLINE( 889)			goto _hx_goto_34;
            		}
            		/* default */{
HXLINE( 933)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_34:;
HXLINE( 937)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 941)			int _hx_tmp5;
HXDLIN( 941)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 941)				_hx_tmp5 = (int)9986;
            			}
            			else {
HXLINE( 941)				_hx_tmp5 = (int)9987;
            			}
HXDLIN( 941)			state->set_minFilter(_hx_tmp5);
HXDLIN( 941)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 945)			int _hx_tmp6;
HXDLIN( 945)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 945)				_hx_tmp6 = (int)9984;
            			}
            			else {
HXLINE( 945)				_hx_tmp6 = (int)9985;
            			}
HXDLIN( 945)			state->set_minFilter(_hx_tmp6);
HXDLIN( 945)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 949)			int _hx_tmp7;
HXDLIN( 949)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 949)				_hx_tmp7 = (int)9728;
            			}
            			else {
HXLINE( 949)				_hx_tmp7 = (int)9729;
            			}
HXDLIN( 949)			state->set_minFilter(_hx_tmp7);
HXDLIN( 949)			goto _hx_goto_35;
            		}
            		/* default */{
HXLINE( 953)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_35:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_960_setScissorRectangle)
HXLINE( 962)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 962)		if (hx::IsNotNull( rectangle )) {
HXLINE( 962)			_hx_tmp = rectangle->clone();
            		}
            		else {
HXLINE( 962)			_hx_tmp = null();
            		}
HXDLIN( 962)		this->_hx___scissorRectangle = _hx_tmp;
HXLINE( 963)		this->_hx___updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_968_setStencilActions)
HXLINE( 970)		this->_hx___stencilCompareMode = compareMode;
HXLINE( 971)		{
HXLINE( 971)			int fail = this->_hx___getGLStencilAction(actionOnDepthFail);
HXDLIN( 971)			int zfail = this->_hx___getGLStencilAction(actionOnDepthPassStencilFail);
HXDLIN( 971)			int zpass = this->_hx___getGLStencilAction(actionOnBothPass);
HXDLIN( 971)			::lime::graphics::opengl::GL_obj::context->stencilOp(fail,zfail,zpass);
            		}
HXLINE( 972)		{
HXLINE( 972)			int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 972)			::lime::graphics::opengl::GL_obj::context->stencilFunc(func,this->_hx___stencilRef,this->_hx___stencilReadMask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_977_setStencilReferenceValue)
HXLINE( 979)		this->_hx___stencilReadMask = readMask;
HXLINE( 980)		this->_hx___stencilRef = referenceValue;
HXLINE( 982)		{
HXLINE( 982)			int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 982)			::lime::graphics::opengl::GL_obj::context->stencilFunc(func,this->_hx___stencilRef,this->_hx___stencilReadMask);
            		}
HXLINE( 983)		::lime::graphics::opengl::GL_obj::context->stencilMask(writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_990_setTextureAt)
HXLINE( 990)		if (hx::IsNotEq( this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >(),texture )) {
HXLINE( 992)			this->_hx___samplerTextures->set(sampler,texture).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 993)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 993)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)((int)(int)1 << (int)sampler));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1002_setVertexBufferAt)
HXLINE(1004)		if (hx::IsNull( buffer )) {
HXLINE(1006)			::lime::graphics::opengl::GL_obj::context->disableVertexAttribArray(index);
HXLINE(1007)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1009)			::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,null());
HXLINE(1010)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1012)			return;
            		}
HXLINE(1016)		::lime::graphics::opengl::GL_obj::context->enableVertexAttribArray(index);
HXLINE(1017)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1019)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,buffer->_hx___id);
HXLINE(1020)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1022)		int byteOffset = (bufferOffset * (int)4);
HXLINE(1024)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1028)			{
HXLINE(1028)				int stride = buffer->_hx___stride;
HXDLIN(1028)				Float offset = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset);
HXDLIN(1028)				::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5121,true,stride,offset);
            			}
HXLINE(1029)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1026)			goto _hx_goto_41;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1048)			{
HXLINE(1048)				int stride1 = buffer->_hx___stride;
HXDLIN(1048)				Float offset1 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset);
HXDLIN(1048)				::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)1,(int)5126,false,stride1,offset1);
            			}
HXLINE(1049)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1046)			goto _hx_goto_41;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1043)			{
HXLINE(1043)				int stride2 = buffer->_hx___stride;
HXDLIN(1043)				Float offset2 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset);
HXDLIN(1043)				::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)2,(int)5126,false,stride2,offset2);
            			}
HXLINE(1044)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1041)			goto _hx_goto_41;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1038)			{
HXLINE(1038)				int stride3 = buffer->_hx___stride;
HXDLIN(1038)				Float offset3 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset);
HXDLIN(1038)				::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)3,(int)5126,false,stride3,offset3);
            			}
HXLINE(1039)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1036)			goto _hx_goto_41;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1033)			{
HXLINE(1033)				int stride4 = buffer->_hx___stride;
HXDLIN(1033)				Float offset4 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset);
HXDLIN(1033)				::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5126,false,stride4,offset4);
            			}
HXLINE(1034)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1031)			goto _hx_goto_41;
            		}
            		/* default */{
HXLINE(1053)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_41:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___flushSamplerState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1060___flushSamplerState)
HXLINE(1062)		int sampler = (int)0;
HXLINE(1064)		while((this->_hx___samplerDirty != (int)0)){
HXLINE(1066)			int _hx_tmp = this->_hx___samplerDirty;
HXDLIN(1066)			if ((((int)_hx_tmp & (int)((int)(int)1 << (int)sampler)) != (int)0)) {
HXLINE(1068)				if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler)) {
HXLINE(1070)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp1 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(1070)					_hx_tmp1->activeTexture(((int)33984 + sampler));
HXLINE(1071)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1075)				 ::openfl::display3D::textures::TextureBase texture = this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(1077)				if (hx::IsNotNull( texture )) {
HXLINE(1079)					int target = texture->_hx___textureTarget;
HXLINE(1081)					{
HXLINE(1081)						 ::lime::graphics::opengl::GLObject texture1 = texture->_hx___getTexture();
HXDLIN(1081)						::lime::graphics::opengl::GL_obj::context->bindTexture(target,texture1);
            					}
HXLINE(1082)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1084)					texture->_hx___setSamplerState(this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            				else {
HXLINE(1088)					::lime::graphics::opengl::GL_obj::context->bindTexture((int)3553,null());
HXLINE(1089)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1093)				 ::openfl::display3D::Context3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1093)				_hx_tmp2->_hx___samplerDirty = ((int)_hx_tmp2->_hx___samplerDirty & (int)~(((int)(int)1 << (int)sampler)));
            			}
HXLINE(1097)			sampler = (sampler + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushSamplerState,(void))

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1106___getGLCompareMode)
HXLINE(1106)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1106)			return (int)519;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1106)			return (int)514;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1106)			return (int)516;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1106)			return (int)518;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1106)			return (int)513;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1106)			return (int)515;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1106)			return (int)512;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1106)			return (int)517;
HXDLIN(1106)			goto _hx_goto_45;
            		}
            		/* default */{
HXLINE(1106)			return (int)514;
            		}
            		_hx_goto_45:;
HXDLIN(1106)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1125___getGLStencilAction)
HXLINE(1125)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1125)			return (int)7683;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1125)			return (int)34056;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1125)			return (int)7682;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1125)			return (int)34055;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1125)			return (int)5386;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1125)			return (int)7680;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1125)			return (int)7681;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1125)			return (int)0;
HXDLIN(1125)			goto _hx_goto_47;
            		}
            		/* default */{
HXLINE(1125)			return (int)7680;
            		}
            		_hx_goto_47:;
HXDLIN(1125)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

bool Context3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1144___hasGLExtension)
HXLINE(1144)		return (::lime::graphics::opengl::GL_obj::context->getSupportedExtensions()->indexOf(name,null()) != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___hasGLExtension,return )

void Context3D_obj::_hx___setViewport(int originX,int originY,int width,int height){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1149___setViewport)
HXLINE(1151)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1151)			originY = (originY * (int)-1);
            		}
HXLINE(1153)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height)) {
HXLINE(1155)			::lime::graphics::opengl::GL_obj::context->viewport(originX,originY,width,height);
HXLINE(1156)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,_hx___setViewport,(void))

int Context3D_obj::_hx___statsAdd(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1163___statsAdd)
HXLINE(1165)		{
HXLINE(1165)			int _g = stat;
HXDLIN(1165)			 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1165)			_g1->set(_g,(_g1->get(_g) + value));
            		}
HXLINE(1166)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsAdd,return )

void Context3D_obj::_hx___statsClear(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1173___statsClear)
HXLINE(1173)		this->_hx___stats->set(stat,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsClear,(void))

void Context3D_obj::_hx___statsDecrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1180___statsDecrement)
HXLINE(1180)		int _g = stat;
HXDLIN(1180)		 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1180)		_g1->set(_g,(_g1->get(_g) - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsDecrement,(void))

void Context3D_obj::_hx___statsIncrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1187___statsIncrement)
HXLINE(1187)		int _g = stat;
HXDLIN(1187)		 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1187)		_g1->set(_g,(_g1->get(_g) + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsIncrement,(void))

void Context3D_obj::_hx___statsSendToTelemetry(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1192___statsSendToTelemetry)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___statsSendToTelemetry,(void))

int Context3D_obj::_hx___statsSubtract(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1241___statsSubtract)
HXLINE(1243)		{
HXLINE(1243)			int _g = stat;
HXDLIN(1243)			 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1243)			_g1->set(_g,(_g1->get(_g) - value));
            		}
HXLINE(1244)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsSubtract,return )

void Context3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1248___updateDepthAndStencilState)
HXLINE(1250)		bool depthAndStencil;
HXDLIN(1250)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1250)			depthAndStencil = this->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1250)			depthAndStencil = this->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1252)		if (depthAndStencil) {
HXLINE(1254)			::lime::graphics::opengl::GL_obj::context->enable((int)2929);
HXLINE(1255)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1256)			::lime::graphics::opengl::GL_obj::context->enable((int)2960);
HXLINE(1257)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1261)			::lime::graphics::opengl::GL_obj::context->disable((int)2929);
HXLINE(1262)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1263)			::lime::graphics::opengl::GL_obj::context->disable((int)2960);
HXLINE(1264)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateDepthAndStencilState,(void))

void Context3D_obj::_hx___updateBlendFactors(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1271___updateBlendFactors)
HXLINE(1273)		bool _hx_tmp;
HXDLIN(1273)		if (hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor )) {
HXLINE(1273)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1273)			_hx_tmp = true;
            		}
HXDLIN(1273)		if (_hx_tmp) {
HXLINE(1275)			return;
            		}
HXLINE(1279)		int src = (int)1;
HXLINE(1280)		int dest = (int)0;
HXLINE(1281)		{
HXLINE(1281)			 ::Dynamic _g = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
HXDLIN(1281)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(1286)				src = (int)772;
HXDLIN(1286)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(1287)				src = (int)774;
HXDLIN(1287)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(1283)				src = (int)1;
HXDLIN(1283)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE(1289)				src = (int)773;
HXDLIN(1289)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE(1290)				src = (int)775;
HXDLIN(1290)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE(1288)				src = (int)771;
HXDLIN(1288)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE(1285)				src = (int)770;
HXDLIN(1285)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_0==(int)9) ){
HXLINE(1284)				src = (int)0;
HXDLIN(1284)				goto _hx_goto_58;
            			}
            			/* default */{
HXLINE(1292)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_58:;
            		}
HXLINE(1296)		{
HXLINE(1296)			 ::Dynamic _g1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
HXDLIN(1296)			 ::Dynamic _hx_switch_1 = _g1;
            			if (  (_hx_switch_1==(int)0) ){
HXLINE(1302)				dest = (int)772;
HXDLIN(1302)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)2) ){
HXLINE(1298)				dest = (int)1;
HXDLIN(1298)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)3) ){
HXLINE(1305)				dest = (int)773;
HXDLIN(1305)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)5) ){
HXLINE(1303)				dest = (int)771;
HXDLIN(1303)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)6) ){
HXLINE(1304)				dest = (int)769;
HXDLIN(1304)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)7) ){
HXLINE(1300)				dest = (int)770;
HXDLIN(1300)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)8) ){
HXLINE(1301)				dest = (int)768;
HXDLIN(1301)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_1==(int)9) ){
HXLINE(1299)				dest = (int)0;
HXDLIN(1299)				goto _hx_goto_59;
            			}
            			/* default */{
HXLINE(1307)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_59:;
            		}
HXLINE(1311)		::lime::graphics::opengl::GL_obj::context->enable((int)3042);
HXLINE(1312)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1313)		::lime::graphics::opengl::GL_obj::context->blendFunc(src,dest);
HXLINE(1314)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBlendFactors,(void))

void Context3D_obj::_hx___updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1319___updateScissorRectangle)
HXLINE(1321)		if (hx::IsNull( this->_hx___scissorRectangle )) {
HXLINE(1323)			::lime::graphics::opengl::GL_obj::context->disable((int)3089);
HXLINE(1324)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1325)			return;
            		}
HXLINE(1329)		::lime::graphics::opengl::GL_obj::context->enable((int)3089);
HXLINE(1330)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1332)		int height = (int)0;
HXLINE(1334)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1336)			if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1338)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(this->_hx___renderToTexture) );
HXLINE(1339)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(1341)				if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1343)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___renderToTexture) );
HXLINE(1344)					height = rectTexture->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1350)			height = this->backBufferHeight;
            		}
HXLINE(1354)		{
HXLINE(1354)			int x = ::Std_obj::_hx_int(this->_hx___scissorRectangle->x);
HXLINE(1355)			int y = (height - ::Std_obj::_hx_int(this->_hx___scissorRectangle->y));
HXLINE(1354)			int y1 = ::Std_obj::_hx_int((y - ::Std_obj::_hx_int(this->_hx___scissorRectangle->height)));
HXDLIN(1354)			int width = ::Std_obj::_hx_int(this->_hx___scissorRectangle->width);
HXDLIN(1354)			int height1 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->height);
HXDLIN(1354)			::lime::graphics::opengl::GL_obj::context->scissor(x,y1,width,height1);
            		}
HXLINE(1359)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateScissorRectangle,(void))

void Context3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1364___updateBackbufferViewport)
HXLINE(1366)		if (!(::openfl::display::Stage3D_obj::_hx___active)) {
HXLINE(1368)			::openfl::display::Stage3D_obj::_hx___active = true;
HXLINE(1369)			this->_hx___renderSession->renderer->clear();
            		}
HXLINE(1373)		bool _hx_tmp;
HXDLIN(1373)		bool _hx_tmp1;
HXDLIN(1373)		if (hx::IsNull( this->_hx___renderToTexture )) {
HXLINE(1373)			_hx_tmp1 = (this->backBufferWidth > (int)0);
            		}
            		else {
HXLINE(1373)			_hx_tmp1 = false;
            		}
HXDLIN(1373)		if (_hx_tmp1) {
HXLINE(1373)			_hx_tmp = (this->backBufferHeight > (int)0);
            		}
            		else {
HXLINE(1373)			_hx_tmp = false;
            		}
HXDLIN(1373)		if (_hx_tmp) {
HXLINE(1375)			int _hx_tmp2 = ::Std_obj::_hx_int(this->_hx___stage3D->x);
HXDLIN(1375)			int _hx_tmp3 = ::Std_obj::_hx_int(this->_hx___stage3D->y);
HXDLIN(1375)			this->_hx___setViewport(_hx_tmp2,_hx_tmp3,this->backBufferWidth,this->backBufferHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBackbufferViewport,(void))

bool Context3D_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1384_set_enableErrorChecking)
HXLINE(1384)		return (this->enableErrorChecking = (::openfl::_internal::stage3D::GLUtils_obj::debug = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

bool Context3D_obj::supportsVideoTexture;

int Context3D_obj::MAX_SAMPLERS;

int Context3D_obj::MAX_ATTRIBUTES;

int Context3D_obj::MAX_PROGRAM_REGISTERS;

int Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT;

int Context3D_obj::DEPTH_STENCIL;

 ::openfl::_internal::stage3D::Context3DStateCache Context3D_obj::_hx___stateCache;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage3D,renderSession);
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage3D,renderSession);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_MARK_MEMBER_NAME(_hx___maxAnisotropyCubeTexture,"__maxAnisotropyCubeTexture");
	HX_MARK_MEMBER_NAME(_hx___maxAnisotropyTexture2D,"__maxAnisotropyTexture2D");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___program,"__program");
	HX_MARK_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_MARK_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_MARK_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_MARK_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___stats,"__stats");
	HX_MARK_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_MARK_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_MARK_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_MARK_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_MARK_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___supportsAnisotropicFiltering,"__supportsAnisotropicFiltering");
	HX_MARK_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_VISIT_MEMBER_NAME(_hx___maxAnisotropyCubeTexture,"__maxAnisotropyCubeTexture");
	HX_VISIT_MEMBER_NAME(_hx___maxAnisotropyTexture2D,"__maxAnisotropyTexture2D");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___program,"__program");
	HX_VISIT_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_VISIT_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_VISIT_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_VISIT_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___stats,"__stats");
	HX_VISIT_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_VISIT_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_VISIT_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_VISIT_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_VISIT_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___supportsAnisotropicFiltering,"__supportsAnisotropicFiltering");
	HX_VISIT_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile); }
		if (HX_FIELD_EQ(inName,"__stats") ) { return hx::Val( _hx___stats); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { return hx::Val( _hx___program); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsAdd") ) { return hx::Val( _hx___statsAdd_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { return hx::Val( _hx___frameCount); }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { return hx::Val( _hx___statsCache); }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { return hx::Val( _hx___stencilRef); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsClear") ) { return hx::Val( _hx___statsClear_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { return hx::Val( _hx___setViewport_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory); }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { return hx::Val( _hx___samplerDirty); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale); }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { return hx::Val( _hx___renderSession); }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSubtract") ) { return hx::Val( _hx___statsSubtract_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { return hx::Val( _hx___hasGLExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsDecrement") ) { return hx::Val( _hx___statsDecrement_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsIncrement") ) { return hx::Val( _hx___statsIncrement_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { return hx::Val( _hx___renderToTexture); }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { return hx::Val( _hx___samplerTextures); }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { return hx::Val( _hx___stencilReadMask); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn()); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth); }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { return hx::Val( _hx___scissorRectangle); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createVideoTexture") ) { return hx::Val( createVideoTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { return hx::Val( enableErrorChecking); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight); }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { return hx::Val( _hx___depthRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn()); }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { return hx::Val( _hx___flushSamplerState_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { return hx::Val( _hx___rttDepthAndStencil); }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { return hx::Val( _hx___stencilCompareMode); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { return hx::Val( _hx___updateBlendFactors_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias); }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { return hx::Val( _hx___stencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSendToTelemetry") ) { return hx::Val( _hx___statsSendToTelemetry_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__maxAnisotropyTexture2D") ) { return hx::Val( _hx___maxAnisotropyTexture2D); }
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { return hx::Val( _hx___updateScissorRectangle_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { return hx::Val( _hx___depthStencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__maxAnisotropyCubeTexture") ) { return hx::Val( _hx___maxAnisotropyCubeTexture); }
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { return hx::Val( _hx___updateBackbufferViewport_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { return hx::Val( _hx___supportsPackedDepthStencil); }
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { return hx::Val( _hx___updateDepthAndStencilState_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__supportsAnisotropicFiltering") ) { return hx::Val( _hx___supportsAnisotropicFiltering); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { return hx::Val( _hx___backBufferEnableDepthAndStencil); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { outValue = _hx___stateCache; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { outValue = DEPTH_STENCIL; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = supportsVideoTexture; return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = TEXTURE_MAX_ANISOTROPY_EXT; return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stats") ) { _hx___stats=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { _hx___program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { _hx___frameCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { _hx___statsCache=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { _hx___stencilRef=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { _hx___samplerDirty=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { _hx___renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { _hx___renderToTexture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { _hx___samplerTextures=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { _hx___stencilReadMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue) );enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { _hx___depthRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { _hx___rttDepthAndStencil=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { _hx___stencilCompareMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { _hx___stencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__maxAnisotropyTexture2D") ) { _hx___maxAnisotropyTexture2D=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { _hx___depthStencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maxAnisotropyCubeTexture") ) { _hx___maxAnisotropyCubeTexture=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { _hx___supportsPackedDepthStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__supportsAnisotropicFiltering") ) { _hx___supportsAnisotropicFiltering=inValue.Cast< bool >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { _hx___backBufferEnableDepthAndStencil=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { _hx___stateCache=ioValue.Cast<  ::openfl::_internal::stage3D::Context3DStateCache >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { DEPTH_STENCIL=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< bool >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"));
	outFields->push(HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"));
	outFields->push(HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"));
	outFields->push(HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"));
	outFields->push(HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"));
	outFields->push(HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"));
	outFields->push(HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"));
	outFields->push(HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14"));
	outFields->push(HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"));
	outFields->push(HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"));
	outFields->push(HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"));
	outFields->push(HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"));
	outFields->push(HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"));
	outFields->push(HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	outFields->push(HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"));
	outFields->push(HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"));
	outFields->push(HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"));
	outFields->push(HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"));
	outFields->push(HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"));
	outFields->push(HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"));
	outFields->push(HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"));
	outFields->push(HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"));
	outFields->push(HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66"));
	outFields->push(HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"));
	outFields->push(HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c")},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsBool,(int)offsetof(Context3D_obj,enableErrorChecking),HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,profile),HX_HCSTRING("profile","\x29","\x49","\x49","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferEnableDepthAndStencil),HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Context3D_obj,_hx___depthRenderBuffer),HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Context3D_obj,_hx___depthStencilRenderBuffer),HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Context3D_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___frameCount),HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___maxAnisotropyCubeTexture),HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___maxAnisotropyTexture2D),HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,_hx___program),HX_HCSTRING("__program","\x64","\x9b","\x47","\x75")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(Context3D_obj,_hx___renderSession),HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17")},
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(Context3D_obj,_hx___renderToTexture),HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___rttDepthAndStencil),HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___samplerDirty),HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Context3D_obj,_hx___samplerTextures),HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,_hx___scissorRectangle),HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77")},
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___stats),HX_HCSTRING("__stats","\xff","\xce","\x69","\xee")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___statsCache),HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,_hx___stencilCompareMode),HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilRef),HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilReadMask),HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Context3D_obj,_hx___stencilRenderBuffer),HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsAnisotropicFiltering),HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsPackedDepthStencil),HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_SAMPLERS,HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_ATTRIBUTES,HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_PROGRAM_REGISTERS,HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f")},
	{hx::fsInt,(void *) &Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51")},
	{hx::fsInt,(void *) &Context3D_obj::DEPTH_STENCIL,HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b")},
	{hx::fsObject /*::openfl::_internal::stage3D::Context3DStateCache*/ ,(void *) &Context3D_obj::_hx___stateCache,HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"),
	HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"),
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"),
	HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"),
	HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"),
	HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"),
	HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"),
	HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"),
	HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"),
	HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"),
	HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"),
	HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"),
	HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"),
	HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14"),
	HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"),
	HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"),
	HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"),
	HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"),
	HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"),
	HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"),
	HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"),
	HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"),
	HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"),
	HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"),
	HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"),
	HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"),
	HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"),
	HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66"),
	HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"),
	HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("createVideoTexture","\xbc","\x6e","\xfb","\xb2"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__statsAdd","\x62","\x04","\xea","\x0b"),
	HX_HCSTRING("__statsClear","\x0e","\x56","\xd5","\x89"),
	HX_HCSTRING("__statsDecrement","\x14","\xaf","\x6e","\xa5"),
	HX_HCSTRING("__statsIncrement","\x30","\xbf","\xeb","\xc6"),
	HX_HCSTRING("__statsSendToTelemetry","\xd7","\xb8","\x7e","\x01"),
	HX_HCSTRING("__statsSubtract","\x33","\x97","\x22","\x32"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(Context3D_obj::DEPTH_STENCIL,"DEPTH_STENCIL");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(Context3D_obj::DEPTH_STENCIL,"DEPTH_STENCIL");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67"),
	HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06"),
	HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39"),
	HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f"),
	HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51"),
	HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b"),
	HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Object *dummy = new Context3D_obj;
	Context3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_53_boot)
HXLINE(  53)		supportsVideoTexture = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_55_boot)
HXLINE(  55)		MAX_SAMPLERS = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_56_boot)
HXLINE(  56)		MAX_ATTRIBUTES = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_57_boot)
HXLINE(  57)		MAX_PROGRAM_REGISTERS = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_59_boot)
HXLINE(  59)		TEXTURE_MAX_ANISOTROPY_EXT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_60_boot)
HXLINE(  60)		DEPTH_STENCIL = (int)0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_62_boot)
HXLINE(  62)		_hx___stateCache =  ::openfl::_internal::stage3D::Context3DStateCache_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace display3D
