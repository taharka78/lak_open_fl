// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Program3D_Uniform
#include <openfl/display3D/_Program3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D__Program3D_UniformMap
#include <openfl/display3D/_Program3D/UniformMap.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_536f681b10c755a2_49_new,"openfl.display3D.Program3D","new",0xcbd1926e,"openfl.display3D.Program3D.new","openfl/display3D/Program3D.hx",49,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_67_dispose,"openfl.display3D.Program3D","dispose",0x556f61ad,"openfl.display3D.Program3D.dispose","openfl/display3D/Program3D.hx",67,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_72_upload,"openfl.display3D.Program3D","upload",0x91a244b3,"openfl.display3D.Program3D.upload","openfl/display3D/Program3D.hx",72,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_91___buildUniformList,"openfl.display3D.Program3D","__buildUniformList",0x0fafd3f6,"openfl.display3D.Program3D.__buildUniformList","openfl/display3D/Program3D.hx",91,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_192___deleteShaders,"openfl.display3D.Program3D","__deleteShaders",0x8861ecb1,"openfl.display3D.Program3D.__deleteShaders","openfl/display3D/Program3D.hx",192,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_229___flush,"openfl.display3D.Program3D","__flush",0x071c9cb2,"openfl.display3D.Program3D.__flush","openfl/display3D/Program3D.hx",229,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_239___getSamplerState,"openfl.display3D.Program3D","__getSamplerState",0x4314690d,"openfl.display3D.Program3D.__getSamplerState","openfl/display3D/Program3D.hx",239,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_246___markDirty,"openfl.display3D.Program3D","__markDirty",0xf012f9b3,"openfl.display3D.Program3D.__markDirty","openfl/display3D/Program3D.hx",246,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_261___setPositionScale,"openfl.display3D.Program3D","__setPositionScale",0x1baf80f1,"openfl.display3D.Program3D.__setPositionScale","openfl/display3D/Program3D.hx",261,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_273___setSamplerState,"openfl.display3D.Program3D","__setSamplerState",0x3edfe619,"openfl.display3D.Program3D.__setSamplerState","openfl/display3D/Program3D.hx",273,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_278___uploadFromGLSL,"openfl.display3D.Program3D","__uploadFromGLSL",0x163cc3db,"openfl.display3D.Program3D.__uploadFromGLSL","openfl/display3D/Program3D.hx",278,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_378___use,"openfl.display3D.Program3D","__use",0xea326eb5,"openfl.display3D.Program3D.__use","openfl/display3D/Program3D.hx",378,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_30_boot,"openfl.display3D.Program3D","boot",0x83a78e64,"openfl.display3D.Program3D.boot","openfl/display3D/Program3D.hx",30,0x0a985b04)
namespace openfl{
namespace display3D{

void Program3D_obj::__construct( ::openfl::display3D::Context3D context3D){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_49_new)
HXLINE(  51)		this->_hx___context = context3D;
HXLINE(  53)		this->_hx___memUsage = (int)0;
HXLINE(  54)		this->_hx___samplerUsageMask = (int)0;
HXLINE(  56)		this->_hx___uniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  57)		this->_hx___samplerUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  58)		this->_hx___alphaSamplerUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  60)		bool fixed = null();
HXDLIN(  60)		this->_hx___samplerStates =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null());
            	}

Dynamic Program3D_obj::__CreateEmpty() { return new Program3D_obj; }

void *Program3D_obj::_hx_vtable = 0;

Dynamic Program3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Program3D_obj > _hx_result = new Program3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Program3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28394b12;
}

void Program3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_67_dispose)
HXLINE(  67)		this->_hx___deleteShaders();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,dispose,(void))

void Program3D_obj::upload( ::openfl::utils::ByteArrayData vertexProgram, ::openfl::utils::ByteArrayData fragmentProgram){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_72_upload)
HXLINE(  75)		::Array< ::Dynamic> samplerStates = ::Array_obj< ::Dynamic>::__new();
HXLINE(  77)		::String glslVertex = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(vertexProgram,null());
HXLINE(  78)		::String glslFragment = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(fragmentProgram,samplerStates);
HXLINE(  80)		this->_hx___uploadFromGLSL(glslVertex,glslFragment);
HXLINE(  82)		{
HXLINE(  82)			int _g1 = (int)0;
HXDLIN(  82)			int _g = samplerStates->length;
HXDLIN(  82)			while((_g1 < _g)){
HXLINE(  82)				_g1 = (_g1 + (int)1);
HXDLIN(  82)				int i = (_g1 - (int)1);
HXLINE(  84)				this->_hx___setSamplerState(i,samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,upload,(void))

void Program3D_obj::_hx___buildUniformList(){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_91___buildUniformList)
HXLINE(  93)		this->_hx___uniforms->clear();
HXLINE(  94)		this->_hx___samplerUniforms->clear();
HXLINE(  95)		this->_hx___alphaSamplerUniforms->clear();
HXLINE(  97)		this->_hx___samplerUsageMask = (int)0;
HXLINE(  99)		int numActive = (int)0;
HXLINE( 100)		numActive = ( (int)(::lime::graphics::opengl::GL_obj::context->getProgramParameter(this->_hx___programID,(int)35718)) );
HXLINE( 101)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 103)		 ::List vertexUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 104)		 ::List fragmentUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 106)		{
HXLINE( 106)			int _g1 = (int)0;
HXDLIN( 106)			int _g = numActive;
HXDLIN( 106)			while((_g1 < _g)){
HXLINE( 106)				_g1 = (_g1 + (int)1);
HXDLIN( 106)				int i = (_g1 - (int)1);
HXLINE( 108)				 ::Dynamic info = ::lime::graphics::opengl::GL_obj::context->getActiveUniform(this->_hx___programID,i);
HXLINE( 109)				::String name = ( (::String)(info->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 110)				int size = ( (int)(info->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
HXLINE( 111)				int uniformType = ( (int)(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 112)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 114)				 ::openfl::display3D::_Program3D::Uniform uniform =  ::openfl::display3D::_Program3D::Uniform_obj::__alloc( HX_CTX );
HXLINE( 115)				uniform->name = name;
HXLINE( 116)				uniform->size = size;
HXLINE( 117)				uniform->type = uniformType;
HXLINE( 119)				uniform->location = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->_hx___programID,uniform->name);
HXLINE( 120)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 122)				int indexBracket = uniform->name.indexOf(HX_("[",5b,00,00,00),null());
HXLINE( 124)				if ((indexBracket >= (int)0)) {
HXLINE( 126)					uniform->name = uniform->name.substring((int)0,indexBracket);
            				}
HXLINE( 130)				{
HXLINE( 130)					int _g2 = uniform->type;
HXDLIN( 130)					switch((int)(_g2)){
            						case (int)35674: {
HXLINE( 132)							uniform->regCount = (int)2;
            						}
            						break;
            						case (int)35675: {
HXLINE( 133)							uniform->regCount = (int)3;
            						}
            						break;
            						case (int)35676: {
HXLINE( 134)							uniform->regCount = (int)4;
            						}
            						break;
            						default:{
HXLINE( 135)							uniform->regCount = (int)1;
            						}
            					}
            				}
HXLINE( 139)				 ::openfl::display3D::_Program3D::Uniform uniform1 = uniform;
HXDLIN( 139)				uniform1->regCount = (uniform1->regCount * uniform->size);
HXLINE( 141)				this->_hx___uniforms->add(uniform);
HXLINE( 143)				if ((uniform->name == HX_("vcPositionScale",b4,c9,c0,1f))) {
HXLINE( 145)					this->_hx___positionScale = uniform;
            				}
            				else {
HXLINE( 147)					if (::StringTools_obj::startsWith(uniform->name,HX_("vc",2d,67,00,00))) {
HXLINE( 149)						uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 150)						uniform->regData = this->_hx___context->_hx___vertexConstants;
HXLINE( 151)						vertexUniforms->add(uniform);
            					}
            					else {
HXLINE( 153)						if (::StringTools_obj::startsWith(uniform->name,HX_("fc",3d,59,00,00))) {
HXLINE( 155)							uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 156)							uniform->regData = this->_hx___context->_hx___fragmentConstants;
HXLINE( 157)							fragmentUniforms->add(uniform);
            						}
            						else {
HXLINE( 159)							bool _hx_tmp;
HXDLIN( 159)							if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 159)								_hx_tmp = !(::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d)));
            							}
            							else {
HXLINE( 159)								_hx_tmp = false;
            							}
HXDLIN( 159)							if (_hx_tmp) {
HXLINE( 161)								uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 162)								this->_hx___samplerUniforms->add(uniform);
HXLINE( 164)								{
HXLINE( 164)									int _g4 = (int)0;
HXDLIN( 164)									int _g3 = uniform->regCount;
HXDLIN( 164)									while((_g4 < _g3)){
HXLINE( 164)										_g4 = (_g4 + (int)1);
HXDLIN( 164)										int reg = (_g4 - (int)1);
HXLINE( 166)										 ::openfl::display3D::Program3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 166)										_hx_tmp1->_hx___samplerUsageMask = ((int)_hx_tmp1->_hx___samplerUsageMask | (int)((int)(int)1 << (int)(uniform->regIndex + reg)));
            									}
            								}
            							}
            							else {
HXLINE( 170)								bool _hx_tmp2;
HXDLIN( 170)								if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 170)									_hx_tmp2 = ::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d));
            								}
            								else {
HXLINE( 170)									_hx_tmp2 = false;
            								}
HXDLIN( 170)								if (_hx_tmp2) {
HXLINE( 172)									int len = (uniform->name.indexOf(HX_("_",5f,00,00,00),null()) - (int)7);
HXLINE( 173)									::String uniform2 = uniform->name;
HXDLIN( 173)									uniform->regIndex = (::Std_obj::parseInt(uniform2.substring((int)7,((int)7 + len))) + (int)4);
HXLINE( 174)									this->_hx___alphaSamplerUniforms->add(uniform);
            								}
            							}
            						}
            					}
            				}
HXLINE( 178)				if (::openfl::display3D::Program3D_obj::verbose) {
HXLINE( 180)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 180)					_hx_tmp3((((((((((HX_("",00,00,00,00) + i) + HX_(" name:",6f,1b,f0,61)) + uniform->name) + HX_(" type:",20,fc,36,e6)) + uniform->type) + HX_(" size:",39,94,44,48)) + uniform->size) + HX_(" location:",45,fc,a8,c1)) + uniform->location),hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),180,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__buildUniformList",44,16,c1,02)));
            				}
            			}
            		}
HXLINE( 186)		this->_hx___vertexUniformMap =  ::openfl::display3D::_Program3D::UniformMap_obj::__alloc( HX_CTX ,::Lambda_obj::array(vertexUniforms));
HXLINE( 187)		this->_hx___fragmentUniformMap =  ::openfl::display3D::_Program3D::UniformMap_obj::__alloc( HX_CTX ,::Lambda_obj::array(fragmentUniforms));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___buildUniformList,(void))

void Program3D_obj::_hx___deleteShaders(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_192___deleteShaders)
HXLINE( 194)		if (hx::IsNotNull( this->_hx___programID )) {
HXLINE( 198)			this->_hx___programID = null();
            		}
HXLINE( 202)		if (hx::IsNotNull( this->_hx___vertexShaderID )) {
HXLINE( 204)			::lime::graphics::opengl::GL_obj::context->deleteShader(this->_hx___vertexShaderID);
HXLINE( 205)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 206)			this->_hx___vertexShaderID = null();
            		}
HXLINE( 210)		if (hx::IsNotNull( this->_hx___fragmentShaderID )) {
HXLINE( 212)			::lime::graphics::opengl::GL_obj::context->deleteShader(this->_hx___fragmentShaderID);
HXLINE( 213)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 214)			this->_hx___fragmentShaderID = null();
            		}
HXLINE( 218)		if ((this->_hx___memUsage != (int)0)) {
HXLINE( 220)			this->_hx___context->_hx___statsDecrement((int)5);
HXLINE( 221)			this->_hx___context->_hx___statsSubtract((int)10,this->_hx___memUsage);
HXLINE( 222)			this->_hx___memUsage = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___deleteShaders,(void))

void Program3D_obj::_hx___flush(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_229___flush)
HXLINE( 231)		this->_hx___vertexUniformMap->flush();
HXLINE( 232)		this->_hx___fragmentUniformMap->flush();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___flush,(void))

 ::openfl::_internal::stage3D::SamplerState Program3D_obj::_hx___getSamplerState(int sampler){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_239___getSamplerState)
HXLINE( 239)		return this->_hx___samplerStates->get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,_hx___getSamplerState,return )

void Program3D_obj::_hx___markDirty(bool isVertex,int index,int count){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_246___markDirty)
HXLINE( 246)		if (isVertex) {
HXLINE( 248)			this->_hx___vertexUniformMap->markDirty(index,count);
            		}
            		else {
HXLINE( 252)			this->_hx___fragmentUniformMap->markDirty(index,count);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Program3D_obj,_hx___markDirty,(void))

void Program3D_obj::_hx___setPositionScale( ::lime::utils::ArrayBufferView positionScale){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_261___setPositionScale)
HXLINE( 261)		if (hx::IsNotNull( this->_hx___positionScale )) {
HXLINE( 263)			{
HXLINE( 263)				int location = this->_hx___positionScale->location;
HXDLIN( 263)				Float v = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(positionScale);
HXDLIN( 263)				::lime::graphics::opengl::GL_obj::context->uniform4fv(location,(int)1,v);
            			}
HXLINE( 264)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,_hx___setPositionScale,(void))

void Program3D_obj::_hx___setSamplerState(int sampler, ::openfl::_internal::stage3D::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_273___setSamplerState)
HXLINE( 273)		this->_hx___samplerStates->set(sampler,state).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,_hx___setSamplerState,(void))

void Program3D_obj::_hx___uploadFromGLSL(::String vertexShaderSource,::String fragmentShaderSource){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_278___uploadFromGLSL)
HXLINE( 280)		this->_hx___deleteShaders();
HXLINE( 282)		if (::openfl::display3D::Program3D_obj::verbose) {
HXLINE( 284)			::lime::utils::Log_obj::info(vertexShaderSource,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),284,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
HXLINE( 285)			::lime::utils::Log_obj::info(fragmentShaderSource,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),285,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 289)		this->_hx___vertexSource = vertexShaderSource;
HXLINE( 290)		this->_hx___fragmentSource = fragmentShaderSource;
HXLINE( 292)		this->_hx___vertexShaderID = ::lime::graphics::opengl::GL_obj::context->createShader((int)35633);
HXLINE( 293)		::lime::graphics::opengl::GL_obj::context->shaderSource(this->_hx___vertexShaderID,vertexShaderSource);
HXLINE( 294)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 296)		::lime::graphics::opengl::GL_obj::context->compileShader(this->_hx___vertexShaderID);
HXLINE( 297)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 299)		int shaderCompiled = ( (int)(::lime::graphics::opengl::GL_obj::context->getShaderParameter(this->_hx___vertexShaderID,(int)35713)) );
HXLINE( 301)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 303)		if ((shaderCompiled == (int)0)) {
HXLINE( 305)			::String vertexInfoLog = ::lime::graphics::opengl::GL_obj::context->getShaderInfoLog(this->_hx___vertexShaderID);
HXLINE( 307)			bool _hx_tmp;
HXDLIN( 307)			if (hx::IsNotNull( vertexInfoLog )) {
HXLINE( 307)				_hx_tmp = (vertexInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 307)				_hx_tmp = false;
            			}
HXDLIN( 307)			if (_hx_tmp) {
HXLINE( 309)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 309)				_hx_tmp1((HX_("vertex: ",0a,af,80,67) + vertexInfoLog),hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),309,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 313)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling vertex shader: ",1f,7c,b1,3d) + vertexInfoLog),null()));
            		}
HXLINE( 317)		this->_hx___fragmentShaderID = ::lime::graphics::opengl::GL_obj::context->createShader((int)35632);
HXLINE( 318)		::lime::graphics::opengl::GL_obj::context->shaderSource(this->_hx___fragmentShaderID,fragmentShaderSource);
HXLINE( 319)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 321)		::lime::graphics::opengl::GL_obj::context->compileShader(this->_hx___fragmentShaderID);
HXLINE( 322)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 324)		int fragmentCompiled = ( (int)(::lime::graphics::opengl::GL_obj::context->getShaderParameter(this->_hx___fragmentShaderID,(int)35713)) );
HXLINE( 326)		if ((fragmentCompiled == (int)0)) {
HXLINE( 328)			::String fragmentInfoLog = ::lime::graphics::opengl::GL_obj::context->getShaderInfoLog(this->_hx___fragmentShaderID);
HXLINE( 330)			bool _hx_tmp2;
HXDLIN( 330)			if (hx::IsNotNull( fragmentInfoLog )) {
HXLINE( 330)				_hx_tmp2 = (fragmentInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 330)				_hx_tmp2 = false;
            			}
HXDLIN( 330)			if (_hx_tmp2) {
HXLINE( 332)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 332)				_hx_tmp3((HX_("fragment: ",76,26,d9,f9) + fragmentInfoLog),hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),332,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 336)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling fragment shader: ",33,70,4d,6d) + fragmentInfoLog),null()));
            		}
HXLINE( 340)		this->_hx___programID = ::lime::graphics::opengl::GL_obj::context->createProgram();
HXLINE( 341)		::lime::graphics::opengl::GL_obj::context->attachShader(this->_hx___programID,this->_hx___vertexShaderID);
HXLINE( 342)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 344)		::lime::graphics::opengl::GL_obj::context->attachShader(this->_hx___programID,this->_hx___fragmentShaderID);
HXLINE( 345)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 347)		{
HXLINE( 347)			int _g = (int)0;
HXDLIN( 347)			while((_g < (int)16)){
HXLINE( 347)				_g = (_g + (int)1);
HXDLIN( 347)				int i = (_g - (int)1);
HXLINE( 349)				::String name = (HX_("va",2b,67,00,00) + i);
HXLINE( 351)				if ((vertexShaderSource.indexOf((HX_(" ",20,00,00,00) + name),null()) != (int)-1)) {
HXLINE( 353)					::lime::graphics::opengl::GL_obj::context->bindAttribLocation(this->_hx___programID,i,name);
            				}
            			}
            		}
HXLINE( 359)		::lime::graphics::opengl::GL_obj::context->linkProgram(this->_hx___programID);
HXLINE( 361)		::String infoLog = ::lime::graphics::opengl::GL_obj::context->getProgramInfoLog(this->_hx___programID);
HXLINE( 363)		bool _hx_tmp4;
HXDLIN( 363)		if (hx::IsNotNull( infoLog )) {
HXLINE( 363)			_hx_tmp4 = (infoLog.length != (int)0);
            		}
            		else {
HXLINE( 363)			_hx_tmp4 = false;
            		}
HXDLIN( 363)		if (_hx_tmp4) {
HXLINE( 365)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 365)			_hx_tmp5((HX_("program: ",2a,26,c4,dc) + infoLog),hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),365,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 369)		this->_hx___buildUniformList();
HXLINE( 371)		this->_hx___memUsage = (int)1;
HXLINE( 372)		this->_hx___context->_hx___statsIncrement((int)5);
HXLINE( 373)		this->_hx___context->_hx___statsAdd((int)10,this->_hx___memUsage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,_hx___uploadFromGLSL,(void))

void Program3D_obj::_hx___use(){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_378___use)
HXLINE( 380)		{
HXLINE( 380)			 ::lime::graphics::opengl::GLObject program = this->_hx___programID;
HXDLIN( 380)			::lime::graphics::opengl::GL_obj::_hx___currentProgram = program;
HXDLIN( 380)			::lime::graphics::opengl::GL_obj::context->useProgram(program);
            		}
HXLINE( 381)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 383)		this->_hx___vertexUniformMap->markAllDirty();
HXLINE( 384)		this->_hx___fragmentUniformMap->markAllDirty();
HXLINE( 386)		{
HXLINE( 386)			 ::_List::ListNode _g_head = this->_hx___samplerUniforms->h;
HXDLIN( 386)			while(hx::IsNotNull( _g_head )){
HXLINE( 386)				 ::openfl::display3D::_Program3D::Uniform val = ( ( ::openfl::display3D::_Program3D::Uniform)(_g_head->item) );
HXDLIN( 386)				_g_head = _g_head->next;
HXDLIN( 386)				 ::openfl::display3D::_Program3D::Uniform sampler = val;
HXLINE( 388)				if ((sampler->regCount == (int)1)) {
HXLINE( 390)					::lime::graphics::opengl::GL_obj::context->uniform1i(sampler->location,sampler->regIndex);
HXLINE( 391)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 395)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
HXLINE( 409)		{
HXLINE( 409)			 ::_List::ListNode _g_head1 = this->_hx___alphaSamplerUniforms->h;
HXDLIN( 409)			while(hx::IsNotNull( _g_head1 )){
HXLINE( 409)				 ::openfl::display3D::_Program3D::Uniform val1 = ( ( ::openfl::display3D::_Program3D::Uniform)(_g_head1->item) );
HXDLIN( 409)				_g_head1 = _g_head1->next;
HXDLIN( 409)				 ::openfl::display3D::_Program3D::Uniform sampler1 = val1;
HXLINE( 411)				if ((sampler1->regCount == (int)1)) {
HXLINE( 413)					::lime::graphics::opengl::GL_obj::context->uniform1i(sampler1->location,sampler1->regIndex);
HXLINE( 414)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 418)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___use,(void))

bool Program3D_obj::verbose;


hx::ObjectPtr< Program3D_obj > Program3D_obj::__new( ::openfl::display3D::Context3D context3D) {
	hx::ObjectPtr< Program3D_obj > __this = new Program3D_obj();
	__this->__construct(context3D);
	return __this;
}

hx::ObjectPtr< Program3D_obj > Program3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context3D) {
	Program3D_obj *__this = (Program3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Program3D_obj), true, "openfl.display3D.Program3D"));
	*(void **)__this = Program3D_obj::_hx_vtable;
	__this->__construct(context3D);
	return __this;
}

Program3D_obj::Program3D_obj()
{
}

void Program3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Program3D);
	HX_MARK_MEMBER_NAME(_hx___alphaSamplerUniforms,"__alphaSamplerUniforms");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___fragmentShaderID,"__fragmentShaderID");
	HX_MARK_MEMBER_NAME(_hx___fragmentSource,"__fragmentSource");
	HX_MARK_MEMBER_NAME(_hx___fragmentUniformMap,"__fragmentUniformMap");
	HX_MARK_MEMBER_NAME(_hx___memUsage,"__memUsage");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___programID,"__programID");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_MEMBER_NAME(_hx___samplerUniforms,"__samplerUniforms");
	HX_MARK_MEMBER_NAME(_hx___samplerUsageMask,"__samplerUsageMask");
	HX_MARK_MEMBER_NAME(_hx___uniforms,"__uniforms");
	HX_MARK_MEMBER_NAME(_hx___vertexShaderID,"__vertexShaderID");
	HX_MARK_MEMBER_NAME(_hx___vertexSource,"__vertexSource");
	HX_MARK_MEMBER_NAME(_hx___vertexUniformMap,"__vertexUniformMap");
	HX_MARK_END_CLASS();
}

void Program3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___alphaSamplerUniforms,"__alphaSamplerUniforms");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___fragmentShaderID,"__fragmentShaderID");
	HX_VISIT_MEMBER_NAME(_hx___fragmentSource,"__fragmentSource");
	HX_VISIT_MEMBER_NAME(_hx___fragmentUniformMap,"__fragmentUniformMap");
	HX_VISIT_MEMBER_NAME(_hx___memUsage,"__memUsage");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___programID,"__programID");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_VISIT_MEMBER_NAME(_hx___samplerUniforms,"__samplerUniforms");
	HX_VISIT_MEMBER_NAME(_hx___samplerUsageMask,"__samplerUsageMask");
	HX_VISIT_MEMBER_NAME(_hx___uniforms,"__uniforms");
	HX_VISIT_MEMBER_NAME(_hx___vertexShaderID,"__vertexShaderID");
	HX_VISIT_MEMBER_NAME(_hx___vertexSource,"__vertexSource");
	HX_VISIT_MEMBER_NAME(_hx___vertexUniformMap,"__vertexUniformMap");
}

hx::Val Program3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__use") ) { return hx::Val( _hx___use_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"__flush") ) { return hx::Val( _hx___flush_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__memUsage") ) { return hx::Val( _hx___memUsage); }
		if (HX_FIELD_EQ(inName,"__uniforms") ) { return hx::Val( _hx___uniforms); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__programID") ) { return hx::Val( _hx___programID); }
		if (HX_FIELD_EQ(inName,"__markDirty") ) { return hx::Val( _hx___markDirty_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__vertexSource") ) { return hx::Val( _hx___vertexSource); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale); }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates); }
		if (HX_FIELD_EQ(inName,"__deleteShaders") ) { return hx::Val( _hx___deleteShaders_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__fragmentSource") ) { return hx::Val( _hx___fragmentSource); }
		if (HX_FIELD_EQ(inName,"__vertexShaderID") ) { return hx::Val( _hx___vertexShaderID); }
		if (HX_FIELD_EQ(inName,"__uploadFromGLSL") ) { return hx::Val( _hx___uploadFromGLSL_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__samplerUniforms") ) { return hx::Val( _hx___samplerUniforms); }
		if (HX_FIELD_EQ(inName,"__getSamplerState") ) { return hx::Val( _hx___getSamplerState_dyn()); }
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__fragmentShaderID") ) { return hx::Val( _hx___fragmentShaderID); }
		if (HX_FIELD_EQ(inName,"__samplerUsageMask") ) { return hx::Val( _hx___samplerUsageMask); }
		if (HX_FIELD_EQ(inName,"__vertexUniformMap") ) { return hx::Val( _hx___vertexUniformMap); }
		if (HX_FIELD_EQ(inName,"__buildUniformList") ) { return hx::Val( _hx___buildUniformList_dyn()); }
		if (HX_FIELD_EQ(inName,"__setPositionScale") ) { return hx::Val( _hx___setPositionScale_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__fragmentUniformMap") ) { return hx::Val( _hx___fragmentUniformMap); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__alphaSamplerUniforms") ) { return hx::Val( _hx___alphaSamplerUniforms); }
	}
	return super::__Field(inName,inCallProp);
}

bool Program3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { outValue = verbose; return true; }
	}
	return false;
}

hx::Val Program3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__memUsage") ) { _hx___memUsage=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniforms") ) { _hx___uniforms=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__programID") ) { _hx___programID=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__vertexSource") ) { _hx___vertexSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::openfl::display3D::_Program3D::Uniform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__fragmentSource") ) { _hx___fragmentSource=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexShaderID") ) { _hx___vertexShaderID=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__samplerUniforms") ) { _hx___samplerUniforms=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__fragmentShaderID") ) { _hx___fragmentShaderID=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerUsageMask") ) { _hx___samplerUsageMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexUniformMap") ) { _hx___vertexUniformMap=inValue.Cast<  ::openfl::display3D::_Program3D::UniformMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__fragmentUniformMap") ) { _hx___fragmentUniformMap=inValue.Cast<  ::openfl::display3D::_Program3D::UniformMap >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__alphaSamplerUniforms") ) { _hx___alphaSamplerUniforms=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Program3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Program3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__alphaSamplerUniforms","\x49","\x93","\x09","\xfc"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__fragmentShaderID","\x50","\xd1","\x6e","\x10"));
	outFields->push(HX_HCSTRING("__fragmentSource","\xeb","\xcb","\x2c","\x83"));
	outFields->push(HX_HCSTRING("__fragmentUniformMap","\xd8","\x1c","\x22","\xcd"));
	outFields->push(HX_HCSTRING("__memUsage","\xec","\x05","\xee","\x37"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__programID","\x3f","\x7c","\xf0","\x0a"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	outFields->push(HX_HCSTRING("__samplerUniforms","\xc7","\xc6","\x82","\xb1"));
	outFields->push(HX_HCSTRING("__samplerUsageMask","\xa5","\x3b","\x17","\xfe"));
	outFields->push(HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5"));
	outFields->push(HX_HCSTRING("__vertexShaderID","\xe4","\xf8","\x83","\xef"));
	outFields->push(HX_HCSTRING("__vertexSource","\x7f","\x26","\x07","\xf3"));
	outFields->push(HX_HCSTRING("__vertexUniformMap","\x6c","\x51","\x7f","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Program3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___alphaSamplerUniforms),HX_HCSTRING("__alphaSamplerUniforms","\x49","\x93","\x09","\xfc")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Program3D_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___fragmentShaderID),HX_HCSTRING("__fragmentShaderID","\x50","\xd1","\x6e","\x10")},
	{hx::fsString,(int)offsetof(Program3D_obj,_hx___fragmentSource),HX_HCSTRING("__fragmentSource","\xeb","\xcb","\x2c","\x83")},
	{hx::fsObject /*::openfl::display3D::_Program3D::UniformMap*/ ,(int)offsetof(Program3D_obj,_hx___fragmentUniformMap),HX_HCSTRING("__fragmentUniformMap","\xd8","\x1c","\x22","\xcd")},
	{hx::fsInt,(int)offsetof(Program3D_obj,_hx___memUsage),HX_HCSTRING("__memUsage","\xec","\x05","\xee","\x37")},
	{hx::fsObject /*::openfl::display3D::_Program3D::Uniform*/ ,(int)offsetof(Program3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___programID),HX_HCSTRING("__programID","\x3f","\x7c","\xf0","\x0a")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Program3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___samplerUniforms),HX_HCSTRING("__samplerUniforms","\xc7","\xc6","\x82","\xb1")},
	{hx::fsInt,(int)offsetof(Program3D_obj,_hx___samplerUsageMask),HX_HCSTRING("__samplerUsageMask","\xa5","\x3b","\x17","\xfe")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___uniforms),HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___vertexShaderID),HX_HCSTRING("__vertexShaderID","\xe4","\xf8","\x83","\xef")},
	{hx::fsString,(int)offsetof(Program3D_obj,_hx___vertexSource),HX_HCSTRING("__vertexSource","\x7f","\x26","\x07","\xf3")},
	{hx::fsObject /*::openfl::display3D::_Program3D::UniformMap*/ ,(int)offsetof(Program3D_obj,_hx___vertexUniformMap),HX_HCSTRING("__vertexUniformMap","\x6c","\x51","\x7f","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Program3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Program3D_obj::verbose,HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Program3D_obj_sMemberFields[] = {
	HX_HCSTRING("__alphaSamplerUniforms","\x49","\x93","\x09","\xfc"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__fragmentShaderID","\x50","\xd1","\x6e","\x10"),
	HX_HCSTRING("__fragmentSource","\xeb","\xcb","\x2c","\x83"),
	HX_HCSTRING("__fragmentUniformMap","\xd8","\x1c","\x22","\xcd"),
	HX_HCSTRING("__memUsage","\xec","\x05","\xee","\x37"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__programID","\x3f","\x7c","\xf0","\x0a"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("__samplerUniforms","\xc7","\xc6","\x82","\xb1"),
	HX_HCSTRING("__samplerUsageMask","\xa5","\x3b","\x17","\xfe"),
	HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5"),
	HX_HCSTRING("__vertexShaderID","\xe4","\xf8","\x83","\xef"),
	HX_HCSTRING("__vertexSource","\x7f","\x26","\x07","\xf3"),
	HX_HCSTRING("__vertexUniformMap","\x6c","\x51","\x7f","\x79"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("__buildUniformList","\x44","\x16","\xc1","\x02"),
	HX_HCSTRING("__deleteShaders","\xa3","\x4d","\xc2","\x45"),
	HX_HCSTRING("__flush","\xa4","\xbb","\xf9","\x6c"),
	HX_HCSTRING("__getSamplerState","\x7f","\x6a","\x04","\x62"),
	HX_HCSTRING("__markDirty","\xa5","\x79","\xcf","\x64"),
	HX_HCSTRING("__setPositionScale","\x3f","\xc3","\xc0","\x0e"),
	HX_HCSTRING("__setSamplerState","\x8b","\xe7","\xcf","\x5d"),
	HX_HCSTRING("__uploadFromGLSL","\xa9","\x36","\x31","\x0d"),
	HX_HCSTRING("__use","\x27","\x8d","\x35","\xf2"),
	::String(null()) };

static void Program3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Program3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Program3D_obj::verbose,"verbose");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Program3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Program3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Program3D_obj::verbose,"verbose");
};

#endif

hx::Class Program3D_obj::__mClass;

static ::String Program3D_obj_sStaticFields[] = {
	HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"),
	::String(null())
};

void Program3D_obj::__register()
{
	hx::Object *dummy = new Program3D_obj;
	Program3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Program3D","\x7c","\x83","\x68","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Program3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Program3D_obj::__SetStatic;
	__mClass->mMarkFunc = Program3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Program3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Program3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Program3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Program3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Program3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Program3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Program3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_30_boot)
HXLINE(  30)		verbose = (::lime::utils::Log_obj::level == (int)5);
            	}
}

} // end namespace openfl
} // end namespace display3D
