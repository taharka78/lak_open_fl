// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_simulator_Simulator
#define INCLUDED_com_lak_simulator_Simulator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS3(com,lak,renderers,Renderer)
HX_DECLARE_CLASS3(com,lak,simulator,Simulator)
HX_DECLARE_CLASS4(com,lak,simulator,manager,ArmyManager)
HX_DECLARE_CLASS4(com,lak,simulator,manager,AttackMananger)
HX_DECLARE_CLASS4(com,lak,simulator,manager,EntitiesManager)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace lak{
namespace simulator{


class HXCPP_CLASS_ATTRIBUTES Simulator_obj : public  ::openfl::display::DisplayObject_obj
{
	public:
		typedef  ::openfl::display::DisplayObject_obj super;
		typedef Simulator_obj OBJ_;
		Simulator_obj();

	public:
		enum { _hx_ClassId = 0x0921afd5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.lak.simulator.Simulator")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.lak.simulator.Simulator"); }
		static hx::ObjectPtr< Simulator_obj > __new();
		static hx::ObjectPtr< Simulator_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Simulator_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Simulator","\xe4","\x60","\x17","\xc6"); }

		static  ::com::lak::simulator::Simulator instance;
		 ::com::lak::renderers::Renderer renderer;
		::Array< bool > aKeyPress;
		 ::com::lak::simulator::manager::EntitiesManager entitiesManager;
		 ::com::lak::simulator::manager::AttackMananger attackMananger;
		 ::com::lak::simulator::manager::ArmyManager armyManager;
		void initilizeUnit(::String unitType,int posX,int posY);
		::Dynamic initilizeUnit_dyn();

		void checkKeys();
		::Dynamic checkKeys_dyn();

		void checkForSelection();
		::Dynamic checkForSelection_dyn();

		void run(int delta);
		::Dynamic run_dyn();

};

} // end namespace com
} // end namespace lak
} // end namespace simulator

#endif /* INCLUDED_com_lak_simulator_Simulator */ 
