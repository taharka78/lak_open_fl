// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_utils_GameUtils
#define INCLUDED_com_lak_utils_GameUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,lak,utils,GameUtils)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace lak{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES GameUtils_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GameUtils_obj OBJ_;
		GameUtils_obj();

	public:
		enum { _hx_ClassId = 0x01f7dfeb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.lak.utils.GameUtils")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.lak.utils.GameUtils"); }

		hx::ObjectPtr< GameUtils_obj > __new() {
			hx::ObjectPtr< GameUtils_obj > __this = new GameUtils_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GameUtils_obj > __alloc(hx::Ctx *_hx_ctx) {
			GameUtils_obj *__this = (GameUtils_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameUtils_obj), false, "com.lak.utils.GameUtils"));
			*(void **)__this = GameUtils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GameUtils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GameUtils","\xbf","\x78","\xcc","\x81"); }

		static Float getAngleBetweenPt( ::openfl::geom::Point pt1, ::openfl::geom::Point pt2);
		static ::Dynamic getAngleBetweenPt_dyn();

		static int sortByF( ::Dynamic a, ::Dynamic b);
		static ::Dynamic sortByF_dyn();

		static int random(int min,int max);
		static ::Dynamic random_dyn();

		static Float dx( ::openfl::geom::Point objectA, ::openfl::geom::Point objectB);
		static ::Dynamic dx_dyn();

		static Float dy( ::openfl::geom::Point objectA, ::openfl::geom::Point objectB);
		static ::Dynamic dy_dyn();

		static Float distanceBetweenPt( ::openfl::geom::Point pt1, ::openfl::geom::Point pt2);
		static ::Dynamic distanceBetweenPt_dyn();

		static Float toGridCoord(Float n1,Float factor);
		static ::Dynamic toGridCoord_dyn();

		static ::cpp::VirtualArray to2DDimension(::String str,::String partName,hx::Null< int >  size);
		static ::Dynamic to2DDimension_dyn();

};

} // end namespace com
} // end namespace lak
} // end namespace utils

#endif /* INCLUDED_com_lak_utils_GameUtils */ 
