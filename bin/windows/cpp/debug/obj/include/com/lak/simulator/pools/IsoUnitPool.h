// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_simulator_pools_IsoUnitPool
#define INCLUDED_com_lak_simulator_pools_IsoUnitPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,lak,entities,IsoObject)
HX_DECLARE_CLASS3(com,lak,entities,IsoUnit)
HX_DECLARE_CLASS4(com,lak,simulator,pools,IsoUnitPool)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace lak{
namespace simulator{
namespace pools{


class HXCPP_CLASS_ATTRIBUTES IsoUnitPool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IsoUnitPool_obj OBJ_;
		IsoUnitPool_obj();

	public:
		enum { _hx_ClassId = 0x6358097d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.lak.simulator.pools.IsoUnitPool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.lak.simulator.pools.IsoUnitPool"); }

		hx::ObjectPtr< IsoUnitPool_obj > __new() {
			hx::ObjectPtr< IsoUnitPool_obj > __this = new IsoUnitPool_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< IsoUnitPool_obj > __alloc(hx::Ctx *_hx_ctx) {
			IsoUnitPool_obj *__this = (IsoUnitPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IsoUnitPool_obj), false, "com.lak.simulator.pools.IsoUnitPool"));
			*(void **)__this = IsoUnitPool_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IsoUnitPool_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("IsoUnitPool","\xc5","\xbb","\xaf","\x6e"); }

		static int MAX_VALUE;
		static int GROWTH_VALUE;
		static int counter;
		static ::Array< ::Dynamic> pool;
		static  ::com::lak::entities::IsoUnit currentEntity;
		static void initialize(int maxPoolSize,int growthValue);
		static ::Dynamic initialize_dyn();

		static  ::com::lak::entities::IsoUnit getEntity();
		static ::Dynamic getEntity_dyn();

		static void returnEntity( ::com::lak::entities::IsoUnit disposedUnit);
		static ::Dynamic returnEntity_dyn();

};

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace pools

#endif /* INCLUDED_com_lak_simulator_pools_IsoUnitPool */ 
