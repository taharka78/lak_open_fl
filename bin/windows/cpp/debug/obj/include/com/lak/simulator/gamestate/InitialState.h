// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_simulator_gamestate_InitialState
#define INCLUDED_com_lak_simulator_gamestate_InitialState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_lak_simulator_gamestate_IGameState
#include <com/lak/simulator/gamestate/IGameState.h>
#endif
HX_DECLARE_CLASS4(com,lak,simulator,gamestate,IGameState)
HX_DECLARE_CLASS4(com,lak,simulator,gamestate,InitialState)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace lak{
namespace simulator{
namespace gamestate{


class HXCPP_CLASS_ATTRIBUTES InitialState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef InitialState_obj OBJ_;
		InitialState_obj();

	public:
		enum { _hx_ClassId = 0x5aa87c01 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.lak.simulator.gamestate.InitialState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.lak.simulator.gamestate.InitialState"); }
		static hx::ObjectPtr< InitialState_obj > __new();
		static hx::ObjectPtr< InitialState_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InitialState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("InitialState","\x0d","\xc3","\x2d","\x10"); }

		 ::openfl::geom::Point pt;
		 ::Dynamic n;
		void mouseover();
		::Dynamic mouseover_dyn();

		void mousemove();
		::Dynamic mousemove_dyn();

		void mousedown();
		::Dynamic mousedown_dyn();

		void mouseup();
		::Dynamic mouseup_dyn();

		void mouseclick();
		::Dynamic mouseclick_dyn();

};

} // end namespace com
} // end namespace lak
} // end namespace simulator
} // end namespace gamestate

#endif /* INCLUDED_com_lak_simulator_gamestate_InitialState */ 
