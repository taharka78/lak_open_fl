// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_controllers_events_MapEvent
#define INCLUDED_com_lak_controllers_events_MapEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
HX_DECLARE_CLASS4(com,lak,controllers,events,MapEvent)
HX_DECLARE_CLASS2(openfl,events,Event)

namespace com{
namespace lak{
namespace controllers{
namespace events{


class HXCPP_CLASS_ATTRIBUTES MapEvent_obj : public  ::openfl::events::Event_obj
{
	public:
		typedef  ::openfl::events::Event_obj super;
		typedef MapEvent_obj OBJ_;
		MapEvent_obj();

	public:
		enum { _hx_ClassId = 0x0b6b4951 };

		void __construct(::String ype, ::Dynamic _dataObj);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.lak.controllers.events.MapEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.lak.controllers.events.MapEvent"); }
		static hx::ObjectPtr< MapEvent_obj > __new(::String ype, ::Dynamic _dataObj);
		static hx::ObjectPtr< MapEvent_obj > __alloc(hx::Ctx *_hx_ctx,::String ype, ::Dynamic _dataObj);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MapEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MapEvent","\xfe","\xf3","\xb8","\xc6"); }

		static void __boot();
		static ::String SETUP_WORLD;
		static ::String INIT;
		 ::Dynamic dataObj;
		 ::openfl::events::Event clone();

};

} // end namespace com
} // end namespace lak
} // end namespace controllers
} // end namespace events

#endif /* INCLUDED_com_lak_controllers_events_MapEvent */ 
