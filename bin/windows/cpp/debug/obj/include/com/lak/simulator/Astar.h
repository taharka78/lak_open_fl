// Generated by Haxe 3.4.0
#ifndef INCLUDED_com_lak_simulator_Astar
#define INCLUDED_com_lak_simulator_Astar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,lak,entities,IsoObject)
HX_DECLARE_CLASS3(com,lak,entities,IsoUnit)
HX_DECLARE_CLASS3(com,lak,simulator,Astar)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace lak{
namespace simulator{


class HXCPP_CLASS_ATTRIBUTES Astar_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Astar_obj OBJ_;
		Astar_obj();

	public:
		enum { _hx_ClassId = 0x5f215b04 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.lak.simulator.Astar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.lak.simulator.Astar"); }

		hx::ObjectPtr< Astar_obj > __new() {
			hx::ObjectPtr< Astar_obj > __this = new Astar_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Astar_obj > __alloc(hx::Ctx *_hx_ctx) {
			Astar_obj *__this = (Astar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Astar_obj), false, "com.lak.simulator.Astar"));
			*(void **)__this = Astar_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Astar_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Astar","\x93","\x98","\x67","\xb9"); }

		static void __boot();
		static Float _straightCost;
		static Float _diagCost;
		static  ::com::lak::entities::IsoUnit _unit;
		static void findPath( ::com::lak::entities::IsoUnit unit);
		static ::Dynamic findPath_dyn();

		static Float diagonal( ::openfl::geom::Point node, ::openfl::geom::Point endNode);
		static ::Dynamic diagonal_dyn();

		static Float manhattan( ::openfl::geom::Point newNode, ::openfl::geom::Point end);
		static ::Dynamic manhattan_dyn();

		static int heuristic( ::openfl::geom::Point pt1, ::openfl::geom::Point pt2);
		static ::Dynamic heuristic_dyn();

};

} // end namespace com
} // end namespace lak
} // end namespace simulator

#endif /* INCLUDED_com_lak_simulator_Astar */ 
