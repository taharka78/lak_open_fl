// Generated by Haxe 3.4.0
#ifndef INCLUDED_spritesheet_AnimatedSprite
#define INCLUDED_spritesheet_AnimatedSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(spritesheet,AnimatedSprite)
HX_DECLARE_CLASS1(spritesheet,Spritesheet)
HX_DECLARE_CLASS2(spritesheet,data,BehaviorData)

namespace spritesheet{


class HXCPP_CLASS_ATTRIBUTES AnimatedSprite_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef AnimatedSprite_obj OBJ_;
		AnimatedSprite_obj();

	public:
		enum { _hx_ClassId = 0x1a995e62 };

		void __construct( ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="spritesheet.AnimatedSprite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"spritesheet.AnimatedSprite"); }
		static hx::ObjectPtr< AnimatedSprite_obj > __new( ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing);
		static hx::ObjectPtr< AnimatedSprite_obj > __alloc(hx::Ctx *_hx_ctx, ::spritesheet::Spritesheet sheet,hx::Null< bool >  __o_smoothing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AnimatedSprite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AnimatedSprite","\x28","\x73","\xfe","\x75"); }

		 ::openfl::display::Bitmap bitmap;
		 ::spritesheet::data::BehaviorData currentBehavior;
		int currentFrameIndex;
		bool smoothing;
		 ::spritesheet::Spritesheet spritesheet;
		bool behaviorComplete;
		::Array< ::Dynamic> behaviorQueue;
		 ::spritesheet::data::BehaviorData behavior;
		int loopTime;
		int timeElapsed;
		 ::Dynamic getFrameData(int index);
		::Dynamic getFrameData_dyn();

		void queueBehavior( ::Dynamic behavior);
		::Dynamic queueBehavior_dyn();

		 ::spritesheet::data::BehaviorData resolveBehavior( ::Dynamic behavior);
		::Dynamic resolveBehavior_dyn();

		void showBehavior( ::Dynamic behavior,hx::Null< bool >  restart);
		::Dynamic showBehavior_dyn();

		void showBehaviors(::cpp::VirtualArray behaviors);
		::Dynamic showBehaviors_dyn();

		void update(int deltaTime);
		::Dynamic update_dyn();

		void updateBehavior( ::spritesheet::data::BehaviorData behavior,hx::Null< bool >  restart);
		::Dynamic updateBehavior_dyn();

};

} // end namespace spritesheet

#endif /* INCLUDED_spritesheet_AnimatedSprite */ 
