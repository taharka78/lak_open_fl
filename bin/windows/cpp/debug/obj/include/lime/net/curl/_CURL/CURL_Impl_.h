// Generated by Haxe 3.4.0
#ifndef INCLUDED_lime_net_curl__CURL_CURL_Impl_
#define INCLUDED_lime_net_curl__CURL_CURL_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(lime,net,curl,_CURL,CURL_Impl_)

namespace lime{
namespace net{
namespace curl{
namespace _CURL{


class HXCPP_CLASS_ATTRIBUTES CURL_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CURL_Impl__obj OBJ_;
		CURL_Impl__obj();

	public:
		enum { _hx_ClassId = 0x2c51c50b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.net.curl._CURL.CURL_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.net.curl._CURL.CURL_Impl_"); }

		hx::ObjectPtr< CURL_Impl__obj > __new() {
			hx::ObjectPtr< CURL_Impl__obj > __this = new CURL_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< CURL_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			CURL_Impl__obj *__this = (CURL_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CURL_Impl__obj), false, "lime.net.curl._CURL.CURL_Impl_"));
			*(void **)__this = CURL_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CURL_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CURL_Impl_","\x8c","\x48","\xb6","\x54"); }

		static void __boot();
		static int GLOBAL_SSL;
		static int GLOBAL_WIN32;
		static int GLOBAL_ALL;
		static int GLOBAL_NOTHING;
		static int GLOBAL_DEFAULT;
		static int GLOBAL_ACK_EINTR;
		static int getDate(::String date,int now);
		static ::Dynamic getDate_dyn();

		static void globalCleanup();
		static ::Dynamic globalCleanup_dyn();

		static int globalInit(int flags);
		static ::Dynamic globalInit_dyn();

		static ::String version();
		static ::Dynamic version_dyn();

		static  ::Dynamic versionInfo(int type);
		static ::Dynamic versionInfo_dyn();

		static bool intGt(Float a,Float b);
		static ::Dynamic intGt_dyn();

};

} // end namespace lime
} // end namespace net
} // end namespace curl
} // end namespace _CURL

#endif /* INCLUDED_lime_net_curl__CURL_CURL_Impl_ */ 
